			#pragma exclude_renderers gles
            
            half3 EvaluateNetwork_Top_LD_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.18401094, -0.05390149, 0.05139737, 0.15115406, -0.19272351, -0.023176184, -0.15388748, -0.17640452, 0.2309976, 0.16810116, -0.09989259, 0.25756747, -0.19877887, -0.10146892, 0.2712216, 0.11555215
                );

                float4 intermediate_one_4 = float4
                (
                    -0.37308615, -0.22854611, -0.1972804, 0.28435397
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.0051822597, 0.308906, -0.6450012, 0.35735184, -0.6856571, 0.5451199, -0.3413418, -0.76800483, -0.122285336, -0.23790956, 0.17238533, 0.3053724, -0.06457052, 0.15670478, 0.6848429, 0.16429278)
                    + f0.g * float4x4(0.30296382, 0.1917084, 0.32337207, -0.071150444, -0.17316377, 0.15808389, 0.23263939, -0.04402473, 0.3019073, 0.03147483, 0.23774609, 0.07720058, -0.15131158, -0.046533406, 0.13575217, -0.14698102)
                    + f0.b * float4x4(0.9203052, 0.73047054, 1.3065444, 1.1557505, 0.06931781, 0.52931947, 0.65932363, -0.31628552, 0.88015145, 0.010823727, -0.16962764, 1.2821529, 0.17863566, -0.10220888, -0.5896927, -1.0720962)
                    + f0.a * float4x4(0.0289158, 0.009888393, 0.02008379, -0.021319576, -0.1043794, -0.02752042, 0.10156088, -0.013392465, -0.00043137802, -0.06371075, -0.18164024, 0.046430416, -0.22115439, -0.22286832, -0.024435483, -0.03333265)
                    + f1.r * float4x4(0.123325676, -0.01620074, -0.0025525293, 0.117790654, 0.1563857, 0.058205117, -0.34287688, 0.041317422, 0.085457064, 0.22067362, -0.036552906, -0.11401554, 0.064848125, -0.13751543, 0.13360852, 0.09322304)
                    + f1.g * float4x4(-0.010596513, -0.019183716, 0.008804021, 0.09926896, 0.12108835, 0.0370831, -0.1971767, 0.01982549, 0.05671794, 0.06916341, 0.030141562, -0.095838554, -0.23729226, 0.18402985, 0.09448965, 0.0659899)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.0887209, 0.2996743, -0.025122134, -0.17317912, 0.29814503, -0.061073154, -0.24618001, -0.06488526, 0.16897398, 0.23112965, 0.23726994, -0.20042205, 0.12731451, -0.03526777, -0.2765223, -0.016227407)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.03502563, -0.9372629, 0.6093894, -0.31879318, -0.5989183, -1.369454, 0.29329613, 0.6786791, 0.18619592, -0.0055305064, -0.006770164, 0.12702805, 0.24431819, 0.22191986, 0.28721458, -0.24581784)
                    + f2.b * float4x4(0.5668574, -0.23018375, 0.9481971, 1.5664039, 1.0753704, -0.19107158, -1.1318831, 0.08096346, 1.6068199, -0.201437, -0.24087828, -0.027644498, -0.08753541, 0.030206472, -0.07270375, -0.1034699)
                    + f2.a * float4x4(0.109506465, -0.9817421, 1.5861545, 0.871305, 0.076962024, -0.27501678, 0.1431429, -0.2890729, 0.7189787, -0.06934887, -0.1034396, -0.11534575, -0.13082507, 0.13345781, 0.5987682, 1.0972754)
                    + f3.r * float4x4(-0.08644574, 0.102708526, 0.279205, 0.14557756, -0.02736597, 0.047523074, 0.040103555, 0.12820604, -0.06415314, -0.15083763, -0.17335445, 0.230501, 0.1530523, 0.019607693, -0.020497117, 0.06572467)
                    + f3.g * float4x4(0.26684684, 0.08650669, 0.07049028, 0.003362692, -0.12125287, -0.10928756, 0.061299898, -0.12807114, -0.023641538, -0.1676237, 0.042194664, 0.24832171, 0.055818647, 0.093182504, 0.39388815, 0.087735824)
                    + f3.b * float4x4(0.29493544, -0.18456638, 0.33498082, -0.12671417, -0.07692968, 0.1496007, 0.024575636, -0.08065274, -0.16547848, -0.08633709, -0.06199324, 0.14125569, 0.05545649, -0.1798496, 0.12246745, 0.19526169)
                    + f3.a * float4x4(0.07996456, -0.15775138, -0.030298369, -0.0214268, -0.14504708, 0.022123238, 0.20645744, 0.0014284792, -0.08510427, 0.055095434, -0.15480515, 0.23220077, 0.020694554, -0.16119322, 0.049512964, -0.026935723);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.12799712, -0.04824978, 0.03698927, -0.04539524)
                    + f0.g * float4(-0.074809425, -0.109698534, -0.09569588, 0.15676983)
                    + f0.b * float4(-0.86945844, -0.092971265, -0.0845595, 0.44405895)
                    + f0.a * float4(0.026953425, 0.154459, 0.064301014, -0.00771841)
                    + f1.r * float4(-0.0022329737, -0.0751974, -0.066839516, 0.039082028)
                    + f1.g * float4(-0.051456943, 0.08088711, 0.07516375, 0.029845659)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.01602833, -0.0305309, 0.051655352, -0.37088108)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.030055827, -0.17695737, -0.21805188, 0.074751735)
                    + f2.b * float4(0.6539687, -0.0939486, 0.12339538, 0.09207015)
                    + f2.a * float4(-0.30649516, 0.1198003, -0.21833882, 1.4967988)
                    + f3.r * float4(-0.043482013, -0.042660743, 0.028912425, 0.20626958)
                    + f3.g * float4(-0.27841386, 0.051097125, -0.22173482, 0.32901737)
                    + f3.b * float4(-0.2674617, -0.129855, -0.17914948, -0.08043567)
                    + f3.a * float4(0.10370539, -0.18271965, -0.20150936, 0.044564396);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.11887221, 0.5273971, 0.036589246, -0.0023400076, 0.2609908, -0.24037762, -0.23645169, -0.20880665, -0.5645339, -0.28306708, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.25584897, -0.2876661, 0.18512216, -0.036436617, 0.3338867, 0.04854734, -0.06249583, 0.31478944, -0.107118584, -0.46563205, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.13106623, -0.0059726923, 0.12710223, 0.053794436, -0.43311405, 0.0108038, -0.040275365, -1.1776707, 0.2885419, 0.028122706, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.105868414, -0.4998266, 1.4606175, 0.28084937, -0.2513699, 0.016140958, -0.10113688, 0.5494736, -0.65397173, 0.21971786, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.093482554, 0.008177931, -1.967626, 0.11524058, 0.03184048, -0.050378088, -0.080256134, -0.13843125, 0.5836636, -0.55423856, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.10632854, -0.05831617, 0.09785862, 0.217414, 0.69255733, -0.034906544, 0.051625535, 0.62350935, -0.43884254, 0.027379729, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.09909993, 0.17809021, -0.27701947, -0.3258078, 0.4149863, -0.11123181, -0.056540832, 0.9855157, -0.16075194, 0.26355416, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.030621152, 0.093298554, 0.20099126, -0.055059645, -0.08082855, -0.10097211, -0.15593608, -0.27342284, -0.022745095, 0.18702088, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.022393394, 0.26583424, -0.109391086, -0.20038424, 0.10101719, -0.04853534, 0.06337429, 0.00919017, -0.30017638, 0.53485924, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.20539518, -0.4302456, 0.22733326, -0.098587975, 0.010547887, 0.14301737, -0.060513783, -0.16713522, -0.13691023, -0.29444528, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.056280572, 0.13366207, -0.12988397, 0.4773507, -0.5567465, 0.110604726, -0.22172132, -0.55075896, 0.6030799, 0.18194108, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.20229803, -0.20667957, -0.01367757, 0.21487616, -0.22358043, -0.16567852, 0.13946825, 0.20857318, -0.1646878, 0.13990209, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.00012555078, 0.105497755, -0.18849657, 0.46303642, -0.31995463, -0.086729884, -0.008002468, -0.43402234, -0.36264062, 0.16331011, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.05324672, 0.007910659, 0.057373088, -0.09940409, -0.36935824, -0.17813031, -0.023065854, -0.58516324, 1.0988466, 0.083617166, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.15306807, 0.2862082, 0.08134875, 0.087776475, -0.24749525, -0.20106621, 0.12904759, -0.032764025, 0.1269951, 0.33125985, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.03531383, -0.359183, 0.11238922, -0.18798308, 0.37310594, 0.08162723, 0.17588066, -0.026164182, 0.9556839, -0.18515278, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.47008818, 0.28568086, 0.2811062
                );
                result +=
                    intermediate_two[0][0] * float3(-0.074320756, 0.20320049, 0.19149433)
                    + intermediate_two[0][1] * float3(-0.37981805, -0.31808466, -0.3179632)
                    + intermediate_two[0][2] * float3(-0.13088956, -0.17157461, -0.16532817)
                    + intermediate_two[0][3] * float3(-0.18346696, 0.036863975, 0.0020054302)
                    + intermediate_two[1][0] * float3(0.2677751, -0.0070503186, -0.004344945)
                    + intermediate_two[1][1] * float3(-0.16978383, 0.0978928, -0.06732753)
                    + intermediate_two[1][2] * float3(0.23690563, 0.24742213, 0.2585407)
                    + intermediate_two[1][3] * float3(0.5065397, 0.0067947023, 0.012842231)
                    + intermediate_two[2][0] * float3(-0.37652895, -0.22583695, -0.22901717)
                    + intermediate_two[2][1] * float3(-0.018218618, 0.11062183, 0.109863155);

                return result;
            }
            half3 EvaluateNetwork_Top_LD_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.008213029, -0.10343154, 0.0, 0.0, 0.15854459, 0.0, 0.17002948, -0.081738174, 0.0, 0.0, -0.06925601, 0.16605178, 0.18538477, -0.009485383, -0.046867177, -0.010316766
                );

                float4 intermediate_one_4 = float4
                (
                    -0.00851315, 0.0, 0.16747741, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.26967266, 0.557728, -0.46348134, 0.1881425, -0.89984673, -0.5138307, -0.09355881, 0.21728195, -0.9045647, 0.13725406, -0.70335937, 0.2821005, -0.33668688, 0.37954226, 0.040076643, -0.0008942748)
                    + f0.g * float4x4(-0.020440413, -0.31747144, 0.22649929, -0.79574597, -0.1622745, -0.061149582, 0.38205633, 0.2379588, 0.07720297, -0.15605927, 0.30188996, 0.3822913, 1.0548065, 0.10819431, -0.24266556, -0.044819944)
                    + f0.b * float4x4(-0.7176209, -1.05472, 0.17284235, 0.5521824, -0.0031787958, -0.06371774, 0.29026896, 0.6977174, 0.5911784, 0.3595963, 0.3261034, 0.4700617, 0.7423638, 1.3389698, -0.4449057, -1.4380914)
                    + f0.a * float4x4(-0.20478371, 0.028863093, 0.527816, 0.21210915, -0.07332182, 0.4714436, 0.006005653, -0.18507421, -0.10612589, -0.37735936, 0.03439786, 0.0043582227, -0.02424837, -0.03128585, -0.714488, -0.02250529)
                    + f1.r * float4x4(0.1328269, -0.03001812, 0.14032899, -0.009128058, -0.07035836, -0.44881627, 0.058305323, 0.36475745, 0.20689763, 0.18766409, 0.23822497, 0.03211423, 0.070893764, -0.19120465, -0.39095345, -0.094180636)
                    + f1.g * float4x4(-0.2518526, 0.0062852725, 1.3050503, 0.65755844, -0.042815574, 0.08261935, 0.02014593, -0.0068037505, 0.73951864, 0.22193529, 0.1327462, 0.018448293, 0.03991758, -0.13212629, 0.17900823, -0.036322393)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.13025747, 0.18541987, 0.051311567, -0.4043137, -0.2067178, 0.21027829, -0.21547006, 0.23818885, -0.02228675, 0.77200747, -0.11575381, 0.042991493, -0.35403892, 0.27410075, 0.09907708, -0.5943998)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.11018487, 0.9005984, 0.17526214, -0.20147912, -0.7387887, -0.037164662, 0.08136852, 0.036764767, -0.6318568, -0.36729887, -0.39681512, 1.3115873, 1.1706537, -0.5169621, 0.23244685, 0.67135483)
                    + f2.b * float4x4(0.26656637, -0.4849784, -0.6516506, 0.38151968, 0.6061058, 0.08917348, -0.7918701, -0.24994004, 0.10808924, -0.22086994, -0.46998405, 0.16446437, -0.072454825, -0.3647629, -0.44023716, -0.3082033)
                    + f2.a * float4x4(-0.23130074, -0.54592896, -0.29335544, -0.4939828, -0.07176312, 0.08136868, 0.9707861, -0.24706824, -0.046388548, -0.012720043, -0.5841169, 1.5126753, 0.14166346, -1.0752088, 0.27713844, -0.098942414)
                    + f3.r * float4x4(-0.15967576, 0.19035521, 0.40375632, 0.3899215, 0.25876635, -0.1727081, 0.22093119, -0.0847532, -0.108878605, -0.1339395, -0.09927624, 0.27915, 0.77182347, 0.19257967, -0.0006882915, -0.21771902)
                    + f3.g * float4x4(-0.21403106, 0.5600457, -0.13698591, 0.08633077, 0.2893607, -0.11588551, 0.6901532, -0.22439322, -0.020086177, -0.1444517, 0.15651262, 0.25021777, 0.22808997, -0.123400815, -0.862504, 0.61525637)
                    + f3.b * float4x4(-0.91190225, -0.15992266, -0.27642944, -0.54856044, -0.1391607, -0.31305373, 0.34211314, -0.055187915, -0.78283244, -0.11068815, -0.035854902, 0.34249812, 0.093511015, 0.12536006, -0.42942944, -0.693487)
                    + f3.a * float4x4(-0.25318334, -0.59130114, -0.29607022, -0.5639299, -0.04710913, -0.19187808, -0.1786304, 0.15412, -0.59286225, 0.12217536, 0.32903013, 0.67707753, -0.35857207, -0.16901514, 0.42208853, -0.18519564);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45066935, -0.39273125, -0.80311674, -0.05888661)
                    + f0.g * float4(0.056371998, -1.1157421, 0.010278496, -0.51103616)
                    + f0.b * float4(0.3093743, 0.48101074, 0.5809998, 0.013984563)
                    + f0.a * float4(-0.5339951, 0.107482396, 0.0069427732, -0.7120615)
                    + f1.r * float4(-0.11759686, -0.4384489, 0.16950893, 0.4670956)
                    + f1.g * float4(0.3716432, 0.048151948, 0.10292441, -0.11180612)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.20317408, 0.27312347, -1.054063, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.24484287, 0.41496858, 1.6603402, -0.08536301)
                    + f2.b * float4(-0.06493093, -0.06740296, 0.4494566, -0.3206004)
                    + f2.a * float4(-0.17494157, 0.19279256, 0.103610456, 0.10167499)
                    + f3.r * float4(-0.2995607, -0.44784978, 0.11300053, 0.12286028)
                    + f3.g * float4(-0.075969316, 0.32418048, 0.28749013, 0.28310975)
                    + f3.b * float4(-0.4033373, -0.23514375, 0.18543045, -0.066080585)
                    + f3.a * float4(-0.12513049, 0.19867179, -0.1580865, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.3450909, 0.17109673, 0.6558293, 0.7456274, -0.19307154, 0.014827463, -0.34034294, 0.1477687, 0.42561173, 0.35990053, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.13307272, 0.3361501, 0.1467457, 0.12919384, -0.2740743, 0.5640503, -0.113547556, 0.071001485, -0.10117935, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.25261047, -0.030816006, -0.9210874, -0.1247477, -0.5237581, 0.50313306, -0.14852472, 0.05647264, -0.027891256, -0.031466268, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.06983662, 0.38743168, -0.30434692, -0.53762436, -0.15135333, 0.29431835, 0.6264388, -0.34480572, -0.118898034, 0.22942753, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.060386334, 0.2574327, -0.06121866, -0.39455104, -0.05310474, 0.14434846, -0.48680615, -0.4613217, -0.11315639, 0.10845754, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.13379379, 0.30298534, 0.17014529, -0.18294924, -0.35005254, 0.10469009, -0.16798954, -0.23874778, 0.22475806, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.2539541, 0.050750628, -0.042400684, 0.2744524, -0.46111602, 0.2712686, -0.29971808, 0.07142947, 0.042240616, 0.05529991, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.043506905, 0.29266793, 0.32875708, 0.18207636, 0.29660088, -0.47089165, 0.37554288, -0.9040688, -0.43319958, 0.008604182, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.14577664, -0.5102436, -0.7042899, -0.101179674, -0.72455066, 0.31431016, -0.1824409, 0.6473105, 0.38616112, -0.8244936, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.6203883, -0.049091008, 0.18499151, -0.2995374, -0.66947925, -0.06589498, -0.7608561, -0.32016674, 0.13178706, 0.087962575, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4850037, 0.25649083, 0.21318537, 0.27854866, 0.5660879, 0.5851996, 0.40437123, 0.45763025, 0.18494761, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.2058653, 0.1495097, -0.052597903, -0.2913759, 0.28726906, -0.1935499, -1.004555, 0.13894422, -0.36738497, -0.37482834, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.1336611, -0.026019951, 0.24861443, 0.6433326, 0.35637257, 0.16534239, -0.16286893, 0.427844, 0.44423342, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2621343, -0.17108545, 0.50701785, 0.5829826, 0.07509643, -0.23804331, -0.09071631, 0.045562245, -0.07328703, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.4463345, -0.06864236, -2.370875, -0.20557612, 0.4457584, 0.25974977, 0.7428412, 0.052291192, -0.24290805, -0.31985343, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.07288222, 0.15226543, 0.075952776
                );
                result +=
                    intermediate_two[0][0] * float3(-0.11880655, -0.089304395, -0.055793542)
                    + intermediate_two[0][1] * float3(-0.09348355, -0.20458937, -0.13220258)
                    + intermediate_two[0][2] * float3(0.06603813, 0.03263986, 0.035889696)
                    + intermediate_two[0][3] * float3(0.00828239, 0.15925893, -0.03868369)
                    + intermediate_two[1][0] * float3(-0.0242105, 0.49440828, -0.3687282)
                    + intermediate_two[1][1] * float3(0.2131883, 0.10505394, 0.12712324)
                    + intermediate_two[1][2] * float3(0.1860852, 0.19997819, 0.20759983)
                    + intermediate_two[1][3] * float3(-0.16492781, -0.14205289, -0.12569116)
                    + intermediate_two[2][0] * float3(-0.08581056, -0.1195321, -0.11348896)
                    + intermediate_two[2][1] * float3(-0.13426447, -0.03434057, -0.02309543);

                return result;
            }
            half3 EvaluateNetwork_Top_LT_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.26750904, 0.21003306, 0.0, 0.0, -0.004422971, -0.225548, 0.18077955, -0.04536899, 0.0, 0.0, -0.2176943, 0.0958315, -0.067429736, -0.0061754766, 0.020739222, -0.071535304
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, 0.0, 0.12204478, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-1.2213907, 0.9272042, -0.46348134, 0.1881425, -0.47805423, -0.80908626, -0.30085325, 0.28910324, -0.9045647, 0.13725406, -0.5641025, 0.47645965, -0.7864038, -1.2518077, 1.4294101, 0.57315725)
                    + f0.g * float4x4(-0.2797421, -0.0040072864, 0.22649929, -0.79574597, -0.3252437, -0.28670886, 0.3927969, 0.27432886, 0.07720297, -0.15605927, 0.15346128, 0.31208116, 0.80196995, 0.11151263, -0.17506197, -0.106038444)
                    + f0.b * float4x4(-0.23213145, 0.58955973, 0.17284235, 0.5521824, 0.84614944, 0.97979856, 0.79001373, 0.6604086, 0.5911784, 0.3595963, -1.4296662, 1.5331837, 0.38628, 0.1365855, 1.1861731, -0.92260945)
                    + f0.a * float4x4(-0.07891755, 0.07145559, 0.527816, 0.21210915, -0.009303885, -0.04486783, -0.021708874, -0.2164691, -0.10612589, -0.37735936, -2.06565e-05, 0.089438826, -0.020117605, 0.011241475, 0.015671361, 0.010061138)
                    + f1.r * float4x4(0.110519744, -0.10752053, 0.14032899, -0.009128058, 0.008959076, 0.0645571, 0.091022976, 0.33664674, 0.20689763, 0.18766409, -0.0009507324, -0.1835775, 0.007220447, -0.096860684, -0.055121504, -0.06590494)
                    + f1.g * float4x4(0.08395909, -0.0726859, 1.3050503, 0.65755844, -0.0037285802, 0.041652936, 0.074214295, -0.03933745, 0.73951864, 0.22193529, -0.019267784, -0.15050867, -0.013013151, -0.048682045, 0.00612852, -0.039060816)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.38956523, -0.12805924, 0.051311567, -0.4043137, -0.04374516, 0.43581846, -0.22621487, 0.20181964, -0.02228675, 0.77200747, 0.032684278, 0.11320409, -0.10122403, 0.27076972, 0.03147044, -0.53313166)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.9398666, 0.76122665, 0.17526214, -0.20147912, 0.04646769, -1.7452852, -0.16915663, -0.023032116, -0.6318568, -0.36729887, 0.5630736, 0.5072801, -0.5633462, 1.2464967, -1.4228233, -0.5675936)
                    + f2.b * float4x4(0.56504565, -0.79512846, -0.6516506, 0.38151968, 0.43658435, 0.6286588, -1.2421548, -0.22026151, 0.10808924, -0.22086994, 0.16851704, -0.08958339, 0.5315077, -0.16626333, -0.07209696, -0.90640056)
                    + f2.a * float4x4(-1.1537886, -1.1187695, -0.29335544, -0.4939828, -1.5434039, -0.9597525, 0.045749173, -0.28254676, -0.046388548, -0.012720043, 0.3788726, -0.38043275, 0.6253961, -0.5983594, -1.6403224, -1.8545561)
                    + f3.r * float4x4(-0.41898593, 0.5038322, 0.40375632, 0.3899215, 0.095809974, -0.39825174, 0.23168191, -0.048383426, -0.108878605, -0.1339395, -0.24773648, 0.20895782, 0.5190357, 0.19587971, 0.066912144, -0.27894)
                    + f3.g * float4x4(-0.47334415, 0.87347925, -0.13698591, 0.08633077, 0.12639982, -0.34143347, 0.7009559, -0.18802299, -0.020086177, -0.1444517, 0.008039872, 0.18002984, -0.024706334, -0.12009655, -0.7948451, 0.5540008)
                    + f3.b * float4x4(-1.1712703, 0.15353489, -0.27642944, -0.54856044, -0.3021182, -0.5386053, 0.35289267, -0.018817712, -0.78283244, -0.11068815, -0.18430975, 0.27229404, -0.15928335, 0.12868242, -0.36183795, -0.75474256)
                    + f3.a * float4x4(-0.51251715, -0.27781627, -0.29607022, -0.5639299, -0.21007359, -0.41741884, -0.16788863, 0.1904892, -0.59286225, 0.12217536, 0.18060112, 0.6068753, -0.6113878, -0.165711, 0.4897279, -0.24641627);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.39273125, -0.8393076, -0.05888661)
                    + f0.g * float4(0.06488515, -1.1157421, -0.03515595, -0.51103616)
                    + f0.b * float4(0.3008439, 0.48101074, 0.5978038, 0.013984563)
                    + f0.a * float4(-0.5425608, 0.107482396, -0.016402477, -0.7120615)
                    + f1.r * float4(-0.12611742, -0.4384489, 0.0841203, 0.4670956)
                    + f1.g * float4(0.3637557, 0.048151948, 0.030793551, -0.11180612)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -1.0085799, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 0.41496858, 0.4382626, -0.08536301)
                    + f2.b * float4(-0.05775499, -0.06740296, 0.20174181, -0.3206004)
                    + f2.a * float4(-0.1836326, 0.19279256, 1.1259668, 0.10167499)
                    + f3.r * float4(-0.29104778, -0.44784978, 0.06757443, 0.12286028)
                    + f3.g * float4(-0.06745626, 0.32418048, 0.24205947, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.1400193, -0.066080585)
                    + f3.a * float4(-0.11661739, 0.19867179, -0.20351307, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.6017985, -0.50873923, -0.073976815, 0.22653468, -0.15421282, 0.37827644, 0.5672801, 0.26817617, -0.036417894, -0.2459632, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.1695587, 0.29406136, 0.1467457, -1.1287525, -1.8569624, -1.0170892, 1.8662043, -0.44424927, -0.1438748, -1.3952796, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.054159477, 0.704263, -1.0916723, 0.6431897, -0.015365952, 0.5968532, -0.09186122, 0.099670626, -0.8021489, -0.7212358, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.40088394, 0.5584516, -0.17947848, -0.036468547, 0.8289973, 0.13996442, 0.013689054, -0.40347764, 0.7409875, 0.42581797, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.07549202, 1.949604, -0.6285974, -1.401637, 2.657728, -0.21096224, -0.012238415, -0.67106324, -1.2021121, 1.066388, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.20252956, -0.10744988, -0.11931042, 0.82824177, -0.019198965, 0.8662325, -0.13692167, -0.027837425, 0.37806982, -1.3486694, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.1402295, 0.3294683, 0.17014529, -0.19214714, -0.2425166, 0.09816337, -0.18046327, -0.21276379, 0.22498292, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21241033, -0.2845993, -0.16560175, 0.23395255, -0.39035067, 0.031651206, -1.2067994, 0.30761984, -0.1620367, -0.22337092, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.009684692, -0.5025145, 0.114845105, -0.5039781, -0.09629695, -0.52323395, 0.30872518, -0.17827038, -0.5700291, 0.44166043, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.1690038, 0.21050015, -0.37405512, 0.39641654, -0.4634122, 0.438667, 0.18368183, 0.3786392, 0.34051162, -0.55026275, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.724568, -0.102212094, 0.6883027, -0.2632555, -0.03721828, -0.3696554, -1.2037315, 0.6479726, -0.20453139, 0.21376334, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.32110706, -0.3338462, 0.21318537, 1.6098802, -0.44321424, 1.2730795, -0.88544816, 0.6255049, -0.05024836, -0.6798914, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.65820765, 0.20883566, -0.4160207, -0.08753737, 0.41342756, -0.124449804, -2.2153213, 0.5669861, -0.16815323, -0.050109506, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2621343, -0.17108545, 0.50701785, 0.5829826, 0.07509643, -0.23804331, -0.09071631, 0.045562245, -0.07328703, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.051346168, 0.42525, -0.28952217, -0.78411794, 0.47352436, -0.51314276, -0.013523871, -0.26369035, -0.14846855, 1.0044419, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.12929146, 0.37457785, 0.31851012
                );
                result +=
                    intermediate_two[0][0] * float3(0.19697456, 0.29116076, 0.2764857)
                    + intermediate_two[0][1] * float3(0.93516994, -0.0803488, -0.07302184)
                    + intermediate_two[0][2] * float3(-0.1989504, -0.15721238, -0.4238195)
                    + intermediate_two[0][3] * float3(-0.6342639, -0.010466964, -0.06576354)
                    + intermediate_two[1][0] * float3(-0.9374973, -0.034525067, -0.04805221)
                    + intermediate_two[1][1] * float3(0.75165313, 0.080639824, 0.13556619)
                    + intermediate_two[1][2] * float3(0.39869526, 0.46531907, 0.47654206)
                    + intermediate_two[1][3] * float3(-0.12605175, -0.3505729, -0.3159343)
                    + intermediate_two[2][0] * float3(0.24867405, -0.008974974, -0.011741739)
                    + intermediate_two[2][1] * float3(0.44708934, -0.12247409, -0.08415515);

                return result;
            }
            half3 EvaluateNetwork_Top_LT_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.14487015, 0.16154543, 0.18383187, 0.20099758, 0.27628505, -0.18880452, 0.08134153, -0.13963509, 0.2762013, 0.16810116, -0.10420083, 0.10830694, -0.19877887, -0.10507305, -0.026147481, 0.05987078
                );

                float4 intermediate_one_4 = float4
                (
                    -0.43305054, -0.22854611, -0.1972804, 0.30484748
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.65481097, 0.86355907, -1.695921, 1.4292662, -0.79872674, -1.8245881, -0.48941278, -0.068382226, 1.047413, -0.23790956, 0.1677821, 0.37941253, -0.06457052, 0.0050326544, 1.2048733, -0.17621708)
                    + f0.g * float4x4(0.26384577, 0.407159, 0.45582515, -0.02129499, 0.29584146, -0.007538319, 0.46789008, -0.0072589642, 0.34711558, 0.03147483, 0.23343794, -0.07205348, -0.15131158, -0.050137144, -0.16161293, -0.2026672)
                    + f0.b * float4x4(0.4641777, 2.7050736, 0.28631833, 0.0649662, 1.6699252, -1.7397438, 0.98893774, -0.5627275, 0.38338444, 0.010823727, -0.16523767, 0.63368696, 0.17863566, -1.3838545, -0.5092773, -0.12702492)
                    + f0.a * float4x4(0.043141752, -0.028053341, -0.07503553, 0.2728952, -0.008253985, -0.0211345, 0.028154278, 0.0032095255, 0.08504868, -0.06371075, -0.1772788, -0.017680114, -0.22115439, -0.0012786303, 0.06283743, -0.20371008)
                    + f1.r * float4x4(-0.0038407468, -0.10365188, -0.05307126, 0.41235232, 0.075149745, 0.11300151, 0.28411144, -0.016271306, 0.046786755, 0.22067362, -0.03242081, -0.08754692, 0.064848125, -0.0072088726, -0.19446154, -0.14612326)
                    + f1.g * float4x4(-0.016672138, -0.09636869, 0.017877482, 0.27703065, 0.034981158, 0.07232117, 0.15785615, -0.0064632273, 0.07239277, 0.06916341, 0.03404937, -0.023417776, -0.23729226, -0.009812179, -0.11160866, -0.03576246)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.049584363, 0.08421606, -0.1575561, -0.22302078, -0.17085756, 0.10455478, -0.48142666, -0.1016582, 0.12378479, 0.23112965, 0.24157809, -0.05116656, 0.12731451, -0.031667065, 0.020848522, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.42294767, -0.6094096, 1.3667728, 1.074533, 0.7399121, 1.4579015, 0.41609097, 0.15986659, 1.0118266, -0.0055305064, -0.002476584, 0.29965812, 0.24431819, -0.020906823, 0.9916593, 0.048194647)
                    + f2.b * float4x4(0.11531633, -0.2201996, 0.21850196, -0.57334733, -0.0052587385, 0.18100725, -0.27669933, 0.014936008, 0.34121782, -0.201437, -0.24516326, -0.016390197, -0.08753541, 0.019360108, 0.1867391, -0.22740847)
                    + f2.a * float4x4(0.10551265, 1.054708, 0.2517144, 0.39803526, 1.857226, -1.0356996, 0.88906634, -0.050832793, 0.24556668, -0.06934887, -0.099146314, -0.5990674, -0.13082507, -0.004898734, -0.6359446, 0.1807352)
                    + f3.r * float4x4(-0.12557127, 0.3181512, 0.41163033, 0.19540977, 0.4416188, -0.118079826, 0.27532166, 0.16497219, -0.018975206, -0.15083763, -0.17765209, 0.08125781, 0.1530523, 0.016007092, -0.31785122, 0.010045081)
                    + f3.g * float4x4(0.22771549, 0.3019443, 0.20291558, 0.05319543, 0.34772882, -0.2748834, 0.29651496, -0.09130336, 0.021536354, -0.1676237, 0.03789705, 0.099073686, 0.055818647, 0.08957863, 0.096529, 0.032057106)
                    + f3.b * float4x4(0.25581357, 0.03087339, 0.4674071, -0.076881334, 0.39205244, -0.01599554, 0.25979778, -0.043883722, -0.120287865, -0.08633709, -0.06629087, -0.007986935, 0.05545649, -0.18344666, -0.1748979, 0.13958019)
                    + f3.a * float4x4(0.040826794, 0.057696503, 0.10214013, 0.028423412, 0.32394764, -0.14350162, 0.44170186, 0.038197342, -0.039913233, 0.055095434, -0.1591133, 0.08294316, 0.020694554, -0.16479105, -0.24785554, -0.0826188);
                
                intermediate_one_4 +=
                    f0.r * float4(0.6098859, -0.04824978, 0.03698927, 0.00763795)
                    + f0.g * float4(-0.13477588, -0.109698534, -0.09569588, 0.17725365)
                    + f0.b * float4(-1.4868785, -0.092971265, -0.0845595, 1.3797492)
                    + f0.a * float4(0.1102863, 0.154459, 0.064301014, 0.0027949298)
                    + f1.r * float4(0.14803654, -0.0751974, -0.066839516, -0.016494099)
                    + f1.g * float4(0.11324958, 0.08088711, 0.07516375, -0.001684501)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(0.04394077, -0.0305309, 0.051655352, -0.39136204)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.5016839, -0.17695737, -0.21805188, -0.0037494611)
                    + f2.b * float4(-0.009869208, -0.0939486, 0.12339538, 0.010229875)
                    + f2.a * float4(0.3071414, 0.1198003, -0.21833882, -0.00807322)
                    + f3.r * float4(-0.10340764, -0.042660743, 0.028912425, 0.22674273)
                    + f3.g * float4(-0.33834088, 0.051097125, -0.22173482, 0.3495084)
                    + f3.b * float4(-0.327392, -0.129855, -0.17914948, -0.059952833)
                    + f3.a * float4(0.043735083, -0.18271965, -0.20150936, 0.06504295);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.07283887, 0.57383376, 0.049084224, -0.22992904, -0.89839333, -0.2531538, -0.19493788, 0.5293348, -0.3881888, 0.13723521, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.21209823, -0.12056077, 0.0064093187, 0.43292853, -0.039617516, 0.03594131, -0.021288155, 0.2769854, 0.08393633, -0.19851896, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.13106623, 0.8517914, -0.26580414, 0.12725249, -0.512535, 0.015844997, -0.029975826, -0.5127345, 0.13075618, -0.18250704, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.105868414, -0.32576135, -0.01998641, -0.05868177, 0.56228626, -8.772213e-05, -0.08600185, 0.23359257, -0.057791907, -0.106329046, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.10901187, -0.103921294, -0.28354442, 0.24458815, 0.024581244, -0.03996378, -0.0696703, 0.14941438, -0.08859731, 0.06361869, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.07956197, -0.6912628, 0.09317439, -0.18177426, 1.3048484, -0.029961938, 0.09229661, 0.65399057, -0.14691296, 0.10613171, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.061188463, 0.19384228, -0.15521409, 0.062289674, -0.7757416, -0.14103161, -0.015035055, -0.1522862, 0.035035606, -0.20276, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.061428208, -0.11219244, -0.087482944, -0.052818052, 0.46394306, -0.10634098, -0.12007246, 0.15317683, -0.030692047, 0.1374885, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.02411081, 0.2536768, -0.09332079, 0.08523585, 0.06936244, -0.07249894, 0.10451114, 0.3094843, 0.19837184, -0.18683705, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.20539518, -0.34519786, -0.27347136, 0.05770153, 0.0805306, 0.12602781, -0.045771696, 0.2453378, -0.088519186, -0.16016315, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14266434, -0.17815147, 0.09200956, -0.08733626, -0.20882714, -0.2009026, -0.06685444, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.04061349, 0.25089073, -0.30321607, 0.25685033, -0.19962162, 0.09651387, -0.1989545, -0.0324632, 0.100139715, -0.07607908, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.20229803, -0.20667957, -0.01367757, 0.21487616, -0.22358043, -0.16567852, 0.13946825, 0.20857318, -0.1646878, 0.13990209, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.337033, -0.054464698, 0.39125004, -0.70554006, 0.14641045, -0.2168508, -0.33003053, 0.76289356, -0.0678374, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.04581824, 0.2656434, 0.090217784, -0.09331109, 0.89709795, -0.10464932, 0.03198902, -0.24115643, -0.014609083, -0.117169395, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.039053798, 0.10162291, 0.1550682, -0.04424804, 0.15791619, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.040218156, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.19910598, -0.39481223, -0.2801695, -0.37373295, -0.055358063, -0.22537299, 0.170573, 0.08245522, 0.0068919216, -0.072256915, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.05905726, -0.40579373, 0.044270776, 0.10489922, -0.5385638, 0.06625612, 0.21601556, -0.2257018, 0.7107521, -0.22775811, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.31652346, 0.0876138, -0.11301568
                );
                result +=
                    intermediate_two[0][0] * float3(-0.07436763, 0.21142067, 0.19942558)
                    + intermediate_two[0][1] * float3(0.18341415, 0.18191713, 0.18449289)
                    + intermediate_two[0][2] * float3(-0.23803045, 0.23457733, -0.17564331)
                    + intermediate_two[0][3] * float3(-0.2127517, 0.06878799, -0.13052098)
                    + intermediate_two[1][0] * float3(0.4576126, 0.45457947, 0.45448038)
                    + intermediate_two[1][1] * float3(-0.16997501, 0.091369405, -0.074487925)
                    + intermediate_two[1][2] * float3(0.25430894, 0.25232318, 0.26880404)
                    + intermediate_two[1][3] * float3(0.14982554, 0.2625927, 0.30787387)
                    + intermediate_two[2][0] * float3(-0.5622603, -0.43360958, -0.0021450345)
                    + intermediate_two[2][1] * float3(0.081841245, 0.1671354, -0.026935533);

                return result;
            }
            half3 EvaluateNetwork_Top_RD_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.07620511, 0.26132435, -0.14100306, 0.11850983, 0.0538295, -0.04291556, -0.12825365, -0.21467447, 0.15818094, 0.16810116, -0.09989259, 0.36572486, -0.08234134, -0.044364747, 0.1851366, 0.18849826
                );

                float4 intermediate_one_4 = float4
                (
                    -0.27133656, -0.22854611, -0.1972804, 0.038572684
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.30288035, 0.4045001, 0.2132216, 1.0049005, -0.7993933, 0.3969698, 0.16355734, 0.09701236, 0.22917055, -0.23790956, 0.17238533, 0.8367243, 0.6832555, 0.34467497, 1.0210326, -0.26146474)
                    + f0.g * float4x4(0.19514751, 0.5069389, 0.13096797, -0.10377918, 0.07339005, 0.13834661, 0.25828266, -0.08229371, 0.22909285, 0.03147483, 0.23774609, 0.18535018, -0.03488599, 0.010568044, 0.049660478, -0.07404506)
                    + f0.b * float4x4(-0.39709806, 0.7231872, -0.97503304, -0.25573146, 0.43035933, -0.55923486, 1.0383689, -0.82054067, 0.04786225, 0.010823727, -0.16962764, 0.5047636, 0.5294315, -0.65908927, 0.8635232, 1.0540625)
                    + f0.a * float4x4(-0.12243617, -0.0035693746, -0.014291844, 0.23312376, 0.025269484, -0.00073859625, 0.0392803, -0.012946207, 0.06267692, -0.06371075, -0.18164024, 0.042441156, 0.001757551, 0.118879125, 0.03153855, 0.007572315)
                    + f1.r * float4x4(0.3146617, 0.1150069, 0.114486285, -0.33912086, 0.03317367, 0.03646425, -0.10787836, 0.011295015, -0.22926238, 0.22067362, -0.036552906, 0.117442876, 0.20056076, -0.22611055, 0.16570483, -0.14312185)
                    + f1.g * float4x4(0.25084844, 0.074768715, 0.10089966, -0.23722747, 0.0055890726, 0.019337475, -0.08466102, 0.05564726, -0.14317736, 0.06916341, 0.030141562, 0.03443192, 0.105597295, -0.14360535, 0.14346494, -0.103584886)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(0.019087752, -0.015554707, 0.16729002, -0.14053127, 0.051592514, -0.04133093, -0.27182588, -0.026617259, 0.24179046, 0.23112965, 0.23726994, -0.308583, 0.010885999, -0.0923746, -0.1904364, -0.08916066)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.1741794, -1.4266168, -0.29025996, 0.09773449, -1.4283375, -2.2396636, 0.12628655, 0.3656099, -0.08180111, -0.0055305064, -0.006770164, -1.4567667, 1.3845878, -0.09545521, 1.5971177, -0.056320004)
                    + f2.b * float4x4(0.3187466, -0.09883915, 0.21658328, -0.06198057, 0.57694614, 0.08983269, -0.012022567, -0.6108044, 0.21041997, -0.201437, -0.24087828, 0.062120363, 1.7340106, -0.040858813, 0.11604752, -0.061591934)
                    + f2.a * float4x4(-0.68303543, 0.740009, -0.27882174, -0.02610407, 0.8213277, -0.38961458, -0.13948938, -0.82294023, 0.2108711, -0.06934887, -0.1034396, 0.6155936, 0.21422042, 0.19958735, 0.7477462, -0.11236961)
                    + f3.r * float4x4(-0.19425032, 0.4179329, 0.08681538, 0.11295014, 0.21916263, 0.027782002, 0.06574047, 0.08994048, -0.13696459, -0.15083763, -0.17335445, 0.33862722, 0.26947498, 0.07671473, -0.1065901, 0.13865115)
                    + f3.g * float4x4(0.15903826, 0.40172777, -0.121908434, -0.029262435, 0.12527932, -0.12902384, 0.086933106, -0.16633075, -0.09644944, -0.1676237, 0.042194664, 0.35644016, 0.17222172, 0.15028833, 0.30779198, 0.16066408)
                    + f3.b * float4x4(0.18712051, 0.13064614, 0.14259146, -0.15934916, 0.16959883, 0.12986869, 0.05021171, -0.11891593, -0.23828003, -0.08633709, -0.06199324, 0.24938102, 0.17185938, -0.12274288, 0.03636708, 0.26818112)
                    + f3.a * float4x4(-0.02784594, 0.1574707, -0.22270995, -0.05406045, 0.10150293, 0.0023850268, 0.23209521, -0.03683861, -0.15792249, 0.055095434, -0.15480515, 0.3403556, 0.13712709, -0.1040902, -0.03658006, 0.0459979);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.18884677, -0.04824978, 0.03698927, 0.10950071)
                    + f0.g * float4(0.026913192, -0.109698534, -0.09569588, -0.08902566)
                    + f0.b * float4(-0.62305665, -0.092971265, -0.0845595, -0.7115959)
                    + f0.a * float4(-0.03456061, 0.154459, 0.064301014, -0.00030502296)
                    + f1.r * float4(0.07119647, -0.0751974, -0.066839516, 0.010068621)
                    + f1.g * float4(0.06389281, 0.08088711, 0.07516375, -0.024992)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.117754124, -0.0305309, 0.051655352, -0.1250921)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.5861041, -0.17695737, -0.21805188, 0.7305362)
                    + f2.b * float4(1.1242998, -0.0939486, 0.12339538, 0.18313995)
                    + f2.a * float4(-0.07143637, 0.1198003, -0.21833882, 0.29966426)
                    + f3.r * float4(0.058242843, -0.042660743, 0.028912425, -0.039514765)
                    + f3.g * float4(-0.17667916, 0.051097125, -0.22173482, 0.083254755)
                    + f3.b * float4(-0.16572599, -0.129855, -0.17914948, -0.3262247)
                    + f3.a * float4(0.20541094, -0.18271965, -0.20150936, -0.20123078);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.41521642, 0.05303376, 0.3533034, -0.060480524, 0.16968611, -0.22089535, -0.24646933, -0.14030056, -0.16790694, 0.31721652, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.51629627, -0.23476344, -0.03860345, 0.18277533, -0.0443698, 0.07144699, -0.075530484, 0.022689179, 0.019910278, 0.24688643, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.77136576, -0.18584675, -0.13032496, 0.06588931, -0.6964332, 0.011109402, -0.025888296, -0.24400192, -0.021707201, -0.13958713, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.6344477, -0.11526841, 0.16245183, -0.061865665, -0.052201487, 0.0326562, -0.10374608, -0.012900767, -0.19742909, -0.21177351, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19663037, -0.12486355, -0.24139772, -0.0003867287, 0.03742525, -0.037494726, -0.08207734, 0.12929557, -0.01870315, 0.2680071, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.6736711, 0.030660229, 0.04281846, -0.12938723, 0.28177005, -0.029961938, 0.066221245, -0.12319284, -0.114772186, 0.023797873, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.60057837, 0.05565098, 0.2299121, -0.16162361, 0.43965042, -0.10536836, -0.014917405, -0.074076064, 0.05534401, -0.05627446, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.4405714, -0.102823146, 0.2536033, 0.24856406, -0.11559533, -0.08304594, -0.15211418, 0.2466279, -0.21150146, -0.07937285, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.9225517, 0.1039214, 0.19327073, -0.17628351, 0.06551892, -0.03610889, 0.052541964, -0.10903847, 0.12262162, -0.3366541, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.2041685, -0.101796575, -0.16151299, 0.10575145, -0.0856378, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.14413206, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.5005252, -0.018284373, 0.3243236, -0.2557261, 0.733475, 0.13224205, -0.21598943, -0.56457263, -0.08787716, -0.15818076, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.25419092, -0.25874707, -0.22030787, 0.30189052, 0.025288193, -0.16567852, 0.08994018, 0.57851386, -0.16244423, 0.49598277, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.15720277, -0.09737031, 0.3021832, 0.20349714, -0.15365766, 0.18011771, -0.26589775, -0.030112524, 0.119363576, -0.15688835, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.61784244, 0.026752874, 0.43068713, -0.43608457, -0.30729306, -0.06343858, 0.020331452, -0.81883305, -0.13864169, -0.54344153, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.15203911, 0.052840583, -0.071260415, -0.0827175, -0.15192898, -0.17813031, -0.025837615, -0.06317742, -0.15215503, -0.27549064, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.64746803, -0.0209285, -0.2961122, 0.14873219, -0.12929182, -0.1887526, 0.11939176, 0.33495247, 0.012471483, 0.030657154, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.7759869, -0.22422247, 0.06294661, 0.10846834, -0.08804245, 0.09832686, 0.1643338, 0.20932308, 0.11905744, -0.020342214, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.19364515, -0.023882203, 0.01680557
                );
                result +=
                    intermediate_two[0][0] * float3(0.15974477, 0.16088277, 0.16819182)
                    + intermediate_two[0][1] * float3(0.011285591, -0.20714997, 0.0895281)
                    + intermediate_two[0][2] * float3(-0.22218671, 0.10718179, -0.015871955)
                    + intermediate_two[0][3] * float3(-0.0840888, 0.08885068, 0.22166273)
                    + intermediate_two[1][0] * float3(-0.023704452, -0.113023065, -0.012878015)
                    + intermediate_two[1][1] * float3(-0.1791278, 0.09463455, -0.07038232)
                    + intermediate_two[1][2] * float3(0.25801963, 0.174534, 0.21415907)
                    + intermediate_two[1][3] * float3(-0.1743415, -0.20484948, -0.17802209)
                    + intermediate_two[2][0] * float3(-0.068635, -0.17869051, 0.07802636)
                    + intermediate_two[2][1] * float3(0.13330895, 0.25794432, 0.050607797);

                return result;
            }
            half3 EvaluateNetwork_Top_RD_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.29249078, 0.07584159, 0.08920618, 0.40315023, 0.03744023, 0.033662394, -0.043662686, -0.12142338, 0.17722337, 0.16810116, -0.15705816, 0.1091397, -0.011269376, -0.14379635, 0.09172872, 0.13596754
                );

                float4 intermediate_one_4 = float4
                (
                    -0.110346116, -0.22854611, -0.1972804, 0.12375906
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.34134024, 0.4146409, -1.0111791, -0.28611907, -0.32882932, 0.251883, -0.4563524, 0.5227408, 0.51563805, -0.23790956, 0.22405197, -0.3470753, -0.37836206, 0.92977434, 0.56186235, -1.4925826)
                    + f0.g * float4x4(0.4114296, 0.3214517, 0.36118615, 0.1808553, 0.0570031, 0.21493267, 0.34288087, 0.010950558, 0.24812417, 0.03147483, 0.18058571, -0.07121984, 0.03619691, -0.08886409, -0.043742925, -0.12656857)
                    + f0.b * float4x4(1.1646932, 0.88132465, -0.3771177, 1.3546911, 1.2099686, 0.510536, 0.35887307, 0.21227197, -0.04198827, 0.010823727, -1.3911486, 0.6575265, 0.880033, 0.3916477, 1.1075951, 0.55871093)
                    + f0.a * float4x4(0.18628892, -0.00067037344, 0.14785145, -0.029016366, -0.025837548, 0.006851863, 0.026632216, 0.006830376, 0.02075832, -0.06371075, -0.008671562, -0.053363588, -0.23730624, 0.06704726, -0.003274788, 0.03995527)
                    + f1.r * float4x4(0.24562727, -0.008090939, 0.26121423, -0.082617335, -0.06733573, 0.070508316, 0.53016347, 0.089153334, 0.05072786, 0.22067362, 0.062407885, -0.09077222, -0.5133753, 0.12585764, 0.03543145, -0.10044449)
                    + f1.g * float4x4(0.13502553, -0.013184427, 0.14853328, -0.043260276, -0.043537997, 0.020615442, 0.32584947, 0.07753875, 0.025654461, 0.06916341, 0.032351106, -0.08296837, -0.30560997, 0.056902654, 0.02760373, -0.1459085)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.19719797, 0.16992004, -0.0629241, -0.42517436, 0.06797315, -0.11790671, -0.3564228, -0.11986737, 0.22274798, 0.23112965, 0.29442644, -0.052003607, -0.060198553, 0.0070604268, -0.09702749, -0.03664142)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.2540864, -0.39440158, -0.28763282, -0.058166016, -0.5051457, -0.7765758, -0.041341122, 0.6642921, 0.71525496, -0.0055305064, -0.22257754, 1.2880341, -0.4303726, 1.2167287, 0.8293727, 1.2623221)
                    + f2.b * float4x4(0.3440207, -1.5179675, 0.4002267, 0.14446127, -0.2611141, 0.21167538, 0.1086235, 0.020094668, 0.7893217, -0.201437, 0.2850501, -1.5310079, -0.51072836, 0.32167026, 0.20122938, -0.13779321)
                    + f2.a * float4x4(-0.46863243, -1.1227424, 0.28354108, 0.91570085, -1.7059917, -0.49757454, -0.10093867, 0.35081512, 1.0220996, -0.06934887, -0.5915336, -0.55659926, -0.71822906, 0.24387395, -1.1007719, 0.75914353)
                    + f3.r * float4x4(0.022029731, 0.23245524, 0.31702617, 0.39756688, 0.20279486, 0.10436292, 0.15032466, 0.18317486, -0.11792967, -0.15083763, -0.23052123, 0.082093105, 0.34056312, -0.022720244, -0.19999422, 0.086130224)
                    + f3.g * float4x4(0.37531775, 0.21625215, 0.10829949, 0.25536713, 0.10890924, -0.052449778, 0.17151754, -0.07310222, -0.07741902, -0.1676237, -0.014974852, 0.0999143, 0.24331763, 0.05085553, 0.2143888, 0.10814329)
                    + f3.b * float4x4(0.40340373, -0.054826345, 0.37279522, 0.12527627, 0.15323801, 0.20643511, 0.13479564, -0.025681483, -0.21924217, -0.08633709, -0.11916871, -0.007149977, 0.24295545, -0.22217686, -0.05701994, 0.21566744)
                    + f3.a * float4x4(0.18844254, -0.028011166, 0.007508586, 0.23057903, 0.08512314, 0.07896191, 0.31668422, 0.056408092, -0.13888912, 0.055095434, -0.21197234, 0.08377428, 0.20819703, -0.20352252, -0.12997222, -0.006522188);
                
                intermediate_one_4 +=
                    f0.r * float4(-1.0330065, -0.04824978, 0.03698927, 1.1962575)
                    + f0.g * float4(0.18791807, -0.109698534, -0.09569588, -0.003840667)
                    + f0.b * float4(-0.11109515, -0.092971265, -0.0845595, 0.93819827)
                    + f0.a * float4(-0.09975768, 0.154459, 0.064301014, -0.07120012)
                    + f1.r * float4(-0.13441882, -0.0751974, -0.066839516, -0.13957782)
                    + f1.g * float4(-0.08609967, 0.08088711, 0.07516375, -0.19419457)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.27875525, -0.0305309, 0.051655352, -0.21028544)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.5630578, -0.17695737, -0.21805188, -1.059648)
                    + f2.b * float4(-0.5313027, -0.0939486, 0.12339538, 0.08815978)
                    + f2.a * float4(0.49011034, 0.1198003, -0.21833882, 0.84152067)
                    + f3.r * float4(0.21924062, -0.042660743, 0.028912425, 0.045661446)
                    + f3.g * float4(-0.015689176, 0.051097125, -0.22173482, 0.16842058)
                    + f3.b * float4(-0.004736386, -0.129855, -0.17914948, -0.24104449)
                    + f3.a * float4(0.36641946, -0.18271965, -0.20150936, -0.11604974);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.47047535, 0.38726008, -0.21601984, 0.40899968, 0.6305995, -0.20783041, -0.2107037, -0.42784244, -0.15642188, 0.22013937, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.10394474, -0.8181722, 0.46466812, 0.45461154, -0.10837782, 0.081158556, -0.03707152, 0.6875574, 0.0363354, 0.4306223, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.24556679, 0.070340864, -1.5536336, 0.17985454, -0.69521904, 0.015844997, -0.044609938, 0.098172344, 0.005465195, -1.0295215, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.20472707, 0.535745, -0.5153389, -0.09431306, -0.4991368, 0.043462195, -0.10162039, 0.005997245, -0.18889895, -0.50548357, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.121357106, 0.5567759, -0.5883463, -0.6013088, 0.69371134, -0.025919449, -0.08535735, -0.86705273, 0.0071487655, 0.2247346, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.66381073, 0.8772948, -0.22122137, -1.1232672, -0.1008762, -0.029961938, 0.07651532, -0.9305771, -0.10664343, -0.70380473, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.022481563, -0.23505716, 0.118944764, 0.21854937, 0.6288358, -0.09559036, -0.030623501, 0.015231128, 0.065220006, -0.36912432, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.023497693, -0.37171245, -0.06636357, 0.174176, 0.36529508, -0.08304594, -0.13568616, 0.28678057, -0.18894218, 0.64947087, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.013634262, -0.034176145, 0.11485099, 0.18425469, -0.41901472, -0.026562018, 0.08878542, 0.21083532, 0.1317813, 0.08325312, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.07725255, -0.25419918, -0.23677115, 0.26435253, -0.8746032, 0.17129257, -0.045771696, 0.2548962, 0.011746654, -0.2278287, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.30926433, 0.5232128, -0.40643483, -0.45724547, -0.66589874, -0.20882714, -0.21585433, -0.26020825, -0.067175455, -1.1908756, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.46344593, 0.13613214, -1.6201775, -0.43879822, -0.5196293, 0.14260566, -0.1989545, -0.23276179, -0.06668443, -0.44351345, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.077767335, -0.42215574, -0.21809378, 0.39281633, -0.24102753, -0.16567852, 0.123707965, 0.83016866, -0.17101589, 0.10232832, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.4855146, -0.36798897, 0.30067858, 0.5216115, 0.900327, 0.19257544, -0.2168508, -0.013525225, 0.10715296, 0.7086051, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.37017843, 0.22018683, 0.76706785, 0.25047767, -0.47640377, -0.060472723, 0.016296906, -0.08409875, -0.14568403, -0.034568153, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.16343887, 0.18723021, 0.07151057, 0.11315353, -0.10353749, -0.17813031, 0.0015196458, 0.10068569, -0.13943538, -0.61031413, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.034798764, -0.2534038, 0.7031001, 0.17746174, -0.36034817, -0.18170677, 0.1551197, 0.09365437, 0.030216863, -0.22111185, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.17879519, 0.36858204, 0.00074298884, -0.21931738, -0.8848811, 0.10850722, 0.21601556, -0.25697258, 0.13477495, -0.94143057, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.460009, -0.23382583, 0.38266858
                );
                result +=
                    intermediate_two[0][0] * float3(-0.2433641, 0.3097198, -0.20347181)
                    + intermediate_two[0][1] * float3(-0.22158842, -0.057975724, -0.19165683)
                    + intermediate_two[0][2] * float3(-0.0054754606, 0.27952585, -0.012948082)
                    + intermediate_two[0][3] * float3(-0.31820866, 0.4298852, -0.25691268)
                    + intermediate_two[1][0] * float3(0.128076, 0.13737406, 0.1237193)
                    + intermediate_two[1][1] * float3(-0.1785503, 0.096145086, -0.070472136)
                    + intermediate_two[1][2] * float3(0.25393587, 0.25197875, 0.26841015)
                    + intermediate_two[1][3] * float3(0.019807424, -0.23011206, -0.009490486)
                    + intermediate_two[2][0] * float3(-0.10708694, -0.20482546, 0.057043504)
                    + intermediate_two[2][1] * float3(0.16138189, 0.13667928, 0.15239282);

                return result;
            }
            half3 EvaluateNetwork_Top_RT_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.23345403, 0.2898448, -0.13664779, 0.16060387, -0.019904518, 0.11221902, -0.01394415, -0.11784461, 0.3587213, 0.16810116, -0.09989259, 0.33858934, -0.20821679, 0.11516485, 0.3527529, 0.053159777
                );

                float4 intermediate_one_4 = float4
                (
                    -0.23497126, -0.22854611, -0.1972804, 0.28325495
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.0036718375, 0.7259154, 0.1395655, 1.4604629, -0.8364583, -0.6783656, 0.76915413, 0.52918565, 2.5983844, -0.23790956, 0.17238533, 1.1269766, 0.008403429, 0.5359229, 1.1395787, -0.16919647)
                    + f0.g * float4x4(0.35239503, 0.53546447, 0.13532305, -0.06168426, -0.00034520478, 0.2934865, 0.3725916, 0.0145363, 0.42963144, 0.03147483, 0.23774609, 0.15821889, -0.16075078, 0.17009196, 0.21728379, -0.20937817)
                    + f0.b * float4x4(1.3808541, 3.344549, -1.0235294, 0.30956125, 0.6677216, 0.795666, 0.8999928, -0.8071648, -0.6360289, 0.010823727, -0.16962764, 1.3871471, -1.3298631, 0.3984434, 1.457606, -0.12022745)
                    + f0.a * float4x4(0.0030037456, -0.013493961, -0.012330525, 0.12624712, -0.07113313, -0.023011006, 0.025236264, -0.047823355, -0.019175751, -0.06371075, -0.18164024, 0.030113613, 0.0059449235, 0.028192999, 0.024032498, -0.20296265)
                    + f1.r * float4x4(-0.024001852, 0.2047231, 0.10232826, 0.0547654, 0.06665234, 0.11581194, 0.102213934, 0.24694836, 0.16760427, 0.22067362, -0.036552906, 0.06833232, -0.011627308, 0.0060267528, 0.011630498, -0.13926274)
                    + f1.g * float4x4(-0.013075312, 0.20707153, 0.075273536, -0.0045447955, 0.027939783, 0.10908021, 0.053489935, 0.21140999, 0.09039979, 0.06916341, 0.030141562, 0.030387735, -0.010924665, 0.0012332048, -0.016469492, -0.029598739)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.13816611, -0.044073153, 0.16293107, -0.18262793, 0.12532672, -0.19646327, -0.38612685, -0.12344578, 0.041233383, 0.23112965, 0.23726994, -0.28143933, 0.1367524, -0.25188866, -0.35805, 0.046167996)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.006174963, -1.4011707, -0.12686811, 0.8490104, 0.567531, -2.893827, -0.6502576, -0.5774209, -2.2397294, -0.0055305064, -0.006770164, -1.0376191, 0.11391646, -0.39681178, -1.1558645, 0.04148438)
                    + f2.b * float4x4(-0.0028424615, 0.29894108, 0.026274208, -0.12828058, -0.11116049, 0.1687768, -0.014107622, 0.20260195, -0.43855935, -0.201437, -0.24087828, 0.13257411, -0.0055003413, -0.12828039, 0.28237066, -0.23411885)
                    + f2.a * float4x4(-0.016241519, 1.4189974, 0.32124546, 0.20620143, 0.03433993, 0.76665163, 0.729818, -0.3998702, -0.8591064, -0.06934887, -0.1034396, 1.2700696, -0.014632053, 0.314347, 2.0534313, 0.18746237)
                    + f3.r * float4x4(-0.036993653, 0.44643623, 0.09117663, 0.15503523, 0.14547418, 0.18291163, 0.18001989, 0.18674429, 0.06357733, -0.15083763, -0.17335445, 0.3115046, 0.14361796, 0.23624128, 0.061028227, 0.00333431)
                    + f3.g * float4x4(0.31629443, 0.43023452, -0.11754468, 0.012820803, 0.05159196, 0.026093379, 0.20121585, -0.06951338, 0.104092024, -0.1676237, 0.042194664, 0.32932228, 0.046376437, 0.30980265, 0.47540388, 0.025346348)
                    + f3.b * float4x4(0.3443856, 0.15916896, 0.1469526, -0.117264375, 0.09591506, 0.28499198, 0.16449115, -0.022097262, -0.037735842, -0.08633709, -0.06199324, 0.22226375, 0.046014458, 0.036777496, 0.20400281, 0.1328695)
                    + f3.a * float4x4(0.12940668, 0.18598638, -0.21835452, -0.011964888, 0.027773399, 0.15751658, 0.34640262, 0.059985276, 0.042625528, 0.055095434, -0.15480515, 0.31321856, 0.011251317, 0.055436414, 0.13104291, -0.0893298);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.3202451, -0.04824978, 0.03698927, 0.40481785)
                    + f0.g * float4(0.06329015, -0.109698534, -0.09569588, 0.15565272)
                    + f0.b * float4(-0.65424377, -0.092971265, -0.0845595, 1.888161)
                    + f0.a * float4(-0.005549003, 0.154459, 0.064301014, 0.033068825)
                    + f1.r * float4(-0.029016944, -0.0751974, -0.066839516, 0.061074685)
                    + f1.g * float4(-0.027538557, 0.08088711, 0.07516375, -0.0028218245)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.1541363, -0.0305309, 0.051655352, -0.36979485)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.41450527, -0.17695737, -0.21805188, 1.8365831)
                    + f2.b * float4(0.13245635, -0.0939486, 0.12339538, -0.11428563)
                    + f2.a * float4(0.07189771, 0.1198003, -0.21833882, 0.9491994)
                    + f3.r * float4(0.09461493, -0.042660743, 0.028912425, 0.2051459)
                    + f3.g * float4(-0.14030708, 0.051097125, -0.22173482, 0.32790232)
                    + f3.b * float4(-0.1293521, -0.129855, -0.17914948, -0.08155561)
                    + f3.a * float4(0.24182193, -0.18271965, -0.20150936, 0.043443784);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.17062613, 0.071044445, -0.3289986, 0.34917557, 0.0964794, -0.38249728, -0.25525793, -0.35982168, -0.46350694, 0.6093993, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.26534346, -0.1912787, 0.25298572, -0.06693583, 0.058597494, 0.44016254, -0.08023614, 0.7495557, -0.16755767, -0.65763205, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.13106623, -0.18344091, 3.355375, 1.7973498, 2.0847342, -1.070655, -0.029975826, -0.42683274, 0.560726, -0.16903189, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.1694352, -0.09093773, 0.34704602, 0.034433864, 0.054622196, 0.021477347, -0.101203255, 0.02595298, -0.26340127, -0.1664329, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.07506552, -0.12131735, -0.018108876, -0.02605708, -0.1302601, -0.02017254, -0.08526314, -0.044652812, 0.57350224, -0.07886445, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.14245373, 0.014081567, -0.0054323487, -0.1399275, -0.019422384, -0.22353688, 0.03166732, -0.0045932867, -2.3668115, 0.1094522, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.102471344, 0.075108655, 0.013897321, -0.04870046, 0.04799016, -0.0026432378, -0.041764468, -0.03130135, -0.8783306, 0.012483083, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.031340957, -0.10283089, 0.13240223, 0.25462532, 0.29281306, 0.290483, -0.14048885, -0.061508976, 0.24524198, -0.024117472, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.048146486, 0.10904568, -0.43192068, 0.0009770847, 0.026308762, -0.30215073, 0.08881571, 0.035079926, 0.19574156, 0.015696215, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.24205291, -0.12128224, -1.8535727, -0.027670354, -0.036154285, 0.1398253, -0.061122295, 0.008534993, 0.03719112, -0.0042697573, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.04865353, 0.011529648, -0.082325175, 0.4470967, 0.51719224, 0.27979445, -0.21443656, -0.08751727, 0.33373338, -0.03827897, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.10671269, -0.2675666, 0.078734815, 0.019920915, -0.20598339, -2.3702135, 0.07939567, 0.73823977, -0.36947092, -0.64359295, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.19199705, -0.054276016, 0.188277, 0.31329924, 0.21930785, -0.24738532, -0.26592243, -0.01588245, 0.48769885, 0.017937606, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.04581824, 0.030216705, 0.28629857, 1.1357487, 1.3010947, -0.22458592, 0.03198902, -0.22889459, 1.0429082, -0.15519744, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.039053798, 0.09582978, 0.14775243, -0.03797675, 0.16320981, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.037233178, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.103106685, -0.0048112157, 0.15328185, -0.2599138, 0.29093808, 0.11452957, 0.112631604, 0.10347505, 0.71270114, 0.08839317, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.01428868, -0.20381595, 0.036578473, 0.0262748, -0.06537315, 0.1671805, 0.15852544, -0.0019739945, -2.6275892, 0.012258082, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.40427685, 0.41745704, 0.1292031
                );
                result +=
                    intermediate_two[0][0] * float3(0.033356674, 0.20629041, 0.1320066)
                    + intermediate_two[0][1] * float3(0.08371514, -0.17378299, 0.0058439653)
                    + intermediate_two[0][2] * float3(-0.2147493, -0.21287686, -0.21187547)
                    + intermediate_two[0][3] * float3(-0.049109653, 0.22129077, 0.12504005)
                    + intermediate_two[1][0] * float3(0.18204659, -0.059704546, 0.11272714)
                    + intermediate_two[1][1] * float3(-0.11981952, -0.12693354, -0.11626503)
                    + intermediate_two[1][2] * float3(0.25101733, 0.2422259, 0.26753956)
                    + intermediate_two[1][3] * float3(-0.70000476, -0.7487629, -0.2719892)
                    + intermediate_two[2][0] * float3(-0.1611251, -0.15208636, -0.16469672)
                    + intermediate_two[2][1] * float3(0.66863, -0.02336673, -0.08003767);

                return result;
            }
            half3 EvaluateNetwork_Top_RT_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.3575804, -0.098923445, 0.0, 0.0, 0.0034353603, 0.0, -0.057959728, 0.025320947, 0.0, 0.0, 0.19897485, -0.25228494, -0.050408117, -0.0390451, -0.046203498, -0.19664134
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, 0.0, 0.24898565, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.75750023, 0.16385987, -0.46348134, 0.1881425, 0.60959744, -0.5138307, 0.11267866, 1.5789487, -0.9045647, 0.13725406, -0.9393375, 1.3881207, -0.02246773, -0.60179096, 0.03665711, 0.8811833)
                    + f0.g * float4x4(0.3453524, -0.3129545, 0.22649929, -0.79574597, -0.31739685, -0.061149582, 0.15406257, 0.34500912, 0.07720297, -0.15605927, 0.5701075, -0.036040474, 0.81898314, 0.078634, -0.24200219, -0.23114748)
                    + f0.b * float4x4(-1.3588994, -1.6819342, 0.17284235, 0.5521824, 1.2432847, -0.06371774, 0.18303703, 0.37064102, 0.5911784, 0.3595963, 0.06090754, 0.14981972, 1.3054909, 1.0580884, -0.44597661, -1.1863288)
                    + f0.a * float4x4(-0.018570488, 0.048440848, 0.527816, 0.21210915, 0.00388544, 0.4714436, -0.3646324, -0.019134838, -0.10612589, -0.37735936, -0.009226213, 0.12071438, -0.013235882, -0.023475122, -0.710026, 0.011909098)
                    + f1.r * float4x4(-0.010492645, 0.0632417, 0.14032899, -0.009128058, 0.05254126, -0.44881627, -0.2530185, -0.0649963, 0.20689763, 0.18766409, 0.0024256816, 0.18249166, -0.08804776, -0.058498144, -0.3963302, 0.029684253)
                    + f1.g * float4x4(0.00053162617, 0.055415362, 1.3050503, 0.65755844, 0.008435648, 0.08261935, -0.006434469, -0.048941012, 0.73951864, 0.22193529, -0.015132362, 0.1250047, -0.06516517, -0.03710547, 0.17965735, 0.03515077)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(-0.23553285, 0.18089269, 0.051311567, -0.4043137, -0.05161303, 0.21027829, 0.0125186145, 0.13113406, -0.02228675, 0.77200747, -0.38397244, 0.4613357, -0.1182603, 0.3036393, 0.09841333, -0.40806618)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.5287206, -0.024604723, 0.17526214, -0.20147912, 0.6002924, -0.037164662, -0.527455, -1.6027888, -0.6318568, -0.36729887, 0.8112662, 1.0513302, 0.38813168, 0.52251494, 0.14625551, -0.8305733)
                    + f2.b * float4x4(-0.4392908, 0.30879453, -0.6516506, 0.38151968, 0.38163787, 0.08917348, -0.40518692, -0.5178733, 0.10808924, -0.22086994, -0.69432366, 0.22003491, 0.46850032, -0.49097782, -0.44240907, 0.34404594)
                    + f2.a * float4x4(0.5297982, 1.3593947, -0.29335544, -0.4939828, -0.8840635, 0.08136868, 0.34827438, 0.052535307, -0.046388548, -0.012720043, 1.1756543, 0.46508685, -0.4095353, -2.114348, 0.2750426, -1.1773882)
                    + f3.r * float4x4(0.20610186, 0.1948762, 0.40375632, 0.3899215, 0.10367533, -0.1727081, -0.007047846, 0.02230444, -0.108878605, -0.1339395, 0.16892412, -0.13916583, 0.5360439, 0.1630249, -2.5068552e-05, -0.4040388)
                    + f3.g * float4x4(0.15174985, 0.5645272, -0.13698591, 0.08633077, 0.13427003, -0.11588551, 0.46218807, -0.11733961, -0.020086177, -0.1444517, 0.4247005, -0.16809021, -0.0076849516, -0.15296404, -0.8618424, 0.4289337)
                    + f3.b * float4x4(-0.546066, -0.15540911, -0.27642944, -0.54856044, -0.29425925, -0.31305373, 0.11415338, 0.05187048, -0.78283244, -0.11068815, 0.23235144, -0.07582486, -0.14225945, 0.09581411, -0.42876688, -0.8798474)
                    + f3.a * float4x4(0.11260464, -0.5867996, -0.29607022, -0.5639299, -0.20220529, -0.19187808, -0.40661573, 0.26118034, -0.59286225, 0.12217536, 0.59726673, 0.2587411, -0.5943732, -0.19856519, 0.4227516, -0.3715232);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.39273125, -0.074677825, -0.05888661)
                    + f0.g * float4(0.06488515, -1.1157421, 0.091778666, -0.51103616)
                    + f0.b * float4(0.3008439, 0.48101074, 1.7211545, 0.013984563)
                    + f0.a * float4(-0.5425608, 0.107482396, -0.00580958, -0.7120615)
                    + f1.r * float4(-0.12611742, -0.4384489, 0.08228959, 0.4670956)
                    + f1.g * float4(0.3637557, 0.048151948, 0.047320895, -0.11180612)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -1.1354678, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 0.41496858, -0.09375067, -0.08536301)
                    + f2.b * float4(-0.05775499, -0.06740296, -0.14943334, -0.3206004)
                    + f2.a * float4(-0.1836326, 0.19279256, 1.3681493, 0.10167499)
                    + f3.r * float4(-0.29104778, -0.44784978, 0.19451067, 0.12286028)
                    + f3.g * float4(-0.06745626, 0.32418048, 0.36901206, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.2669676, -0.066080585)
                    + f3.a * float4(-0.11661739, 0.19867179, -0.076587014, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.30117607, 0.19594103, -0.061776303, -0.7905326, 0.056323014, 0.2799979, 0.6556041, 0.22002897, 0.13036357, -0.04001135, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.09971712, 0.7180135, 0.11925351, 0.04374519, -1.1805422, 0.17320277, -0.20689122, -0.26204637, -0.0060541206, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.5960247, -0.31723368, -1.0916723, 0.7176477, -2.3704123, 0.82205296, 0.4317263, 0.17583092, -0.13121621, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.23113704, 0.8030542, -0.15389192, -0.053813282, -0.6496372, 0.12414709, -0.22418816, -0.70618254, -0.13489218, 0.52327174, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.13238657, 0.54135066, -0.07134927, 0.41227207, 0.068132505, 0.31283334, -0.08170794, -0.31375238, -0.49562433, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(1.4228317, 0.04387055, 0.17014529, -0.32260096, -0.9179807, 0.7373513, -0.9009916, 1.4862553, 0.3584991, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.5285965, -0.45537087, -0.15374823, 0.34641203, -0.5887592, 0.081503876, -0.7885725, 0.70444196, 0.1328281, -0.32551453, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.44542414, -0.04328499, 0.114845105, -0.03833909, 1.1155748, -0.42101282, 0.013769094, -0.8396434, -0.13231863, 0.060059324, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.24596678, 0.30914, -0.36625034, 0.4720131, 0.13539068, 0.64610183, 0.1237802, 0.49668708, 0.09683424, -0.30262852, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.53441334, -0.05537685, 0.699105, -0.34589654, -1.0968115, -0.23793761, -1.1564374, 0.37521294, 0.146659, 0.51844466, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4747389, 0.18940839, 0.21318537, 0.25075802, 0.5536919, 0.6057605, 0.38757053, 0.36710373, 0.12431934, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.049002774, -0.3499306, -0.3328048, 0.5540276, 0.39385244, -0.054342322, -0.2859513, 0.24148814, 0.02158421, -0.5953024, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2621343, -0.17108545, 0.50701785, 0.5829826, 0.07509643, -0.23804331, -0.09071631, 0.045562245, -0.07328703, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.87636775, 0.5738811, -0.24626002, -0.15013252, 0.8680256, -0.01545078, 0.9662644, -1.0975648, -0.25953096, -0.2649781, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.2518257, 0.49465922, 0.2761485
                );
                result +=
                    intermediate_two[0][0] * float3(-0.40473345, 0.3948256, -0.28654712)
                    + intermediate_two[0][1] * float3(0.0016646492, -0.65518194, -0.0040553273)
                    + intermediate_two[0][2] * float3(-0.1566346, -0.20202248, -0.3611558)
                    + intermediate_two[0][3] * float3(-0.49248552, -0.48971868, -0.46859553)
                    + intermediate_two[1][0] * float3(-0.014024198, 0.6739894, -0.0100178765)
                    + intermediate_two[1][1] * float3(0.106065676, 0.55967516, 0.07992492)
                    + intermediate_two[1][2] * float3(0.8761283, 0.83812076, 0.8855767)
                    + intermediate_two[1][3] * float3(0.14553502, -0.7835575, 0.17994086)
                    + intermediate_two[2][0] * float3(0.23221207, 0.038139768, -0.3050506)
                    + intermediate_two[2][1] * float3(-0.09600785, -0.62470835, 0.24407008);

                return result;
            }
            half3 EvaluateNetwork_Top_CT_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.15384986, 0.07563062, -0.29903412, 0.17324238, -0.03191458, 0.16681819, 0.012293905, -0.25340533, 0.31006664, 0.16810116, -0.09989259, 0.25345707, -0.10912272, -0.10146892, 0.31419334, 0.19202974
                );

                float4 intermediate_one_4 = float4
                (
                    -0.2747683, -0.22854611, -0.1972804, -0.05437043
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.31817606, 1.4142507, -0.16557421, 0.13950218, -0.64154106, 1.043673, -0.11333729, 0.70705, 0.2948491, -0.23790956, 0.17238533, 0.4691031, -1.4641702, 0.15670478, 1.2645946, 1.6657149)
                    + f0.g * float4x4(0.27281398, 0.32123637, -0.027056003, -0.049055804, -0.012352361, 0.348065, 0.398828, -0.12102199, 0.38097897, 0.03147483, 0.23774609, 0.07310667, -0.06166296, -0.046533406, 0.17871298, -0.07051796)
                    + f0.b * float4x4(1.1437944, 1.8073013, -1.2821898, -0.054232292, 2.5012326, 0.8207299, 1.4534715, -1.2458287, -0.87243575, 0.010823727, -0.16962764, 1.0669687, -0.115837514, -0.10220888, 1.4695407, -0.4874136)
                    + f0.a * float4x4(0.0011303661, 0.032853007, 0.014032569, -0.14247218, -0.018129233, 0.06111765, -0.017340029, -0.044345096, -0.08069877, -0.06371075, -0.18164024, 0.045507602, -0.00853938, -0.22286832, 0.022443287, 0.07581706)
                    + f1.r * float4x4(-0.06221152, 0.010298635, -0.025432492, 0.42741996, 0.0823762, 0.06209126, 0.1679275, 0.1307572, 0.19502105, 0.22067362, -0.036552906, -0.06984605, 0.045231912, -0.13751543, 0.14961122, -0.20018464)
                    + f1.g * float4x4(-0.07429233, 0.013886598, -0.036836293, 0.30048966, 0.06494575, 0.025953444, 0.14549592, 0.109349124, 0.16982262, 0.06916341, 0.030141562, -0.04995407, 0.06039388, 0.18402985, 0.07589204, -0.08392687)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.0585565, 0.17014235, 0.3253069, -0.19526665, 0.13733026, -0.25106627, -0.41236383, 0.012105014, 0.089891955, 0.23112965, 0.23726994, -0.19631074, 0.03766589, -0.03526777, -0.3194929, -0.09268947)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.38019416, -0.605175, 0.06514375, -0.6984083, 2.2457988, -0.83466595, 0.18677808, -0.7139517, 0.20925485, -0.0055305064, -0.006770164, 0.29615676, 2.010233, 0.22191986, -1.1791013, 1.0109446)
                    + f2.b * float4x4(-0.03372015, 1.2185076, 0.93191826, 0.8953703, 2.153661, 0.08279324, 0.11507036, 0.39511517, -0.045583576, -0.201437, -0.24087828, -0.060167007, -0.21116409, 0.030206472, 0.6036131, -0.4374946)
                    + f2.a * float4x4(-0.3076193, 1.6272784, -0.47579178, 0.12836812, 1.4413457, 0.7962864, 1.3486215, -0.85343486, 0.5858338, -0.06934887, -0.1034396, -0.20913705, -0.23542567, 0.13345781, 1.2881811, -0.23357627)
                    + f3.r * float4x4(-0.11660725, 0.23224524, -0.07121603, 0.16767809, 0.13344565, 0.23751378, 0.20627408, 0.051192835, 0.0149217695, -0.15083763, -0.17335445, 0.22639737, 0.24269408, 0.019607693, 0.022472588, 0.14219406)
                    + f3.g * float4x4(0.23668225, 0.21604262, -0.27993637, 0.025455415, 0.039551478, 0.08068794, 0.2274676, -0.20507792, 0.05543804, -0.1676237, 0.042194664, 0.24421808, 0.1454728, 0.093182504, 0.4368401, 0.16420993)
                    + f3.b * float4x4(0.26477057, -0.05503241, -0.015440236, -0.10462334, 0.083881065, 0.3395721, 0.19074625, -0.15765643, -0.08638688, -0.08633709, -0.06199324, 0.13715799, 0.14511116, -0.1798496, 0.16543609, 0.27172792)
                    + f3.a * float4x4(0.049800336, -0.028221074, -0.38071784, 0.00066609815, 0.015763694, 0.21211824, 0.3726446, -0.0755623, -0.006029054, 0.055095434, -0.15480515, 0.22808753, 0.110350296, -0.16119322, 0.09248796, 0.049529295);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.08307066, -0.04824978, 0.03698927, 0.086075515)
                    + f0.g * float4(0.023491064, -0.109698534, -0.09569588, -0.18196759)
                    + f0.b * float4(-0.39356774, -0.092971265, -0.0845595, -1.7364409)
                    + f0.a * float4(-0.0043121907, 0.154459, 0.064301014, -0.004827808)
                    + f1.r * float4(0.111927904, -0.0751974, -0.066839516, 0.07192449)
                    + f1.g * float4(0.09061302, 0.08088711, 0.07516375, 0.059403237)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.11432834, -0.0305309, 0.051655352, -0.03215609)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.49617496, -0.17695737, -0.21805188, 0.4446874)
                    + f2.b * float4(1.3447859, -0.0939486, 0.12339538, 0.9847735)
                    + f2.a * float4(1.6578168, 0.1198003, -0.21833882, -0.8989485)
                    + f3.r * float4(0.054810256, -0.042660743, 0.028912425, -0.13247049)
                    + f3.g * float4(-0.18009967, 0.051097125, -0.22173482, -0.009701489)
                    + f3.b * float4(-0.1691456, -0.129855, -0.17914948, -0.41917825)
                    + f3.a * float4(0.20200723, -0.18271965, -0.20150936, -0.29417676);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.075219445, 0.08381849, 0.06566019, -0.19356209, 0.504878, -0.20783041, -0.28804728, -0.18769555, -0.15735441, 0.106849365, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.27452695, -0.20226277, 0.009330738, 0.25064275, -0.17577922, 0.081158556, -0.10113208, 0.47880423, 0.039174482, -0.24850267, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.52909833, -0.18574023, -1.3951619, -0.024323542, 0.4890643, 0.015844997, -0.04522521, -0.7309349, -0.0017296915, -0.17179285, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.13436608, -0.074997194, -0.44357845, 0.08568837, -1.9726596, 0.043462195, -0.16465752, 0.84021854, -0.18845432, -0.13183133, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.02330751, -0.15048565, 0.010657391, -0.47184896, 0.0069816206, -0.025919449, -0.16342029, -0.3764711, 0.001451322, -0.02032223, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(1.2706498, 0.038085517, 1.6904129, 0.11689035, 0.39783397, -0.029961938, -0.0143963015, -0.6547677, -0.11711339, 0.027908456, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.2895992, 0.06113144, -0.15694381, -0.014346428, 0.012622266, -0.09559036, -0.07855428, -0.4741404, 0.062035237, -0.25331572, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.5067483, -0.09354108, 0.44523868, -0.017364236, 0.01141124, -0.08304594, -0.20272952, -0.13155328, -0.19221696, 0.05695543, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.41585615, 0.12903933, -0.42067143, 0.044871747, -1.2538986, -0.026562018, 0.0006791685, 0.32072586, 0.12971215, -0.19722585, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.17841008, -0.153414, -0.1552401, 0.71444076, -0.1903077, 0.17129257, -0.1348662, 0.28208318, 0.0038618164, -0.22411586, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.19882043, -0.019746719, -0.21712829, 0.67851377, -0.3198692, 0.14260566, -0.27152127, 0.39242184, -0.07356768, -0.10548655, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.060509704, -0.25443336, -0.14564638, -0.11459158, -1.3950073, -0.16567852, 0.047044985, 0.18794157, -0.16472211, -0.002605244, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.40995258, -0.0049568685, -0.39119616, 0.09496788, -0.26569822, -0.060472723, 0.010341359, 0.4584439, -0.14782126, -0.11507747, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.12479484, 0.06734654, 0.01796002, -0.34839004, -0.45105347, -0.17813031, 0.008674801, -0.3570983, -0.14779161, -0.069033094, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.4820769, 0.023381893, -0.020444108, 0.07296655, 0.3571159, -0.18170677, 0.07901678, 0.7812181, 0.013371632, -0.1512204, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.7298027, -0.20959766, 0.5299382, 0.31173053, 1.4420414, 0.10850722, 0.12453945, 0.09734844, 0.13170768, -0.29411554, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.21886836, 0.021714283, 0.024112841
                );
                result +=
                    intermediate_two[0][0] * float3(0.4104913, 0.39125887, 0.36752307)
                    + intermediate_two[0][1] * float3(0.03159197, -0.20004752, 0.102476746)
                    + intermediate_two[0][2] * float3(-0.41489902, -0.42850474, -0.40017104)
                    + intermediate_two[0][3] * float3(-0.16436088, 0.19946904, 0.13314588)
                    + intermediate_two[1][0] * float3(0.8135821, 0.79499507, 0.86606765)
                    + intermediate_two[1][1] * float3(-0.1785503, 0.096145086, -0.070472136)
                    + intermediate_two[1][2] * float3(0.21155867, 0.17032184, 0.1832225)
                    + intermediate_two[1][3] * float3(-0.27432063, -0.30075577, -0.27391806)
                    + intermediate_two[2][0] * float3(-0.06465391, -0.18391572, 0.06535836)
                    + intermediate_two[2][1] * float3(0.07331663, 0.11811842, -0.12117167);

                return result;
            }
            half3 EvaluateNetwork_Top_CT_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.13259815, -0.046729155, -0.04834624, 0.097941205, 0.030010538, -0.014863767, -0.34425676, -0.0114161465, 0.36799845, 0.16810116, -0.2711825, 0.37209404, -0.4334164, 0.0003829851, 0.07335688, 0.051063877
                );

                float4 intermediate_one_4 = float4
                (
                    -0.3692291, -0.22854611, -0.1972804, 0.1069565
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.7841268, -1.355311, -0.2360213, 0.87864524, -1.6578943, 0.66543525, -0.73275316, -0.2879993, 0.1598115, -0.23790956, 1.4166255, 0.9715636, 1.9963032, 0.21143892, 1.6016854, -0.17789212)
                    + f0.g * float4x4(0.25154275, 0.1988814, 0.22362095, -0.12435872, 0.049571514, 0.16639785, 0.04227245, 0.12096535, 0.43891335, 0.03147483, 0.06645034, 0.19175254, -0.3859498, 0.05531745, -0.06211129, -0.21147412)
                    + f0.b * float4x4(0.9915642, 0.20829424, 1.6933544, -0.8917576, 1.7082973, 0.61066467, -1.8416765, -0.9032814, 2.0869832, 0.010823727, -1.0322273, 1.6199865, 0.4701025, -1.5038347, 0.6260911, -0.11810311)
                    + f0.a * float4x4(0.07138917, 0.0038398544, 0.010573629, 0.006647719, -0.00938959, -0.013000108, 0.00032278773, -0.007911747, 0.010675822, -0.06371075, 0.0055732797, -0.014153054, 0.26660216, 0.008298209, 0.2892074, -0.19465372)
                    + f1.r * float4x4(0.2956019, -0.048783645, -0.027829152, -0.020966953, 0.09354169, -0.27781895, 0.03547502, -0.069074705, 0.1316176, 0.22067362, -0.06569985, -0.08559901, 0.46100977, -0.025698967, 0.41337365, -0.1374863)
                    + f1.g * float4x4(0.18947901, -0.038300186, -0.0040781545, -0.025036003, 0.06747621, -0.18584913, 0.036837187, -0.056689724, 0.10085974, 0.06916341, -0.04224364, -0.08707834, 0.2981121, -0.0025901194, 0.28197736, -0.027125893)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.03730395, 0.2924905, 0.07462628, -0.11995512, 0.07539798, -0.06938229, -0.055808913, -0.22988811, 0.03198237, 0.23112965, 0.4085704, -0.31495637, 0.3619525, -0.13712114, -0.07865616, 0.048263896)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.79249716, 1.5667986, 0.6639757, -0.8555173, 1.5390352, -0.764942, 0.6397904, 0.87792087, -0.16893716, -0.0055305064, -0.9712023, -1.1497734, 1.4525936, 0.86195666, 0.89973557, 0.04180749)
                    + f2.b * float4x4(0.12171304, -0.6217954, 0.06581742, 1.1236897, 1.8727534, -0.8303929, 0.453426, -1.5473616, 1.232799, -0.201437, 0.7534798, -0.007211877, 0.5584543, -1.1687531, 0.1891656, -0.2360472)
                    + f2.a * float4x4(-0.18888168, -2.136555, -1.6138701, 1.9279325, 1.6779193, -0.99459195, -0.43201765, -0.03586328, 2.0532005, -0.06934887, -1.5100805, 1.9071585, -0.42885536, 0.3886333, 0.25115642, 0.18950151)
                    + f3.r * float4x4(-0.13785402, 0.109884106, 0.17946169, 0.092375286, 0.19535248, 0.05583112, -0.15027694, 0.2931717, 0.07283524, -0.15083763, -0.34467047, 0.34503776, -0.08156137, 0.12145896, -0.21835315, 0.0012387548)
                    + f3.g * float4x4(0.21543324, 0.09368607, -0.029252958, -0.049849942, 0.10148389, -0.1009739, -0.1290843, 0.03691067, 0.11334992, -0.1676237, -0.129114, 0.3628593, -0.1787988, 0.19502416, 0.19603042, 0.023250794)
                    + f3.b * float4x4(0.2435039, -0.17738213, 0.23523866, -0.1799359, 0.14579722, 0.15791629, -0.16580623, 0.08433296, -0.028479677, -0.08633709, -0.23329563, 0.25580162, -0.17916107, -0.07800055, -0.07538757, 0.13077395)
                    + f3.a * float4x4(0.028547034, -0.15057568, -0.1300478, -0.074639775, 0.077691466, 0.030437883, 0.016085982, 0.16642724, 0.051886685, 0.055095434, -0.32609937, 0.34672627, -0.21393912, -0.05934466, -0.14834549, -0.09142573);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.76726294, -0.04824978, 0.03698927, -0.027807942)
                    + f0.g * float4(-0.07098205, -0.109698534, -0.09569588, -0.020647598)
                    + f0.b * float4(-1.5544087, -0.092971265, -0.0845595, -0.95343393)
                    + f0.a * float4(0.016066927, 0.154459, 0.064301014, 0.03950535)
                    + f1.r * float4(0.11592361, -0.0751974, -0.066839516, 0.06112826)
                    + f1.g * float4(0.10825151, 0.08088711, 0.07516375, 0.062287487)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.01985453, -0.0305309, 0.051655352, -0.19348317)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.79135233, -0.17695737, -0.21805188, 1.4934783)
                    + f2.b * float4(0.65114903, -0.0939486, 0.12339538, 0.45066732)
                    + f2.a * float4(-0.28255475, 0.1198003, -0.21833882, 0.35967812)
                    + f3.r * float4(-0.039659806, -0.042660743, 0.028912425, 0.028850272)
                    + f3.g * float4(-0.2745836, 0.051097125, -0.22173482, 0.15161122)
                    + f3.b * float4(-0.26363647, -0.129855, -0.17914948, -0.25785306)
                    + f3.a * float4(0.10751876, -0.18271965, -0.20150936, -0.13285886);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -1.3200282, 0.54462004, 0.31994787, 0.14686912, 0.21733575, -0.41578138, -0.21957904, 0.16801319, -1.354084, 1.0441351, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.05147443, -0.081798844, -0.023040233, 0.3703645, -0.17197014, -0.54890484, -0.030129878, 0.122955024, 0.12337539, 0.041368842, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.2973707, 0.13721341, 0.03743329, 0.070302576, -0.5963327, 1.0790113, -0.051476512, -1.5521038, -0.045606, 0.04466946, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.19427802, -0.10000168, -0.07312435, -0.22964847, 0.3079834, -0.1486213, -0.08312782, -0.09118186, 1.108122, -0.116067834, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.20860136, -0.053383652, 0.31581, -0.03849454, -0.8050967, -1.3270301, -0.093765624, 0.3325757, 0.20127659, -0.07809186, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-3.9585404, -1.2713014, 2.1715066, 0.10819602, 0.7285396, 0.25553796, 0.0722917, 0.36372334, -0.26244813, -0.107887305, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.3257108, 0.30931702, -0.24977507, -0.008294646, -0.8466155, -0.49356782, -0.02087448, 0.23567794, -0.05097467, -0.5322069, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.4134636, 0.33687404, -0.108488016, -0.16185132, 0.85425925, -1.5238649, -0.14667974, 0.011224827, 0.5746678, 0.0066023753, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.31144685, 0.276357, 0.26825243, -0.06741002, -0.89234954, -0.38282555, 0.078969195, -2.928665, 0.0052279057, -0.07019972, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.008131217, 0.0217891, -2.3680534, -0.102753796, 0.21699437, 0.4775156, -0.045771696, -0.03997969, -0.67432004, -0.05597331, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.53100765, 0.3495905, -0.11230997, 0.056260142, -0.30014652, 0.3106626, -0.22047949, -2.3686893, 0.14726448, -0.048594784, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.39990857, 0.28334558, -0.37187055, -0.04378931, 0.7886104, 1.0348492, -0.19024472, 0.016750878, 0.08133267, -0.123875774, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.16536787, -0.029571619, -0.08843327, 1.5100855, -0.37564448, -0.009035066, 0.13946825, 1.3464395, 0.6749379, 0.14899018, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.21660756, -0.19476241, -0.24243326, 0.04363847, 0.52256346, 0.40007037, -0.24417768, 2.1641238, 0.474247, 0.07972412, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.078263514, -0.05855262, 0.08541956, 0.58850586, -0.08170679, -0.037142217, 0.03198902, -0.13493393, 0.5159171, 0.21710388, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.039053798, 0.09446039, 0.15528156, -0.037031244, 0.15791619, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.033234775, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.21189499, 0.20952536, -0.2419242, -0.19068153, -0.84754056, -0.6255883, 0.14410684, -1.347262, 0.05416516, -0.13770251, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.016853489, -0.014594723, 0.017339904, 0.32003444, 0.32224137, 0.57812625, 0.19016163, 0.8308359, -0.3074632, -0.6388196, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.39520478, 0.4112278, 0.3852567
                );
                result +=
                    intermediate_two[0][0] * float3(0.09891619, 0.09620617, 0.1009587)
                    + intermediate_two[0][1] * float3(-0.20176895, -0.20678788, -0.20597504)
                    + intermediate_two[0][2] * float3(-0.15868442, -0.17805023, -0.16647355)
                    + intermediate_two[0][3] * float3(-0.035141338, 0.12797634, -0.02695134)
                    + intermediate_two[1][0] * float3(0.13618885, 0.13103692, 0.13359785)
                    + intermediate_two[1][1] * float3(-0.24802947, -0.260457, -0.23979212)
                    + intermediate_two[1][2] * float3(0.2547104, 0.2379856, 0.25864008)
                    + intermediate_two[1][3] * float3(0.5025322, 0.46193784, 0.5035272)
                    + intermediate_two[2][0] * float3(0.012028298, -0.1381215, 0.013386858)
                    + intermediate_two[2][1] * float3(0.069132075, 0.0064365, 0.0059245666);

                return result;
            }
            half3 EvaluateNetwork_Top_CD_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, -0.12474327, 0.084975526, 0.0, 0.0, 0.42672032, -0.093247786, -0.0652671, 0.0, 0.0, -0.03689544, -0.07967161, 0.018057467, -0.049504563, -0.05893, -0.0483399
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, 0.0, 0.1812331, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27707854, 0.044029754, -0.69751304, 0.1881425, -0.12768662, 0.03330798, 0.19549671, 0.31546438, -0.9045647, 0.13725406, -0.04211798, 0.5126873, 0.6828671, -0.20592427, 0.108078465, -1.2919804)
                    + f0.g * float4x4(-0.0122274, -0.3387606, 0.3114796, -0.79574597, -0.32081944, 0.36556482, 0.11877437, 0.25443137, 0.07720297, -0.15605927, 0.33422822, 0.13657542, 0.887514, 0.06817575, -0.25472823, -0.0828492)
                    + f0.b * float4x4(-0.72606903, -1.8041408, 0.60008425, 0.5521824, 0.14007454, 1.94398, 0.2145574, 0.67519695, 0.5911784, 0.3595963, -0.02155812, 0.43609515, 1.3541741, 0.23767969, -0.4294237, 0.029468006)
                    + f0.a * float4x4(-0.21259804, -0.025693407, -0.07513728, 0.21210915, 0.13729009, 0.041079894, -0.401877, -0.21981935, -0.10612589, -0.37735936, 0.016679859, -0.07430088, 0.050441504, -0.07344696, -0.70951957, 0.021374455)
                    + f1.r * float4x4(0.124373354, 0.061406758, 0.34561786, -0.009128058, -0.028353957, -0.13069686, -0.19957006, 0.3463467, 0.20689763, 0.18766409, 0.068352416, -0.052330483, -0.12159317, 0.21701111, -0.3614935, -0.18380044)
                    + f1.g * float4x4(-0.2600644, 0.04242414, 0.14250429, 0.65755844, -0.08958224, -0.08247373, 0.02497722, -0.014942882, 0.73951864, 0.22193529, 0.007151666, 0.59922874, -0.06141258, -0.3656909, 0.16870733, -0.13114198)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.20672245, -0.03366983, -0.4043137, -0.048172325, -0.21643546, 0.047806755, 0.22171707, -0.02228675, 0.77200747, -0.14810804, 0.28871307, -0.18672548, 0.31411153, 0.11113979, -0.55630594)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.117459536, 0.03612042, -0.45795333, -0.20147912, 0.14145689, 0.023512347, -0.24955297, -0.046741966, -0.6318568, -0.36729887, 1.4874134, -0.17910317, 0.4938879, 0.041410208, 0.1415638, 1.3266584)
                    + f2.b * float4x4(0.2747103, 0.55897856, 2.7433193, 0.38151968, 0.5290515, -0.10997901, -0.40788105, -0.16247667, 0.10808924, -0.22086994, 1.7233504, 0.046035018, 0.19088726, -0.12653938, -0.44811136, 0.06635125)
                    + f2.a * float4x4(-0.23951223, -0.4319788, -0.25764257, -0.4939828, -0.22086687, -0.00033445423, 0.39552507, -0.26056606, -0.046388548, -0.012720043, 0.90166086, 0.03316544, -0.8743965, 0.0396113, 0.29197237, 0.52656466)
                    + f3.r * float4x4(-0.15146434, 0.16904648, 0.48862672, 0.3899215, 0.100227304, 0.25398025, -0.042335503, -0.0682817, -0.108878605, -0.1339395, -0.0669409, 0.03345641, 0.6044368, 0.15256551, -0.012749609, -0.25573182)
                    + f3.g * float4x4(-0.20581964, 0.53872055, -0.052138135, 0.08633077, 0.13081934, 0.31082523, 0.42689994, -0.20792094, -0.020086177, -0.1444517, 0.1888382, 0.004530162, 0.060772873, -0.16341409, -0.8745666, 0.57719)
                    + f3.b * float4x4(-0.9036911, -0.18122397, -0.19158824, -0.54856044, -0.29769978, 0.11365447, 0.07886606, -0.038715877, -0.78283244, -0.11068815, -0.0035173923, 0.09679836, -0.07380648, 0.0853502, -0.44149122, -0.73155284)
                    + f3.a * float4x4(-0.24497046, -0.6126083, -0.2110995, -0.5639299, -0.20565228, 0.23483923, -0.44190413, 0.17059177, -0.59286225, 0.12217536, 0.3613684, 0.43136445, -0.52584374, -0.20902957, 0.4100253, -0.22322835);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.39273125, 0.8022967, -0.05888661)
                    + f0.g * float4(0.06488515, -1.1157421, 0.024038281, -0.51103616)
                    + f0.b * float4(0.3008439, 0.48101074, 0.68103105, 0.013984563)
                    + f0.a * float4(-0.5425608, 0.107482396, 0.001737262, -0.7120615)
                    + f1.r * float4(-0.12611742, -0.4384489, 0.63563704, 0.4670956)
                    + f1.g * float4(0.3637557, 0.048151948, 0.2789911, -0.11180612)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -1.0677167, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 0.41496858, -0.8911214, -0.08536301)
                    + f2.b * float4(-0.05775499, -0.06740296, 0.570182, -0.3206004)
                    + f2.a * float4(-0.1836326, 0.19279256, 0.40826842, 0.10167499)
                    + f3.r * float4(-0.29104778, -0.44784978, 0.12672397, 0.12286028)
                    + f3.g * float4(-0.06745626, 0.32418048, 0.30122453, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.1991616, -0.066080585)
                    + f3.a * float4(-0.11661739, 0.19867179, -0.14432171, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.3751961, -0.010248684, 0.0, 0.12593742, -0.12888373, 0.6879157, -0.26212105, -0.8266488, 0.23198298, -0.029855683, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.14273316, 0.3420771, 0.1467457, 0.12595218, -0.2740743, 0.5658005, -0.113547556, 0.0853525, -0.07897107, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.11991159, -0.3230187, -1.0916723, -0.30683035, -0.46241787, -0.11409453, 0.0026786602, 0.95664895, -0.0820485, -0.35548675, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.14002544, 0.40972534, -0.5665951, 0.22955664, -0.33019763, 0.033926763, 0.2534974, -0.05304788, 0.2211387, 0.20479193, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.32626876, 0.35414898, -0.11308466, -0.012329858, -0.15078437, -0.33006278, 0.38510448, -0.72021496, 0.28563592, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.24231166, -0.14321148, -0.6285974, 0.032954313, 0.18211208, -0.15221968, -0.122335516, 0.737797, 0.16690458, -0.18824805, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.13824432, 0.5426311, -0.07134927, 0.38312787, 0.10199037, 0.33234513, -0.0437075, -0.33057114, -0.47776282, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.13174625, 0.30719158, 0.17014529, -0.19407828, -0.33770502, 0.111358516, -0.1628659, -0.23064198, 0.22054431, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.4689127, -0.31527337, -0.09104016, 0.23894386, -0.44964555, -0.14142731, -0.21810506, 0.1447157, -0.13349745, -0.28430334, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.013135067, 0.100718826, 0.114845105, -0.07678424, 0.4179766, -0.083792955, 0.39636433, -0.41471097, 0.10139511, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.2876762, -0.35163984, -0.30278754, 0.04917461, -0.72219706, -0.1320413, -0.233362, -0.25411355, -0.18135883, -0.28336668, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8125209, 0.2632003, 0.7612285, -0.27574354, -0.6726697, 0.23346353, -0.34779572, -0.36473352, 0.033325877, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.5329217, 0.08242251, 0.21318537, 0.29517502, 0.5605327, 0.58070236, 0.41365314, 0.3833964, 0.06476541, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.03769675, 0.3671922, -0.36753264, -0.16709319, 0.36218098, -0.2289496, -0.5297021, -0.0974924, 0.16818772, -0.59771925, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2621343, -0.17108545, 0.50701785, 0.5829826, 0.07509643, -0.23804331, -0.09071631, 0.045562245, -0.07328703, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.19230247, 0.37490502, -0.21911056, -0.006921171, 0.6078377, 0.25046387, 0.03104688, 0.1146129, -0.1596499, -0.2540294, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.044946186, 0.09741339, 0.046167474
                );
                result +=
                    intermediate_two[0][0] * float3(-0.108921625, -0.08867503, -0.078038916)
                    + intermediate_two[0][1] * float3(0.09075333, 0.0015722926, -0.01971281)
                    + intermediate_two[0][2] * float3(-0.20966627, -0.15075986, -0.42810306)
                    + intermediate_two[0][3] * float3(0.047612593, 0.0899433, 0.061783716)
                    + intermediate_two[1][0] * float3(-0.0068778605, 0.61979777, -0.2779673)
                    + intermediate_two[1][1] * float3(0.19936243, 0.08423175, 0.111937925)
                    + intermediate_two[1][2] * float3(0.2073894, 0.3269777, 0.29412773)
                    + intermediate_two[1][3] * float3(-0.14286293, -0.12877773, -0.09452887)
                    + intermediate_two[2][0] * float3(0.07611825, -0.14176047, -0.062959485)
                    + intermediate_two[2][1] * float3(-0.08539833, -0.62495345, 0.24344908);

                return result;
            }
            half3 EvaluateNetwork_Top_CD_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, -0.008687345, 0.0, 0.0, 0.0, 0.0, 0.044746347, -0.09080375, 0.0, 0.0, -0.023373306, -0.14214025, 0.07106254, -0.031754456, 0.0053998698, -0.0013717583
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, 0.0, 0.19772099, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27707854, 1.2986194, -0.46348134, 0.1881425, -0.12768662, -0.5138307, -0.6005795, 0.19927157, -0.9045647, 0.13725406, -0.010712236, 1.0747274, -0.03661163, -0.23670614, -0.01884893, -0.1038128)
                    + f0.g * float4x4(-0.0122274, -0.22273329, 0.22649929, -0.79574597, -0.32081944, -0.061149582, 0.25673503, 0.22889295, 0.07720297, -0.15605927, 0.34779498, 0.07410096, 0.94044185, 0.085925914, -0.19040713, -0.035873126)
                    + f0.b * float4x4(-0.72606903, 0.2953456, 0.17284235, 0.5521824, 0.14007454, -0.06371774, -0.32704306, 0.7014124, 0.5911784, 0.3595963, 0.10458184, 0.5855415, 0.22355545, 0.22278449, -1.6874799, -0.7886651)
                    + f0.a * float4x4(-0.21259804, 0.23386832, 0.527816, 0.21210915, 0.13729009, 0.4714436, -0.032115046, -0.15933804, -0.10612589, -0.37735936, 0.004787107, -0.063126124, 0.00059323764, -0.056985207, 0.0053380234, 0.006672044)
                    + f1.r * float4x4(0.124373354, 0.46831435, 0.14032899, -0.009128058, -0.028353957, -0.44881627, -0.03770523, 0.36693138, 0.20689763, 0.18766409, 0.39917368, -0.22954348, 0.13089387, 0.20693472, 0.21018852, 0.19830565)
                    + f1.g * float4x4(-0.2600644, 0.29169196, 1.3050503, 0.65755844, -0.08958224, 0.08261935, -0.029115101, 0.0011369628, 0.73951864, 0.22193529, 0.14291057, -0.19399476, 0.0414264, -0.38836914, 0.08193947, 0.09275364)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.09066407, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.090187535, 0.2472547, -0.02228675, 0.77200747, -0.16163765, 0.35116002, -0.23972327, 0.29636234, 0.046807405, -0.60334283)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.117459536, 0.6791201, 0.17526214, -0.20147912, 0.14145689, -0.037164662, -0.59054536, -0.047510825, -0.6318568, -0.36729887, -1.5816752, -1.0607249, 0.9758955, 0.105220534, 0.2058417, 1.6187699)
                    + f2.b * float4x4(0.2747103, 0.47424376, -0.6516506, 0.38151968, 0.5290515, 0.08917348, 0.8926883, -0.21236695, 0.10808924, -0.22086994, 0.7063167, -0.050836656, 2.4233596, -0.08428309, 1.1005989, -0.22807094)
                    + f2.a * float4x4(-0.23951223, -0.124659166, -0.29335544, -0.4939828, -0.22086687, 0.08136868, 0.75763595, -0.23270881, -0.046388548, -0.012720043, 0.2667015, 0.1085003, 1.4557154, 0.02580422, 0.35106623, 0.042112544)
                    + f3.r * float4x4(-0.15146434, 0.28512794, 0.40375632, 0.3899215, 0.100227304, -0.1727081, 0.09564203, -0.093813874, -0.108878605, -0.1339395, -0.0534191, -0.029021686, 0.65752333, 0.17031248, 0.051579542, -0.20877975)
                    + f3.g * float4x4(-0.20581964, 0.6547677, -0.13698591, 0.08633077, 0.13081934, -0.11588551, 0.56491405, -0.23345336, -0.020086177, -0.1444517, 0.20237458, -0.057950284, 0.113778174, -0.14566709, -0.8102544, 0.62425137)
                    + f3.b * float4x4(-0.9036911, -0.06517344, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.21684547, -0.064248115, -0.78283244, -0.11068815, 0.010006564, 0.03431474, -0.020795746, 0.10309813, -0.37715623, -0.684492)
                    + f3.a * float4x4(-0.24497046, -0.4965445, -0.29607022, -0.5639299, -0.20565228, -0.19187808, -0.30393317, 0.14505415, -0.59286225, 0.12217536, 0.37493515, 0.3689173, -0.47289732, -0.19128047, 0.4743598, -0.1762559);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.39273125, -0.7102188, -0.05888661)
                    + f0.g * float4(0.06488515, -1.1157421, 0.040521722, -0.51103616)
                    + f0.b * float4(0.3008439, 0.48101074, 1.2794684, 0.013984563)
                    + f0.a * float4(-0.5425608, 0.107482396, -0.024904046, -0.7120615)
                    + f1.r * float4(-0.12611742, -0.4384489, -0.012349385, 0.4670956)
                    + f1.g * float4(0.3637557, 0.048151948, -0.019118974, -0.11180612)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -1.0842515, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 0.41496858, -0.18679765, -0.08536301)
                    + f2.b * float4(-0.05775499, -0.06740296, 0.29974556, -0.3206004)
                    + f2.a * float4(-0.1836326, 0.19279256, 0.71079934, 0.10167499)
                    + f3.r * float4(-0.29104778, -0.44784978, 0.14322992, 0.12286028)
                    + f3.g * float4(-0.06745626, 0.32418048, 0.31768942, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.21567632, -0.066080585)
                    + f3.a * float4(-0.11661739, 0.19867179, -0.12783204, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.1317462, 0.05166189, -0.028317597, 0.262252, -0.3300675, 0.3058736, 0.034854535, 0.67639637, 0.65411717, 0.0, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.14273316, 0.3420771, 0.1467457, 0.12595218, -0.2740743, 0.5658005, -0.113547556, 0.0853525, -0.07897107, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.07669827, 0.029968591, -1.0916723, 0.9164132, -0.43673, 0.54395723, -0.11069349, -0.09799816, 0.034524247, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.32626876, 0.35414898, -0.11308466, -0.012329858, -0.15078437, -0.33006278, 0.38510448, -0.72021496, 0.28563592, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.14466493, 0.29671922, -0.09348799, -0.07096608, -0.11888568, 0.11712594, 0.6884652, -0.44294664, -0.55685914, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.1420576, 0.29384592, 0.17014529, -0.18546799, -0.351058, 0.104901016, -0.1667035, -0.2331531, 0.21529257, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.1925524, 0.25875396, -0.119007014, 0.19463328, -0.62753105, 0.48045707, 0.22943327, 0.046803616, -0.22472773, -0.28430334, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.055046033, -0.11830801, 0.08699949, 0.36739442, 0.33707654, -0.020748287, 0.1296531, -0.57836926, 0.02801102, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.56683165, 0.15215486, -0.30278754, 0.067862734, -0.79508036, 0.5526927, -0.22996773, -0.1509718, -0.31484807, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8392786, 0.24733657, 0.7612285, -0.2954065, -0.6732881, 0.25122815, -0.36124817, -0.39129612, 0.004534278, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.22832772, -0.17351831, 0.18738168, -0.16274938, 0.27919602, -0.55536324, -1.120984, 0.25724962, 0.55975646, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.51818657, -0.0032813118, -0.38476726, -0.1519588, 0.14862968, -0.10871679, 0.5307599, -0.23884708, -0.25868618, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2621343, -0.17108545, 0.50701785, 0.5829826, 0.07509643, -0.23804331, -0.09071631, 0.045562245, -0.07328703, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.17826362, -0.018608721, -0.21911056, -0.35233286, 0.17046413, -0.51947004, -0.53556293, -0.33126265, 0.11173461, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.020095406, 0.0989707, 0.022643866
                );
                result +=
                    intermediate_two[0][0] * float3(-0.1158536, -0.16231303, -0.08968024)
                    + intermediate_two[0][1] * float3(0.19485089, -0.08282984, 0.071705446)
                    + intermediate_two[0][2] * float3(-0.20822215, -0.14154652, -0.42455062)
                    + intermediate_two[0][3] * float3(-0.12148571, -0.15037921, -0.13074034)
                    + intermediate_two[1][0] * float3(0.0075215455, 0.48577768, -0.3857765)
                    + intermediate_two[1][1] * float3(0.14102468, 0.31162652, 0.15711255)
                    + intermediate_two[1][2] * float3(-0.024095684, -0.0966471, -0.029052537)
                    + intermediate_two[1][3] * float3(-0.081505194, -0.085520685, -0.07179315)
                    + intermediate_two[2][0] * float3(0.11667384, 0.048288208, 0.09410592)
                    + intermediate_two[2][1] * float3(-0.09090813, -0.62796783, 0.24741682);

                return result;
            }

            half3 EvaluateNetwork_Bottom_L_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.082195394, 0.344609, -0.34486684, 0.32910368, 0.0365997, 0.08864241, -0.22927931, 0.18208946, 0.16659182, 0.07334595, -0.09989259, 0.107962616, 0.17509185, -0.10146892, 0.35032153, 0.3041444
                );

                float4 intermediate_one_4 = float4
                (
                    -0.17957328, -0.22854611, -0.1972804, 0.4405184
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-1.4579333, 0.5002771, -1.0440578, -1.2770793, -0.321672, 2.0103598, -0.0715186, 1.70029, 0.23737255, -0.008860818, 0.17238533, 0.6020999, 0.25290784, 0.15670478, 0.17729557, -0.0926303)
                    + f0.g * float4x4(0.26899365, -0.10146326, 0.48209944, -0.17343949, 0.04419249, 0.12507552, 0.15725955, -0.18737067, 0.23750374, 0.12623371, 0.23774609, 0.047266833, -0.52514803, -0.046533406, -0.31951565, -0.44693783)
                    + f0.b * float4x4(1.7388471, 2.4790294, -1.6174924, 2.017327, 2.7308025, -0.33481622, 0.053669512, 1.572166, 0.039498627, 0.90751946, -0.16962764, -1.1279303, 1.7486941, -0.10220888, -0.16542873, 0.32431105)
                    + f0.a * float4x4(0.13229088, -0.0046464396, -0.07062644, -0.03770727, 0.03749653, -0.03592356, 0.006227374, -0.031379487, 0.07099423, 0.064132474, -0.18164024, 0.022025172, -0.008662949, -0.22286832, 0.004332602, -0.014583757)
                    + f1.r * float4x4(0.22986178, -0.06679938, -0.05970421, -0.10344131, 0.5384355, -0.062757336, 0.07043767, 0.1506968, -0.23766598, 0.3460512, -0.036552906, 0.0717827, -0.055906482, -0.13751543, 0.010254273, -0.07720943)
                    + f1.g * float4x4(-0.17534931, 0.014200775, 0.051329218, 0.08646745, -0.4815935, 0.08752363, -0.15698925, -0.20020844, -0.15157604, -0.16287756, 0.030141562, 0.036992487, 0.04969225, 0.18402985, -0.0035868892, 0.030208146)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.054780353, 0.59290403, -0.18385969, -0.0708849, 0.08079449, -0.028064698, -0.1707944, 0.078452736, 0.23337957, 0.13636437, 0.23726994, -0.17047425, 0.50113547, -0.03526777, 0.17875412, 0.28373182)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.025640601, 0.2443984, -0.42966637, -0.24877314, 0.027191032, -0.22638866, 0.17371145, 0.17253008, -0.073458284, -1.6337672, -0.006770164, 0.632256, 0.7868458, 0.22191986, 2.0100796, 0.93631)
                    + f2.b * float4x4(-0.095446266, -0.30760285, 0.067830935, -0.23568882, -0.4960144, 0.40178317, -0.07079992, 0.28547496, 0.21881661, 0.97917336, -0.24087828, 1.2520057, 0.4833323, 0.030206472, -0.6398784, -2.7390573)
                    + f2.a * float4x4(-0.018412376, 0.42310828, 0.30796888, 0.37183002, -0.33101913, -0.08243869, 0.081471115, 0.7250683, 0.20248345, -0.2494855, -0.1034396, -0.4201429, -0.09093577, 0.13345781, -0.09126885, 0.5584602)
                    + f3.r * float4x4(-0.18824719, 0.5012351, -0.117030054, 0.32349446, 0.20194826, 0.15931459, -0.03529045, 0.4866325, -0.12856087, -0.2455784, -0.17335445, 0.08090479, 0.52687824, 0.019607693, 0.05859813, 0.254285)
                    + f3.g * float4x4(0.16504055, 0.4850283, -0.3257501, 0.18127915, 0.10805827, 0.0025101004, -0.014095902, 0.2303531, -0.08804569, -0.26236382, 0.042194664, 0.09872462, 0.42964604, 0.093182504, 0.47300306, 0.27629286)
                    + f3.b * float4x4(0.19312356, 0.2139264, -0.061253387, 0.05120297, 0.15237825, 0.26140085, -0.05082023, 0.27778465, -0.22987631, -0.18107031, -0.06199324, -0.008337102, 0.4292834, -0.1798496, 0.20156187, 0.38383204)
                    + f3.a * float4x4(-0.021852745, 0.24077459, -0.4265619, 0.15651922, 0.08428261, 0.13395481, 0.13107017, 0.3599343, -0.1495116, -0.039663248, -0.15480515, 0.08259213, 0.3945284, -0.16119322, 0.1286278, 0.16165806);
                
                intermediate_one_4 +=
                    f0.r * float4(0.3577076, -0.04824978, 0.03698927, 1.2280908)
                    + f0.g * float4(0.0022327036, -0.109698534, -0.09569588, -0.27411243)
                    + f0.b * float4(-0.49051428, -0.092971265, -0.0845595, 0.59826267)
                    + f0.a * float4(0.017063694, 0.154459, 0.064301014, -0.022775183)
                    + f1.r * float4(0.060253758, -0.0751974, -0.066839516, -0.043784995)
                    + f1.g * float4(0.030715045, 0.08088711, 0.07516375, -0.013815426)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.09307171, -0.0305309, 0.051655352, 0.05997428)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.8864822, -0.17695737, -0.21805188, 0.1093676)
                    + f2.b * float4(1.6272397, -0.0939486, 0.12339538, 0.34055525)
                    + f2.a * float4(-0.17486897, 0.1198003, -0.21833882, 0.47753075)
                    + f3.r * float4(0.15002213, -0.042660743, 0.028912425, 0.36243007)
                    + f3.g * float4(-0.08490636, 0.051097125, -0.22173482, 0.4851875)
                    + f3.b * float4(-0.07395197, -0.129855, -0.17914948, 0.07568963)
                    + f3.a * float4(0.29719198, -0.18271965, -0.20150936, 0.20072757);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.45249274, -0.4086614, 0.12587623, 0.109511964, -0.21427916, 0.0019150024, -0.244611, 0.3844783, -0.14144556, 0.38504556, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.017867152, 0.038638834, -1.011096, 0.671761, -0.08772496, -1.7527308, -0.033870697, -0.770823, 0.06350679, -0.6552358, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.4505335, -0.12669906, -0.24684477, -0.047294665, 0.12162711, 0.005591424, -0.07428888, -0.828187, 0.015340852, 0.5594125, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.47247863, 0.29424918, 8.775574e-05, -0.18391006, -0.117472276, 0.5621986, -0.08600185, 0.2913629, -0.15988585, -0.6000001, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.014507399, 0.8514003, -0.0013665417, -0.38804027, 0.11796435, 0.8417685, -0.107465684, 0.6252269, 0.03500768, 1.357127, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.165521, 0.16167821, 0.12516469, -0.017977042, 0.15508159, 0.19356824, 0.053775243, 0.26958174, -0.09741438, -0.65516305, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.044932306, 0.6623384, -0.001334547, -0.2297658, 0.04482141, -0.020745177, -0.058788124, -0.01572256, 0.08156935, 0.13023046, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.061428208, -0.077944405, 0.0944807, 0.14437005, 0.12452183, -0.08304594, -0.12007246, -0.2213227, -0.1625917, 0.14703019, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.11402451, 0.25349537, -0.030378947, -0.00085702643, -0.030279048, 0.5933779, 0.059861574, 0.1252294, 0.1493497, -0.14524382, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.20539518, -0.101796575, -0.16151299, 0.1051555, -0.08612345, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.14514348, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.31928813, -0.21878713, -0.2970393, 0.12232205, 0.06984393, 0.06372244, -0.09317393, 0.005944855, -0.20293462, -0.22399612, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.59348714, 0.648285, 0.3162794, 0.39974654, -0.19880714, -0.41120413, -0.25157276, -0.7900917, -0.054020762, 0.04912267, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.5774295, -0.077414356, -1.1937567, -0.20405744, -0.25415224, 0.12487334, 0.09184695, 0.33277878, -0.17827737, -0.63791484, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.3672173, 0.0076103737, -0.0033496625, 0.2083624, -0.102018565, 0.23376702, -0.0149752125, -0.29374832, -0.119825356, -0.19741206, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.15035403, -0.09331401, 0.021199398, -0.0207544, 0.12932397, -0.057612397, 0.0005686295, 0.13440405, -0.13943538, 0.18240786, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.57616025, -0.5748784, 0.28965393, -0.18598607, 0.09335177, 0.37700215, 0.11629531, 0.5033623, 0.033199586, 0.3111601, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.10074175, -0.027496198, 0.015588342, 0.43056285, 0.11733408, -0.7477689, 0.16818602, -0.44257274, 0.15036081, 0.48487243, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.13262975, -0.020084534, -0.01178882
                );
                result +=
                    intermediate_two[0][0] * float3(0.05769305, 0.104216434, 0.08099397)
                    + intermediate_two[0][1] * float3(-0.06207837, -0.051895294, -0.0504286)
                    + intermediate_two[0][2] * float3(-1.776538, -0.7749208, -0.47071758)
                    + intermediate_two[0][3] * float3(-0.1179147, 0.06805781, 0.047709137)
                    + intermediate_two[1][0] * float3(-0.1927661, -0.052082375, 0.29661784)
                    + intermediate_two[1][1] * float3(-0.06684495, 0.007813843, 0.0048981514)
                    + intermediate_two[1][2] * float3(0.18577991, 0.23094645, 0.17980027)
                    + intermediate_two[1][3] * float3(0.109132595, 0.0825345, 0.07600647)
                    + intermediate_two[2][0] * float3(-0.10007771, -0.21689959, 0.049731057)
                    + intermediate_two[2][1] * float3(0.09225017, 0.04393813, 0.040300876);

                return result;
            }
            half3 EvaluateNetwork_Bottom_L_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.032139577, 0.13965641, 0.0, -0.008481431, 0.22600037, 0.0, -0.055071402, -0.07469015, 0.0, 0.105518766, 0.0033835925, -0.044477988, 0.0, 0.0782739, -0.07146306, 0.070093006
                );

                float4 intermediate_one_4 = float4
                (
                    -0.025792424, 0.052382536, 0.0, 0.020585991
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.15752769, 1.0347514, -0.46348134, 0.1798525, -0.5648455, -0.5138307, 0.118051976, 0.2140132, -0.9045647, -0.015552707, -1.0932353, 1.0155305, -0.09913394, -0.12992902, 0.002792635, -0.10374933)
                    + f0.g * float4x4(0.01991134, -0.3537034, 0.22649929, -0.7872647, -0.5468315, -0.061149582, 0.26709002, 0.3943858, 0.07720297, -0.26157692, 0.3677778, 0.26073274, 0.86941344, 0.039408937, -0.124336086, -0.10459545)
                    + f0.b * float4x4(-1.365828, 1.2006696, 0.17284235, 0.55971247, 1.6876012, -0.06371774, 0.17925133, 0.68153363, 0.5911784, 0.10140529, -1.0000074, 1.5442468, 0.15365984, 0.11837631, -0.41996172, -1.6005177)
                    + f0.a * float4x4(-0.00030895986, 0.0136367185, 0.527816, 0.22014828, -0.008145255, 0.4714436, -0.38153568, -0.20622383, -0.10612589, 0.022833202, -0.02676833, -0.07393582, 0.7416917, -0.0048688278, -0.6860142, 0.01624316)
                    + f1.r * float4x4(0.08842671, -0.11254068, 0.14032899, -0.017538222, -0.05639736, -0.44881627, -0.3461732, 0.21985126, 0.20689763, -0.33522737, 0.0080095995, 0.09758569, -0.48672923, 0.07674486, -0.48868865, -0.1638006)
                    + f1.g * float4x4(-0.06263105, 0.06842038, 1.3050503, 0.66619915, 0.06069176, 0.08261935, -0.007732391, -0.020798914, 0.73951864, 0.18821883, 0.018991822, -0.12640075, 0.32686988, -0.017614793, 0.19959514, 0.12869318)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.08990547, 0.22163019, 0.051311567, -0.41279495, 0.17782368, 0.21027829, -0.1005123, 0.08176065, -0.02228675, 0.87753326, -0.181621, 0.16457728, -0.16866112, 0.34286353, -0.019253572, -0.5346014)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.25288022, 0.37515396, 0.17526214, -0.19264765, -0.06059835, -0.037164662, -0.44556242, 0.023708649, -0.6318568, 0.85420835, -0.025811989, 0.16269477, -0.039648447, -0.15957646, 0.2544861, -0.0384053)
                    + f2.b * float4x4(0.3329125, -0.3262792, -0.6516506, 0.3735978, -0.118468374, 0.08917348, -0.38671726, -0.22309777, 0.10808924, 0.30254486, 0.06746981, 0.13267359, 0.48557547, -1.461854, -0.45698133, 0.36519223)
                    + f2.a * float4x4(-0.29372346, 0.13230373, -0.29335544, -0.48517847, 0.23014306, 0.08136868, 0.34313366, -0.25698027, -0.046388548, 0.59668213, 0.09497621, 0.13406125, -0.24451128, -0.41806412, 0.2965542, 0.13910952)
                    + f3.r * float4x4(-0.18361151, 0.433433, 0.40375632, 0.3814404, 0.3261764, -0.1727081, -0.004157198, -0.077703334, -0.108878605, -0.02843308, -0.026654609, 0.068645984, 0.58647233, 0.28033593, -0.025276951, -0.13731205)
                    + f3.g * float4x4(-0.23796378, 0.8031202, -0.13698591, 0.077849634, 0.35677087, -0.11588551, 0.46508014, -0.21734287, -0.020086177, -0.03894389, 0.2291235, 0.03971768, 0.042721815, -0.035650622, -0.8870912, 0.6956633)
                    + f3.b * float4x4(-0.9358223, 0.08314555, -0.27642944, -0.5570414, -0.07174345, -0.31305373, 0.11704451, -0.04813763, -0.78283244, -0.005184096, 0.036768787, 0.13197654, -0.09185188, 0.21310933, -0.45401707, -0.6130801)
                    + f3.a * float4x4(-0.27710384, -0.34819055, -0.29607022, -0.5724112, 0.020348232, -0.19187808, -0.40372562, 0.16116841, -0.59286225, 0.22769092, 0.40166664, 0.4665479, -0.5439443, -0.08125596, 0.3974943, -0.10479367);
                
                intermediate_one_4 +=
                    f0.r * float4(0.4314586, 0.78237927, -0.20957315, 0.053650253)
                    + f0.g * float4(0.0906774, -1.1681138, -0.1571988, -0.5316046)
                    + f0.b * float4(0.32630482, 0.836178, 0.3518889, -0.20062186)
                    + f0.a * float4(-0.515894, 0.026892425, 0.12208697, -0.0028157078)
                    + f1.r * float4(-0.14793208, -0.24605027, 0.44546178, 0.33762783)
                    + f1.g * float4(0.38916352, 0.14271964, -0.103472136, -0.22851801)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.16886932, 0.32552382, -0.88654417, -0.1532956)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.22541472, 0.42365265, 0.14820568, 0.76946837)
                    + f2.b * float4(-0.07913627, 0.28589138, 0.07934006, -0.1210237)
                    + f2.a * float4(-0.15543059, 0.34300125, -0.08260186, -0.4508583)
                    + f3.r * float4(-0.31683812, -0.39544776, -0.054469984, 0.14344521)
                    + f3.g * float4(-0.09324749, 0.3765825, 0.12001899, 0.30371162)
                    + f3.b * float4(-0.42061472, -0.18276393, 0.017975407, -0.045500495)
                    + f3.a * float4(-0.1424091, 0.25104713, -0.32557088, -0.56232154);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.15642078, 0.39791498, 0.3328435, -0.3419511, -0.15600027, -0.23586637, -0.22900586, -0.19970691, -0.1753287, -0.21470885, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.13682432, 0.610678, -0.86942554, 0.4487796, -0.2753816, 0.66068316, -1.280064, -0.05476661, 0.3046395, -0.43868095, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.32758, -0.12711601, 1.0012758, 0.13731621, -0.5244518, 0.2402111, -0.4172374, -0.14013022, 0.44803536, -0.5371749, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.1896675, 0.2664912, -0.10751033, 0.18753237, 0.06843577, 0.47523284, -0.08431646, -0.03302203, -0.4238241, -0.08746257, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.38238674, 0.13287, 0.38693774, -0.06386648, -0.17321154, 0.38466713, 0.06862447, 0.0036856525, 0.45826703, 0.35735008, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.14427748, 0.5412167, -0.07909452, 0.44594625, 0.11019941, 0.29814276, -0.08062748, -0.3111198, -0.5096862, -0.2761275, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.12403935, 0.3244276, 0.1510092, -0.16025813, -0.3462511, 0.09624423, -0.18225177, -0.2349174, 0.23847727, -0.16057962, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.15141386, 0.23403876, -0.27356195, 0.3917173, 0.5065825, 0.24071248, -0.5578616, 0.16202524, 0.1445068, -0.3039149, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.2778095, -0.19206184, 0.17935063, -0.04460211, -0.3818781, 0.21276294, -0.00022173495, -0.08688143, -0.12403287, -0.4860024, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.044614755, 0.1647605, -1.1866814, 0.023607198, 0.29957366, -0.013013574, 0.0060305046, -0.19589841, 0.7440614, -0.051660728, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.21203634, -0.21119553, -0.30278754, 0.26169735, -0.60479164, 0.40098637, -0.059508216, 0.10199141, 0.11932534, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.6498452, 0.13438497, -0.6214369, 0.16087204, -0.6990115, 0.24009295, -0.11519999, 0.1043691, 0.27682275, 0.34915385, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4755405, 0.19430995, 0.21318537, 0.30396712, 0.57591385, 0.54588723, 0.36664924, 0.40995717, 0.1406645, 0.11753099, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.045143083, -0.3170107, -0.46945438, -0.055469085, 0.33135885, -0.22889833, 0.13481756, 0.34408852, 0.20852657, -0.6073744, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.1266898, -0.03340362, 0.24861443, 0.65610397, 0.34420845, 0.15385467, -0.17942931, 0.44409963, 0.42759833, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.013642759, -0.2225957, -0.5162667, 0.19734275, -0.096716344, 0.25669616, 0.69290704, 0.13541165, -0.3163852, 0.011427447, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.42936227, -0.5225649, 0.121781096, 0.23359045, -0.7571195, 0.04403746, 0.17272842, 0.24208593, 0.036839068, -0.035090186, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    -0.019739028, -0.0029452546, -0.025300402
                );
                result +=
                    intermediate_two[0][0] * float3(-0.37347072, 0.06529206, 0.1656049)
                    + intermediate_two[0][1] * float3(0.08741031, 0.021461736, -0.0055398233)
                    + intermediate_two[0][2] * float3(-0.08383528, -0.056734122, -0.06427667)
                    + intermediate_two[0][3] * float3(-0.09561093, 0.0855728, -0.022578156)
                    + intermediate_two[1][0] * float3(0.036390226, 0.51277375, -0.42459387)
                    + intermediate_two[1][1] * float3(0.3005878, 0.16232489, 0.20780225)
                    + intermediate_two[1][2] * float3(0.097816624, 0.077412516, 0.067269206)
                    + intermediate_two[1][3] * float3(-0.017862948, -0.09981489, -0.03534957)
                    + intermediate_two[2][0] * float3(-0.1336426, -0.09584832, -0.1071965)
                    + intermediate_two[2][1] * float3(-0.09112444, -0.5077096, 0.15235464);

                return result;
            }
            half3 EvaluateNetwork_Bottom_C_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.15315191, 0.28460506, -0.009250895, 0.0, -0.15722874, -0.026370926, 0.0, 0.206158, 0.0, 0.21804255, 0.06890986, -0.04910896, 0.0, 0.05192894, -0.04806305, -0.020150797
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, -0.14760068, 0.0, 0.28179085
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(1.5757079, 0.0035531113, -0.4441844, 0.1881425, -0.44399726, -1.5712026, 0.17986512, -0.7761945, -0.9045647, -0.22511692, -0.9458133, 0.5364745, -0.09913394, -1.5430353, 0.04545421, 0.554939)
                    + f0.g * float4x4(-0.1653802, -0.49863872, 0.23574938, -0.79574597, -0.16360304, -0.0347717, 0.21202193, 0.11353519, 0.07720297, -0.37411, 0.30223033, 0.2653566, 0.86941344, 0.06574887, -0.14773661, -0.014351388)
                    + f0.b * float4x4(-1.3611741, 1.9243518, 0.18666713, 0.5521824, 0.47177944, -0.67260444, 0.12867361, 2.3130453, 0.5911784, 2.0607336, -0.40019706, 0.43208724, 0.15365984, 1.4900757, -0.44526172, -2.0691166)
                    + f0.a * float4x4(0.020276949, -0.015563321, 0.522577, 0.21210915, -0.016904809, -0.020712072, -0.44909367, -0.050110012, -0.10612589, 0.0021064887, -0.12331875, -0.11140898, 0.7416917, 0.03962429, -0.7164133, 0.018157227)
                    + f1.r * float4x4(-0.052391864, -0.41567072, 0.11988473, -0.009128058, -0.17407301, -0.14123134, -0.30746773, -0.063271545, 0.20689763, -0.0397231, -0.40485883, -0.1786442, -0.48672923, 0.036548175, -0.48386824, 0.059563603)
                    + f1.g * float4x4(0.024685416, 0.22846813, 1.2964207, 0.65755844, 0.077065036, 0.07150826, -0.058393363, 0.05954671, 0.73951864, 0.010484765, 0.1898672, 0.56505555, 0.32686988, -0.06056215, 0.18696544, -0.002877731)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.27522144, 0.366574, 0.04206066, -0.4043137, -0.20539124, 0.18390964, -0.04544129, 0.362602, -0.02228675, 0.9900899, -0.11609801, 0.15993358, -0.16866112, 0.3165403, 0.00414672, -0.6248729)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(0.70878017, 0.18451717, 0.11641271, -0.20147912, -0.22764471, -0.52943176, -0.5040082, -0.19591326, -0.6318568, -0.18622385, 0.7295284, -0.06401067, -0.039648447, -0.32976484, 0.15572485, -0.18246245)
                    + f2.b * float4x4(0.3947277, -0.47089097, -0.66396767, 0.38151968, 1.9434261, 0.15040933, -0.3436394, -0.07164425, 0.10808924, -0.64029616, -0.023724597, 0.09597779, 0.48557547, -0.104739584, -0.44049868, 0.05687433)
                    + f2.a * float4x4(0.10493574, 0.9792938, -0.27182156, -0.4939828, -0.33674833, 0.018163444, 0.29598776, 0.23045087, -0.046388548, 0.25686377, 0.82140553, 0.013305629, -0.24451128, 0.14696328, 0.27874276, -0.08628511)
                    + f3.r * float4x4(0.0016733274, 0.5784063, 0.39450768, 0.3899215, -0.056972418, -0.1990656, 0.05091197, 0.20313585, -0.108878605, 0.084078416, 0.038849026, 0.06401304, 0.58647233, 0.2539924, -0.0018841057, -0.22753595)
                    + f3.g * float4x4(-0.05268026, 0.94811565, -0.14623377, 0.08633077, -0.026381759, -0.14224863, 0.52014667, 0.06348552, -0.020086177, 0.07356737, 0.2946347, 0.035086587, 0.042721815, -0.061992217, -0.8636985, 0.6054132)
                    + f3.b * float4x4(-0.7505259, 0.22809505, -0.2856781, -0.54856044, -0.45489278, -0.3393902, 0.17211306, 0.2327007, -0.78283244, 0.107333094, 0.10227242, 0.12735483, -0.09185188, 0.18677457, -0.43062517, -0.70333016)
                    + f3.a * float4x4(-0.09181529, -0.2032569, -0.30532107, -0.5639299, -0.3628849, -0.21825205, -0.34865677, 0.4420104, -0.59286225, 0.34021923, 0.4672141, 0.46192482, -0.5439443, -0.10759516, 0.42089286, -0.1950297);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.01939223, -0.20957315, 0.76168513)
                    + f0.g * float4(0.06488515, -0.96811527, -0.1571988, -0.7928439)
                    + f0.b * float4(0.3008439, -0.25835553, 0.3518889, 1.9113195)
                    + f0.a * float4(-0.5425608, 0.019212004, 0.12208697, 0.006404525)
                    + f1.r * float4(-0.12611742, -0.055153858, 0.44546178, 0.029226001)
                    + f1.g * float4(0.3637557, -0.009559328, -0.103472136, -0.049733292)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.12552586, -0.88654417, 0.10790367)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 2.3380022, 0.14820568, 0.06356052)
                    + f2.b * float4(-0.05775499, -0.036202658, 0.07934006, 0.1913401)
                    + f2.a * float4(-0.1836326, 0.23233736, -0.08260186, 0.38224265)
                    + f3.r * float4(-0.29104778, -0.59540325, -0.054469984, 0.4045678)
                    + f3.g * float4(-0.06745626, 0.1766063, 0.12001899, 0.5648455)
                    + f3.b * float4(-0.3948244, -0.38271642, 0.017975407, 0.21564133)
                    + f3.a * float4(-0.11661739, 0.051072564, -0.32557088, -0.30109027);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.56251734, -0.19156668, -1.0160842, -0.2022673, -0.2624455, -0.10502528, 0.18604814, 0.2965904, -0.2260047, -0.035876665, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.033460297, 0.17713372, -0.18446457, 0.12800391, -0.34751377, 0.50369054, 0.19201142, 0.04718347, 0.42132768, 0.2893801, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.15614273, -0.2888548, -0.46696204, -0.006707362, -0.6191838, -0.41463318, 0.40452427, 0.031781834, 0.34805852, -0.094250016, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.24919929, 0.08213991, -0.575488, -0.23569116, -0.310618, 0.49757546, 0.3393309, -0.11047355, 0.05207594, 0.23016739, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.117797345, 0.21270585, 0.0384951, -0.19616106, -0.2680321, -0.08732518, 0.14199588, -0.030046016, 0.02409697, -0.6324538, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.05092682, -0.3284085, 0.16507024, 0.073984675, 0.109780625, 0.1487381, 0.02293477, -0.5586567, 0.2693208, 0.75317323, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.12515555, 0.5577384, -0.07134927, 0.38385752, 0.13159889, 0.33938965, -0.0367086, -0.34538528, -0.49549398, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.25299743, 0.09406785, -0.37401134, 0.18362583, -0.36811408, 0.7485056, 0.24889438, -0.80628765, 0.6216968, 1.1271092, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.12547879, -0.15239932, 0.8780739, -0.07414764, 0.369681, -0.25879154, 0.21215716, -0.5397587, 0.3568407, -0.20672195, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.35577893, -0.010397585, 0.06904971, 0.048352767, -0.52832395, 0.4036269, -0.13355486, 0.38666928, 0.04351763, -0.14161626, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.00038314413, 0.10376137, 0.10057792, -0.10899893, 0.43186095, -0.047310404, 0.41448104, -0.42578307, 0.12587489, 0.07839182, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.21203634, -0.21119553, -0.30278754, 0.26169735, -0.60479164, 0.40098637, -0.059508216, 0.10199141, 0.11932534, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.78556883, 0.1992011, 0.16654147, 0.08226319, -0.6985263, 0.37450486, -0.57714295, 1.3222593, -0.094056174, -0.8292586, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.47344473, 0.17903598, 0.20576152, 0.25139642, 0.59265673, 0.60506606, 0.3896137, 0.3543113, 0.12233289, 0.11451837, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.059407394, -0.14287508, 1.0913107, 0.229367, 0.20600833, -0.15564288, -0.15811867, -0.011792039, -0.28102002, -0.98135144, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.3353984, -0.332666, 0.16088292, 0.2829928, -0.016318938, -0.15066396, -0.00027034667, -0.2450607, -0.10056289, -0.23651868, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.31925458, 0.072616614, 0.5256186, 0.30431, -0.5801321, -0.30764773, -0.008944497, 0.18704906, -0.10653391, 0.24058335, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.06674651, 0.025239026, 0.02106572
                );
                result +=
                    intermediate_two[0][0] * float3(-0.123892955, -0.060287017, -0.05568048)
                    + intermediate_two[0][1] * float3(0.60833263, -0.4506781, -0.26307613)
                    + intermediate_two[0][2] * float3(-0.13396011, -0.07656658, -0.0635357)
                    + intermediate_two[0][3] * float3(-0.07994874, -0.020192498, -0.04314062)
                    + intermediate_two[1][0] * float3(0.07258125, 0.4562929, -0.23985805)
                    + intermediate_two[1][1] * float3(0.066633545, 0.06414711, 0.061431665)
                    + intermediate_two[1][2] * float3(0.004068637, 0.10168698, 0.07250272)
                    + intermediate_two[1][3] * float3(-0.049362198, -0.059883937, -0.058425162)
                    + intermediate_two[2][0] * float3(0.14153387, 0.041729964, 0.041446898)
                    + intermediate_two[2][1] * float3(-0.04363268, -0.04886973, -0.04546327);

                return result;
            }
            half3 EvaluateNetwork_Bottom_C_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.122172244, 0.15757626, 0.0, 0.0, -0.19074239, 0.0, -0.029379956, 0.24934658, 0.0, 0.07457927, 0.06333595, -0.19500731, 0.0, 0.2598761, -0.08114809, 0.043160718
                );

                float4 intermediate_one_4 = float4
                (
                    -0.015685761, -0.17991394, 0.0, 0.28397787
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-1.3616161, 0.5938592, -0.46348134, 0.1881425, 0.16766782, -0.5138307, 0.14766559, 0.1651817, -0.9045647, -0.6838343, -1.3379692, 0.7014127, -0.09913394, -0.7662936, 0.0036072254, -0.254743)
                    + f0.g * float4x4(-0.13439836, -0.37160563, 0.22649929, -0.79574597, -0.13007231, -0.061149582, 0.24140143, 0.070347644, 0.07720297, -0.23063527, 0.30781466, 0.4112627, 0.86941344, -0.142197, -0.11465033, -0.07766371)
                    + f0.b * float4x4(-1.267142, 1.2368318, 0.17284235, 0.5521824, 0.16308016, -0.06371774, 0.15657564, 2.431495, 0.5911784, 0.6310037, -1.2311763, -0.66562957, 0.15365984, 1.5761149, -0.40864125, -1.9122092)
                    + f0.a * float4x4(-0.06692345, 0.052164342, 0.527816, 0.21210915, 0.008458386, 0.4714436, -0.41875586, -0.013481121, -0.10612589, -0.05101522, 0.053740595, -0.017681839, 0.7416917, -0.04283026, -0.67415065, -0.029227724)
                    + f1.r * float4x4(0.042600114, -0.20309214, 0.14032899, -0.009128058, -0.13322933, -0.44881627, -0.33264455, 0.19715676, 0.20689763, 0.080701336, -0.11922771, 0.13906649, -0.48672923, -0.09875758, -0.4972472, 0.052184634)
                    + f1.g * float4x4(-0.017067483, 0.14157258, 1.3050503, 0.65755844, 0.049684376, 0.08261935, -0.030445984, -0.124011174, 0.73951864, -0.109254874, 0.107387476, -0.05847903, 0.32686988, 0.075960055, 0.2104239, -0.05139042)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.24422596, 0.23955978, 0.051311567, -0.4043137, -0.23891622, 0.21027829, -0.07482132, 0.4058108, -0.02228675, 0.84655184, -0.12167991, 0.01403086, -0.16866112, 0.52448696, -0.028938625, -0.5615463)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-1.1800039, 0.33616865, 0.17526214, -0.20147912, -0.21340758, -0.037164662, -0.4785588, -0.06860407, -0.6318568, -2.1728044, -0.04073833, -1.4105973, -0.039648447, -0.14609286, 0.10009747, -0.6701711)
                    + f2.b * float4x4(0.22706291, -0.4540506, -0.6516506, 0.38151968, 1.7246232, 0.08917348, -0.36661208, -0.1398973, 0.10808924, 0.61766744, -0.017034201, -0.015132169, 0.48557547, -0.47319424, -0.46524554, 0.30849937)
                    + f2.a * float4x4(-0.66992897, 0.12621959, -0.29335544, -0.4939828, -0.60782474, 0.08136868, 0.32104558, 0.044565108, -0.046388548, 0.089743674, 0.20866436, 0.26148123, -0.24451128, 0.41680014, 0.3051919, -0.31342018)
                    + f3.r * float4x4(-0.029292407, 0.4513556, 0.40375632, 0.3899215, -0.09048655, -0.1727081, 0.021533629, 0.24629126, -0.108878605, -0.059370466, 0.033286076, -0.08187036, 0.58647233, 0.46192127, -0.034969702, -0.16423725)
                    + f3.g * float4x4(-0.0836481, 0.82098466, -0.13698591, 0.08633077, -0.05989831, -0.11588551, 0.4907695, 0.10665035, -0.020086177, -0.06988621, 0.289069, -0.110794924, 0.042721815, 0.14593826, -0.8967823, 0.66874295)
                    + f3.b * float4x4(-0.78150874, 0.10107366, -0.27642944, -0.54856044, -0.48840812, -0.31305373, 0.14273523, 0.27586013, -0.78283244, -0.03612395, 0.09670524, -0.018530639, -0.09185188, 0.39469793, -0.46370947, -0.6400004)
                    + f3.a * float4x4(-0.12279961, -0.330293, -0.29607022, -0.5639299, -0.39637938, -0.19187808, -0.3780356, 0.48520616, -0.59286225, 0.19675004, 0.46162978, 0.31602004, -0.5439443, 0.10034707, 0.38780862, -0.1317222);
                
                intermediate_one_4 +=
                    f0.r * float4(0.44300458, -2.2857392, -0.20957315, -0.21852033)
                    + f0.g * float4(0.080570586, -0.9358551, -0.1571988, -0.7950548)
                    + f0.b * float4(0.3179613, -0.94293475, 0.3518889, 0.20733716)
                    + f0.a * float4(-0.5262404, 0.023400242, 0.12208697, 0.13931645)
                    + f1.r * float4(-0.14066988, -0.0286828, 0.44546178, -0.21016581)
                    + f1.g * float4(0.3774125, 0.026849808, -0.103472136, 0.10808027)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.17897597, 0.09320736, -0.88654417, 0.11008947)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.23740104, -0.5821296, 0.14820568, 0.18360776)
                    + f2.b * float4(-0.07054177, 0.11662749, 0.07934006, 0.30864576)
                    + f2.a * float4(-0.16741917, 0.095814854, -0.08260186, 1.4714698)
                    + f3.r * float4(-0.3067314, -0.6277661, -0.054469984, 0.40679592)
                    + f3.g * float4(-0.08314133, 0.14428957, 0.12001899, 0.56706834)
                    + f3.b * float4(-0.410508, -0.4150592, 0.017975407, 0.21785787)
                    + f3.a * float4(-0.13230245, 0.018762134, -0.32557088, -0.29890156);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.17276166, -0.16440585, -1.1927698, 0.7432481, -0.58962244, -0.25027108, -0.12787935, 0.30883908, -0.072066605, -0.109284624, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.23243181, 0.073818624, 0.41184667, 0.3475465, -0.7370086, 0.9694492, 0.29934746, 0.3094577, -0.085009694, -0.47376215, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.32669395, -0.29418206, 0.20537592, -0.32560936, 0.24399085, 0.095816314, 0.6302863, -0.23450917, 0.15672939, -0.41204783, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.3318059, 0.28110135, -0.0511332, -0.0010711191, -0.20115182, 0.1931409, 0.24626315, 0.027030576, -0.031271745, 0.4764501, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.13798726, 0.55377, -0.07134927, 0.40736577, 0.11804156, 0.31920758, -0.05670032, -0.32531673, -0.51164746, -0.26659602, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.023794735, 0.1968224, 1.2974069, -0.31893936, 0.029419716, 0.001672181, -0.38396373, -0.13446641, 0.03085142, -0.18839322, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.10980661, -0.17607972, -0.5554218, -0.068726026, 0.68879056, -0.4181252, -0.0020447716, -0.19655158, 0.28574622, -0.21580817, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.22502178, -0.09676824, -0.06265378, -0.7861995, 0.6021034, -0.4418075, -0.9044149, 0.22335386, 0.14450917, -0.3869249, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.09715207, 0.0067601763, 0.28192848, 0.032537576, -0.15260427, 0.07928436, -0.11084435, 0.36509132, -0.304256, -0.007333665, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.21203634, -0.21119553, -0.30278754, 0.26169735, -0.60479164, 0.40098637, -0.059508216, 0.10199141, 0.11932534, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.647476, 0.09034513, 0.32565433, -0.1335849, 0.28507116, 0.2304728, 0.40645576, -0.2791494, 0.48747802, 0.46125367, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.47373298, 0.20453754, 0.20574707, 0.2905388, 0.57459277, 0.57166386, 0.3539107, 0.38778666, 0.109226, 0.11928708, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.030501334, -0.14012225, 0.66951245, -0.62505776, 0.4400267, -0.099563286, -0.38040477, -0.14095977, 0.025753042, -0.61395603, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.13295183, -0.022438407, 0.24861443, 0.64850485, 0.35365897, 0.16192798, -0.16937615, 0.4351789, 0.43783316, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.0016022508, -0.27174768, -0.077153705, 0.5211058, -0.34007657, -0.37516305, 0.56489885, -0.35765165, 0.017295498, 0.117471606, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.52293175, -0.0028381927, 0.2690135, 0.26949817, -0.6360942, 0.5457476, 0.36955422, 0.035096023, -0.031959143, 0.030526288, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.031894594, 0.10579246, 0.033554245
                );
                result +=
                    intermediate_two[0][0] * float3(-0.40918583, 0.0606088, 0.13836166)
                    + intermediate_two[0][1] * float3(0.5490607, -0.4056024, -0.22736456)
                    + intermediate_two[0][2] * float3(-0.08083474, -0.06609127, -0.06736078)
                    + intermediate_two[0][3] * float3(-0.08055756, -0.08665554, -0.084348224)
                    + intermediate_two[1][0] * float3(-0.041655242, -0.034231376, -0.04484125)
                    + intermediate_two[1][1] * float3(0.10183538, 0.13805223, 0.115549184)
                    + intermediate_two[1][2] * float3(0.053332567, 0.13584672, 0.042889655)
                    + intermediate_two[1][3] * float3(0.0009149558, -0.11453121, -0.03062847)
                    + intermediate_two[2][0] * float3(0.08930046, -0.045606207, 0.048920467)
                    + intermediate_two[2][1] * float3(-0.052958246, -0.59929454, 0.27392516);

                return result;
            }
            half3 EvaluateNetwork_Bottom_R_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.036972173, 0.065834105, -0.018931275, 0.0, -0.10006277, 0.06006704, 0.0, 0.30681813, 0.0, -0.042376798, -0.073731825, -0.040900696, 0.0, 0.013833366, -0.055063624, 0.060559332
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, 0.016927857, 0.0, -0.05029178
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.2536372, 0.4994192, -0.4379933, 0.1881425, -0.21510352, -1.1994573, 0.17986512, 0.3531221, -0.9045647, 1.6732788, -0.16319497, 0.51058066, -0.09913394, -1.3115183, 0.063082725, 0.07726523)
                    + f0.g * float4x4(0.024744675, -0.2798678, 0.24543005, -0.79574597, -0.22077209, -0.121218055, 0.21202193, 0.012860427, 0.07720297, -0.1136845, 0.44489002, 0.25714642, 0.86941344, 0.103837766, -0.14073603, -0.09506122)
                    + f0.b * float4x4(-0.6762223, -0.87350565, 0.19618723, 0.5521824, -0.0009330483, 0.0007901951, 0.12867361, 2.0723743, 0.5911784, -0.42914268, -0.10895432, 0.42808768, 0.15365984, 1.2729771, -0.43662333, -1.6253963)
                    + f0.a * float4x4(-0.20041086, -0.016957413, 0.5100519, 0.21210915, -0.0018038083, -0.030840952, -0.44909367, 0.018409891, -0.10612589, 0.033522587, 0.016979853, -0.11423745, 0.7416917, 0.0886171, -0.7009988, -0.010002053)
                    + f1.r * float4x4(0.08479838, -0.2952229, 0.11584234, -0.009128058, 0.06855487, -0.043185364, -0.30746773, -0.070617214, 0.20689763, -0.04898333, 0.013685024, -0.17435576, -0.48672923, 0.049317095, -0.4890883, -0.17369507)
                    + f1.g * float4x4(-0.226223, 0.11225342, 1.3105959, 0.65755844, -0.04331968, 0.053320207, -0.058393363, 0.07972008, 0.73951864, -0.021742241, -0.0010005313, 0.5502013, 0.32686988, -0.10573182, 0.19123052, 0.05680971)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.08507246, 0.14780931, 0.03238053, -0.4043137, -0.1482266, 0.27033752, -0.04544129, 0.46324727, -0.02228675, 0.72962266, -0.2587358, 0.16814189, -0.16866112, 0.2784576, -0.0028537274, -0.54415417)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.14901263, 0.7246911, 0.14727752, -0.20147912, -0.08575934, -0.15843299, -0.5040082, 0.043824323, -0.6318568, 0.24932359, 1.5170064, -0.1581646, -0.039648447, 0.0871531, 0.13635962, 0.084277526)
                    + f2.b * float4x4(0.22414292, -0.34464917, -0.6683577, 0.38151968, 1.4378811, -0.28387415, -0.3436394, -0.44710597, 0.10808924, 0.04086394, -0.40636894, 0.13037637, 0.48557547, -0.20469537, -0.44157234, 0.2834085)
                    + f2.a * float4x4(-0.19523315, 0.5640297, -0.26809302, -0.4939828, -0.37435913, -0.37331498, 0.29598776, 0.21550325, -0.046388548, -0.14562495, 0.04426647, 0.009391617, -0.24451128, -0.0013345471, 0.2833083, 0.24339646)
                    + f3.r * float4x4(-0.18843584, 0.35963273, 0.38482726, 0.3899215, 0.00017443667, -0.112638414, 0.05091197, 0.30379042, -0.108878605, -0.17629677, -0.103780344, 0.07221879, 0.58647233, 0.21589394, -0.008884778, -0.14682819)
                    + f3.g * float4x4(-0.24279113, 0.7293083, -0.1559154, 0.08633077, 0.030763103, -0.05581695, 0.52014667, 0.16415548, -0.020086177, -0.1868092, 0.15200579, 0.043292485, 0.042721815, -0.10009296, -0.87069875, 0.68608713)
                    + f3.b * float4x4(-0.9406591, 0.009341547, -0.2953585, -0.54856044, -0.3977589, -0.2529888, 0.17211306, 0.33336112, -0.78283244, -0.15304337, -0.04035329, 0.13556091, -0.09185188, 0.1486787, -0.43762586, -0.6226562)
                    + f3.a * float4x4(-0.28194088, -0.42201397, -0.31500044, -0.5639299, -0.3057376, -0.13181502, -0.34865677, 0.5426796, -0.59286225, 0.07979345, 0.3245544, 0.47013503, -0.5439443, -0.14569946, 0.4138924, -0.11432888);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.0002828573, -0.20957315, -0.12418424)
                    + f0.g * float4(0.06488515, -1.132639, -0.1571988, -0.46074402)
                    + f0.b * float4(0.3008439, 1.736299, 0.3518889, 0.10543565)
                    + f0.a * float4(-0.5425608, -0.021378562, 0.12208697, -0.53302294)
                    + f1.r * float4(-0.12611742, -0.034615587, 0.44546178, 0.4035509)
                    + f1.g * float4(0.3637557, -0.0005627666, -0.103472136, -0.09801677)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.29003745, -0.88654417, -0.22417077)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 0.15876481, 0.14820568, -0.16108759)
                    + f2.b * float4(-0.05775499, 0.32002708, 0.07934006, -0.40928724)
                    + f2.a * float4(-0.1836326, 0.26950303, -0.08260186, 0.14420103)
                    + f3.r * float4(-0.29104778, -0.43095002, -0.054469984, 0.072571345)
                    + f3.g * float4(-0.06745626, 0.3410887, 0.12001899, 0.23282053)
                    + f3.b * float4(-0.3948244, -0.21821669, 0.017975407, -0.11636952)
                    + f3.a * float4(-0.11661739, 0.21560346, -0.32557088, -0.6331782);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.11597046, -0.04648027, -1.075295, 0.012449271, 0.39033172, 0.061259694, -0.022074422, 0.42020652, -0.06406471, -0.60644025, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.07062966, 0.29647797, 0.1204093, 0.13036819, -0.69260526, 0.5478014, -0.13911459, 0.19181426, -0.14569457, -0.43118075, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.4050339, -0.21303202, 0.7220191, -0.14204092, -0.7105768, 0.22974864, 0.14425826, -0.42173845, 0.34478107, 0.16114041, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.24243183, 0.08065918, -0.58321154, -0.25894052, -0.4145042, 0.5128082, 0.34393522, -0.10266181, 0.036363572, 0.23065054, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.33410075, 0.29903933, 0.5089726, -0.07330427, -0.5105129, 0.18992016, 0.05474384, -0.28518918, 0.09183189, -0.21240829, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.76794, -0.30563685, 0.39968026, -0.053730827, 0.3462682, 0.024254706, 0.018691521, -0.09740923, 0.017712358, 0.5553474, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.12515555, 0.5577384, -0.07134927, 0.38385752, 0.13159889, 0.33938965, -0.0367086, -0.34538528, -0.49549398, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.16192989, 0.105803035, 0.678587, -0.04528592, -1.2333922, 0.44706535, 0.12365337, -0.5886867, 0.015258683, -0.51525223, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.094090134, -0.047434177, -0.1857752, 0.3259503, 0.45018116, -0.23204586, 0.5327843, 0.19057454, -0.28511694, 0.25298902, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.13698263, 0.057635132, 0.06688955, 0.30231732, 0.40220562, 0.110959224, -0.0439171, 0.21766388, -0.2194694, -0.31206906, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.0037244179, 0.10198165, 0.0977611, -0.11250315, 0.43044144, -0.042746708, 0.4180047, -0.4248824, 0.124318145, 0.07687005, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.21203634, -0.21119553, -0.30278754, 0.26169735, -0.60479164, 0.40098637, -0.059508216, 0.10199141, 0.11932534, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.7302156, 0.20379783, -0.24431902, -0.21392705, -0.15774143, -0.5186668, -0.1275904, 0.5813263, 0.71736526, 0.054105, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.47922903, 0.18755877, 0.20756716, 0.25779024, 0.45297813, 0.59781736, 0.381348, 0.36993036, 0.119267024, 0.11121668, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.030655082, -0.10687478, -0.3949458, 0.08351821, 0.20290732, -0.054382965, -0.17524213, 0.21553147, -0.26031455, -0.07034157, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.1418437, -0.21009362, -0.06411571, 0.07605623, 0.46919128, -0.499668, 0.19406661, 0.49149147, 0.14734349, 0.82091606, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.39643586, 0.23199706, -0.07961566, -0.045839578, -0.5969441, -0.05265799, 0.28187928, 0.25330684, -0.10102076, 0.1461953, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.057380076, 0.0008530219, 0.013087954
                );
                result +=
                    intermediate_two[0][0] * float3(-0.42499793, 0.056998815, 0.14479728)
                    + intermediate_two[0][1] * float3(0.6077184, -0.47283608, -0.27328607)
                    + intermediate_two[0][2] * float3(-0.050482407, 0.066863395, -0.04437175)
                    + intermediate_two[0][3] * float3(-0.040597755, -0.05273913, -0.07386806)
                    + intermediate_two[1][0] * float3(0.043828405, 0.055150807, 0.036005355)
                    + intermediate_two[1][1] * float3(-0.030341564, 0.10455063, 0.026455484)
                    + intermediate_two[1][2] * float3(0.04876998, 0.13600858, 0.081203096)
                    + intermediate_two[1][3] * float3(-0.1571402, -0.10416137, -0.09039799)
                    + intermediate_two[2][0] * float3(0.10736269, 0.11551984, 0.06277275)
                    + intermediate_two[2][1] * float3(0.11135279, -0.012687552, 0.036176346);

                return result;
            }
            half3 EvaluateNetwork_Bottom_R_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.110408865, 0.13421726, 0.1340226, 0.28071716, 0.19892298, 0.016230762, -0.22927931, -0.031702254, 0.1610978, 0.13911308, -0.09011452, -0.057408627, -0.0951582, -0.054995753, 0.20314366, 0.2052831
                );

                float4 intermediate_one_4 = float4
                (
                    -0.2378071, -0.22854611, -0.1972804, -0.08447654
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.42626768, 0.7259011, -1.9514855, 0.22528127, 0.13140371, 0.13722569, -0.0715186, -0.011579653, 0.23187983, -1.6292256, -0.23243017, 1.3202226, 0.35861352, 0.4774472, 0.058139738, -0.1089265)
                    + f0.g * float4x4(0.24080707, 0.1089431, 0.0032148992, -0.1250716, -0.11813201, 0.1974943, 0.15725955, 0.026420249, 0.24299777, 0.06046705, 0.22797783, 0.21263029, -0.2549271, -0.09300828, -0.17234603, -0.3480909)
                    + f0.b * float4x4(-0.6675207, 2.0039792, -0.5283622, -0.20707183, 1.8772407, 0.09509206, 0.053669512, -0.01662176, 0.044849742, -0.8042128, -1.5325497, -0.25607288, 1.3157533, -0.19264236, 1.2134669, -0.026547972)
                    + f0.a * float4x4(0.0073042507, 0.0018672246, 0.096289665, 0.2553219, 0.0048503876, 0.20101199, 0.006227374, 0.047544856, 0.076338485, -0.065466024, 0.039241955, -0.026116738, 0.023271907, 0.006955238, -0.007963152, 0.016550742)
                    + f1.r * float4x4(0.026823942, 0.018651368, -0.14490874, -0.7296649, -0.11346289, -0.06576538, 0.07043767, -0.08586777, -0.24295124, 0.11196081, -0.2920716, 0.061300322, -0.038710482, -0.024139402, 0.043017257, -0.042223416)
                    + f1.g * float4x4(0.028149005, 0.016212814, 0.103056066, 0.5001546, 0.08785036, 0.008686751, -0.15698925, 0.059661303, -0.14608449, -0.10628093, 0.21481337, -0.074182406, -0.0008387861, -0.010247473, -0.04828559, 0.0357807)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.026573066, 0.38240093, 0.29504743, -0.11925872, 0.2431063, -0.1004788, -0.1707944, -0.1353426, 0.22788554, 0.20213787, 0.24704903, -0.33584416, 0.23093282, 0.011206051, 0.031594437, 0.18486507)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.97245604, -0.16674119, -0.07915474, -0.15715761, -0.0596823, -0.20299953, 0.17371145, 1.5391861, -0.07890906, -0.08253242, -0.097383894, 1.5159919, 0.80290097, 0.6179071, 0.13438702, 0.18878777)
                    + f2.b * float4x4(0.20702013, -0.41069302, 0.34867856, 1.1892221, -0.115228005, 0.11961317, -0.07079992, -0.30546927, 0.21333593, 0.32639748, 0.030820886, 0.031026049, -0.0051391446, -1.4562985, 0.94010466, -1.726172)
                    + f2.a * float4x4(-0.11883887, -0.2902452, 0.12890682, -0.03385659, 0.13287587, 0.050183475, 0.081471115, 0.80020213, 0.20793904, 0.083148256, -0.3199279, -0.3957054, 0.55899656, -1.0341295, 0.23468539, 0.59895563)
                    + f3.r * float4x4(-0.16005321, 0.29081666, 0.36183813, 0.27515382, 0.36424178, 0.08692542, -0.03529045, 0.27291745, -0.13403858, -0.17983146, -0.16357423, -0.084444426, 0.2566435, 0.06608079, -0.0885637, 0.1554528)
                    + f3.g * float4x4(0.19323118, 0.27462533, 0.15310016, 0.13293561, 0.27037662, -0.06988573, -0.014095902, 0.016619693, -0.09352342, -0.19662131, 0.051973533, -0.06662361, 0.15941165, 0.13965173, 0.32584503, 0.17746843)
                    + f3.b * float4x4(0.2213186, 0.0035466475, 0.41760653, 0.0028572867, 0.3146956, 0.18900877, -0.05082023, 0.06404152, -0.23535402, -0.11532408, -0.05221096, -0.17368585, 0.15904911, -0.13337733, 0.054407343, 0.28498808)
                    + f3.a * float4x4(0.0063543506, 0.030365484, 0.05232544, 0.108152986, 0.24659458, 0.061532825, 0.13107017, 0.14612046, -0.15500563, 0.026099456, -0.14502972, -0.08277195, 0.12431046, -0.11471843, -0.01854927, 0.06279474);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.21929839, -0.04824978, 0.03698927, 0.9183164)
                    + f0.g * float4(0.060459286, -0.109698534, -0.09569588, 0.25090986)
                    + f0.b * float4(-0.11906728, -0.092971265, -0.0845595, -1.2426112)
                    + f0.a * float4(0.01229316, 0.154459, 0.064301014, -0.019116657)
                    + f1.r * float4(-0.15766096, -0.0751974, -0.066839516, 0.05098232)
                    + f1.g * float4(0.046853542, 0.08088711, 0.07516375, -0.00048082817)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.4650509)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.031636983, -0.17695737, -0.21805188, 0.19666506)
                    + f2.b * float4(0.24594566, -0.0939486, 0.12339538, 0.31178555)
                    + f2.a * float4(0.18080056, 0.1198003, -0.21833882, -0.1328055)
                    + f3.r * float4(0.0917792, -0.042660743, 0.028912425, -0.16255318)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, -0.039789345)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.44926378)
                    + f3.a * float4(0.23897246, -0.18271965, -0.20150936, -0.32428452);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.121991634, 0.056151915, 0.12778766, -0.106302954, -0.18318824, -0.057056088, -0.19493788, -0.2707903, -0.49548945, 0.26424104, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.061587323, -0.22041859, -0.14116229, 0.48652926, -0.0573995, -0.014109335, -0.021288155, 0.22761622, 0.51317436, -0.041364316, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.3277705, -0.18353237, 1.21952, 0.26722616, 0.15141647, 0.9435221, -0.029975826, 0.40419418, -0.48099005, -0.16464521, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.08693523, -0.11355074, 0.08022617, 0.063240044, -0.117472276, 0.66937345, -0.08600185, 0.70573133, -1.758277, -0.27651173, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.13805656, -0.17567706, 0.17868541, 0.09357587, 0.14875792, -0.26614496, -0.0696703, -0.009382935, -0.26873112, 0.52975065, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.38584775, 0.03819341, -0.6109848, -0.34532225, 0.1851203, -0.50398064, 0.09229661, -0.53645027, 0.2990241, 0.31465784, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.061188463, 0.10373681, -0.07639878, 0.05062613, 0.04482141, -0.09559036, -0.015035055, 0.03344481, 0.096384525, -0.19137424, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.061428208, -0.077944405, 0.0944807, 0.14437005, 0.12452183, -0.08304594, -0.12007246, -0.2213227, -0.1625917, 0.14703019, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.49099517, 0.10214077, 0.5600949, 0.47669402, -0.0054886853, -0.09019656, 0.10451114, 0.12520115, 0.5610133, 0.46012685, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.20230414, -0.101796575, -0.16151299, 0.10791567, -0.08612345, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.14273168, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.08224275, -0.20483248, 0.42326364, 0.11236192, 0.10100481, -0.115415394, -0.035353567, -0.15286936, -2.526287, 0.3540097, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.17124155, 0.07635895, -0.3818901, 0.018639043, -0.09030866, 0.49806067, -0.2009026, 0.3213697, 0.6953432, -0.4446591, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.6095592, -0.044597097, -0.6600295, -0.043311976, -0.18363774, 0.24393606, -0.1989545, 0.12812854, -0.120486856, -0.51156324, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.13124304, -0.26547894, -0.6209104, 0.11479764, -0.22358043, -0.43421426, 0.13946825, 0.08565322, 0.19938888, 0.10888366, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.6577994, -0.08694346, 0.61749256, 0.19151689, 0.1141921, -0.22669725, -0.2168508, -0.16417938, -0.043934643, 0.42024755, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.30467853, 0.02637372, 0.13039774, 0.02141977, -0.102018565, -0.0726809, 0.03198902, -0.16934285, 0.458592, -0.24159811, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.7182167, 0.038584277, -0.40451956, -0.0015023219, 0.15791619, -0.10027755, 0.016043479, 0.26136485, -0.24117392, 0.12514408, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.19910598, 0.04948717, -0.1471372, 0.11830123, 0.121750996, -0.18170677, 0.170573, 0.091924064, 0.047773615, -0.072256915, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.25350204, -0.19418782, 0.7711156, -0.26187623, 0.14355528, -0.39500752, 0.21601556, -0.2648876, 0.1480595, 0.3861562, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.041023213, 0.030710932, 0.029040221
                );
                result +=
                    intermediate_two[0][0] * float3(0.043217637, 0.13884477, 0.048320174)
                    + intermediate_two[0][1] * float3(0.029235685, -0.18672332, 0.09449147)
                    + intermediate_two[0][2] * float3(-0.07668963, -0.08396466, -0.070785135)
                    + intermediate_two[0][3] * float3(-0.09118513, 0.09239995, -0.05981191)
                    + intermediate_two[1][0] * float3(-0.19316663, -0.05081685, 0.29774678)
                    + intermediate_two[1][1] * float3(0.07825696, 0.19480751, 0.07545448)
                    + intermediate_two[1][2] * float3(0.25430894, 0.25232318, 0.26880404)
                    + intermediate_two[1][3] * float3(-0.019546166, -0.20510948, -0.031428125)
                    + intermediate_two[2][0] * float3(0.016907161, -0.06383597, 0.014285567)
                    + intermediate_two[2][1] * float3(0.08622077, 0.17362109, 0.07352633);

                return result;
            }

            half3 EvaluateNetwork_GEO_NL(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.38762018, 0.065981366, -0.040764417, 0.11317909, -0.14446041, 0.38530096, 0.09098118, 0.27976453, 0.0, -0.11797109, 0.13353561, -0.5521874, -0.5901705, -0.175443, -0.1299531, 0.18770318
                );

                float4 intermediate_one_4 = float4
                (
                    0.42428604, -0.2097998, -0.28126356, -0.06794528
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.4064819, 1.3796376, -0.42236638, -0.19456194, 0.23406953, -0.28947362, 0.69752675, 0.75034463, -0.9045647, 0.75249374, -0.053657643, 0.7427601, 0.36974293, 0.75028896, 0.6467008, -0.30062526)
                    + f0.g * float4x4(-0.50749934, 0.5790924, 0.2693002, -0.41719675, 0.2352272, 0.45881012, 1.2096429, -0.06532139, 0.07720297, 0.51345265, -0.66900724, 0.13063583, 0.33325922, 0.49500686, 0.6182937, -0.34566227)
                    + f0.b * float4x4(-0.8350971, -0.4248635, 0.21398412, 0.6244382, 0.80438936, 0.80656517, -0.26064456, -0.1899308, 0.5911784, -1.0416853, 0.26442033, 0.29767907, -0.58796465, 0.20738152, 0.24310865, -0.56553584)
                    + f0.a * float4x4(-1.3545213, 0.016864127, 0.48756388, 0.59254444, -0.0005629421, 0.4821187, -0.52595013, -1.0650357, -0.10612589, -1.4103497, 0.10386287, -0.80163324, 0.9086709, -0.2101965, -0.3686425, 0.5548404)
                    + f1.r * float4x4(-0.028212862, -0.22936426, 0.10405985, 0.57654583, -0.028853143, -0.48764923, -0.8404637, -0.07398962, 0.20689763, -0.40366507, 0.13657138, -1.0066392, -1.9500705, -1.253938, -0.79310066, -0.013457306)
                    + f1.g * float4x4(0.28521067, -0.035349872, 1.3415343, 0.05197958, 0.031580843, -0.28838888, 0.007442839, 0.2301516, 0.73951864, 0.2208503, -0.22938906, 0.03306818, -0.531486, -0.34328035, 0.89048636, -0.14735526)
                    + f1.b * float4x4(2.0572379, -0.16634943, 0.14655808, -0.79976416, 0.024221405, -0.5173603, 0.46678922, 1.385779, -0.12496567, 2.18225, 0.37105384, 1.2849112, -0.55994064, -0.13091831, 1.1671723, -0.7033169)
                    + f1.a * float4x4(0.008524316, 0.2235864, 0.027770916, -1.3853928, 0.0016108699, 0.82643527, 1.2176763, 0.22896557, -0.02228675, 0.6043495, -0.3103397, 1.7816404, 0.33426198, 1.8118238, 2.428689, -0.40652275)
                    + f2.r * float4x4(-0.77962804, 0.4080938, -0.09699036, -0.17542373, 0.19814688, 0.74271226, 0.12558635, -0.6260095, 0.35317352, -0.46388686, 0.23096167, 0.51304644, -0.13584393, 0.8769213, -0.6177583, -0.05728544)
                    + f2.g * float4x4(-0.7557261, -0.0049376218, 0.13261971, 0.31927797, -0.5609798, 0.14167419, -1.0961882, -1.3008709, -0.6318568, -1.187835, 0.67925817, -0.9233746, -0.17544217, -0.16533914, 1.4859011, 0.5562158)
                    + f2.b * float4x4(-1.8816221, -0.046471562, -0.6868445, -0.2318759, -0.45460415, -0.060870074, -0.57317907, -1.8731606, 0.10808924, 0.9003607, 0.17344242, 0.8793906, 0.032445807, -0.4790698, 0.27314645, -0.08052888)
                    + f2.a * float4x4(0.35940027, 0.057126507, -0.25783283, -0.23782028, -1.884165, -0.16142602, 1.4973054, 0.6319964, -0.046388548, 0.354452, -0.4257472, -0.41588917, 0.17750853, -0.29508284, 1.7700013, -0.37795547)
                    + f3.r * float4x4(0.23613247, 0.35978666, 0.36300912, 0.5031112, -0.044229817, 0.21256357, 0.1418861, 0.27672276, -0.108878605, -0.25190663, 0.10349144, -0.43906698, -0.003647693, 0.026619468, -0.08377882, -0.019699289)
                    + f3.g * float4x4(0.18178117, 0.7294785, -0.17773347, 0.19949652, -0.013636243, 0.26939976, 0.6110886, 0.13707972, -0.020086177, -0.2624166, 0.35928887, -0.46799752, -0.5474169, -0.28936878, -0.94557214, 0.81325865)
                    + f3.b * float4x4(-0.516114, 0.00948481, -0.31717664, -0.435392, -0.44215205, 0.0722184, 0.26309645, 0.30629465, -0.78283244, -0.2286511, 0.16692254, -0.3757214, -0.6819853, -0.040594377, -0.51253575, -0.4954879)
                    + f3.a * float4x4(0.14234154, -0.4218861, -0.33664107, -0.45083374, -0.35007212, 0.19324599, -0.25770575, 0.5152999, -0.59286225, 0.0042179823, 0.5318144, -0.04107541, -1.1338521, -0.3349424, 0.33896214, 0.012757603);
                
                intermediate_one_4 +=
                    f0.r * float4(1.1079732, 0.7280737, -0.15609306, 0.31100917)
                    + f0.g * float4(0.29607472, -0.53680104, -1.1283615, 0.21931808)
                    + f0.b * float4(-0.62503576, 1.268717, -0.6268338, -0.73257244)
                    + f0.a * float4(-0.96654236, 0.16091168, 0.09257825, -0.88445574)
                    + f1.r * float4(-0.10264046, -0.8427143, 0.35030222, 0.6690396)
                    + f1.g * float4(0.28303298, -0.35143366, -0.11223389, 0.5255345)
                    + f1.b * float4(1.1736968, -0.23958936, 0.4860624, 1.1365263)
                    + f1.a * float4(0.151925, 1.4854716, -0.8992249, -0.93452656)
                    + f2.r * float4(-0.5228821, 1.3255473, -0.07120186, -1.6971257)
                    + f2.g * float4(-1.1852645, -0.90567476, 0.7355932, -0.43781424)
                    + f2.b * float4(-1.5570207, 0.81138134, 0.27994815, 0.500129)
                    + f2.a * float4(0.5662681, 0.19694804, -0.53581107, 0.9128203)
                    + f3.r * float4(0.13324633, -0.65768784, -0.33572543, 0.05491049)
                    + f3.g * float4(0.3568283, 0.114385985, -0.16122267, 0.21515006)
                    + f3.b * float4(0.0294713, -0.44493565, -0.26327273, -0.13403712)
                    + f3.a * float4(0.3076107, -0.011140108, -0.606527, -0.65079135);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.32094702, 0.32401654, -0.07399614, 0.47572082, 0.09857701, 0.10747263, -0.15871096, 0.04962858, 0.032495193, -0.061894473, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-1.2037603, -0.17859778, 0.108057074, 0.12713109, -0.074415214, 0.19583182, -0.13872014, -0.070035525, -1.7033955, -0.44957125, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.5011909, -0.35708976, -1.141036, 0.1833437, -0.26703423, 0.16146703, -0.08524454, 0.056103073, 0.16170509, -0.3933626, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.2606742, 0.09334784, -0.5665951, -0.28849685, -0.30694672, 0.55261785, 0.43801618, -0.13305473, 0.02455539, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.44734898, 0.12256613, -0.13415049, -0.32628667, -0.16843024, 0.27983645, -0.06645261, -0.03297644, 0.12907837, -0.108388245, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.55041546, -0.11487384, -0.14611074, -0.0066754934, 0.06873972, -0.40925923, 0.36309317, 0.08875472, -0.5969061, 0.5087068, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.45267186, 0.16694425, -0.65706676, -0.32707912, 0.08091597, 0.210136, 0.14749308, -0.36491126, 0.13399297, -0.23099099, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.24780217, 1.8893152, -0.08832306, 0.24249397, -0.111797, 0.06764234, -0.081995316, 0.13643923, 0.65433514, -0.28188807, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.7937328, 0.23506157, 0.1218977, 0.037053373, -0.0076315496, -0.123483315, -0.14254454, 0.057522397, 1.1223863, -0.15728426, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.7640923, -1.710894, -0.39652383, 0.06603734, -0.034962166, 0.08058832, -0.23010351, 0.013333029, 1.2301711, -0.1454397, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.09566034, -0.24659562, -0.15940833, -0.59757364, -0.21619745, 0.18237372, -0.1103273, 0.6718458, -0.050631255, -0.34729093, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-1.3579192, 1.9405415, 0.10533387, 0.11296709, 0.22839533, -0.09884977, 0.3698232, -0.0007538272, -2.2431195, 0.06539985, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.095242925, 0.2731834, -0.3038798, 0.6499231, -0.6722937, 0.100845724, -0.10309362, -0.21833842, 0.29872686, -0.2729121, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.12629464, -1.8929491, 0.72020495, -0.5152145, -0.24286166, 0.16367719, -0.34716037, 0.19253674, 0.12184043, 0.5001895, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.5022525, 0.4259753, 0.21318537, 1.4448353, 3.7714264, 3.1045394, 0.39159098, -1.042641, -0.9867348, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.24577199, -0.090098135, -0.41251963, 0.22935134, 0.32095107, -0.37577364, -0.4331931, 0.15974301, -0.3172626, -0.6484738, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(1.6273838, -0.21959952, 0.21925098, -0.38384804, 0.26374173, -0.22165701, -0.23020841, 0.060488444, -0.7479909, -1.0211097, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.53499794, -0.04501488, 0.47892398, 0.52985364, -0.21053724, -0.27560842, -0.054107737, -0.006443009, -0.94872135, 0.17715241, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.2001961, 0.11264478, -0.2268468, 0.3143846, -0.009813001, -0.03050655, 0.20642208, -0.39982423, 0.27699324, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-1.3469123, -0.058954105, -0.13385274, 0.013894562, -0.024322983, -0.054548945, 0.23145357, 0.1535798, -2.2389915, 0.11188336, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.18910144, 0.08091775, 0.088508464
                );
                result +=
                    intermediate_two[0][0] * float3(-0.28365868, -0.2994905, -0.3244303)
                    + intermediate_two[0][1] * float3(0.24453658, -0.03846279, -0.05116547)
                    + intermediate_two[0][2] * float3(-0.20159663, -0.11750938, -0.388505)
                    + intermediate_two[0][3] * float3(-0.036765587, -0.04388191, -0.035288148)
                    + intermediate_two[1][0] * float3(-0.07986878, -0.06986892, -0.06827552)
                    + intermediate_two[1][1] * float3(0.047020797, 0.15263262, 0.06112661)
                    + intermediate_two[1][2] * float3(0.122094706, 0.2919595, 0.21030323)
                    + intermediate_two[1][3] * float3(-0.15583436, -0.051541194, -0.065514386)
                    + intermediate_two[2][0] * float3(0.21302633, 0.20629954, 0.22511813)
                    + intermediate_two[2][1] * float3(-0.0028928341, -0.4741538, 0.02448861);

                return result;
            }
            half3 EvaluateNetwork_GEO_NR(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.07794439, 0.24867454, -0.035628963, -0.13447358, -0.45590246, 0.17785195, 0.15894951, -0.042095624, 0.0, -0.38825497, 0.41927177, 0.09265799, 0.07510774, 0.4370897, -0.06871416, 0.19194241
                );

                float4 intermediate_one_4 = float4
                (
                    -0.3878695, -0.19251923, 0.30481258, -0.03764234
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-1.5034144, 1.0525463, -0.4273199, -0.12711462, 0.07441041, -0.5688716, 1.5143709, 0.7103921, -0.9045647, -0.8492208, 0.05939679, -0.034521263, -1.3937795, -0.056273732, -0.062274817, 0.2391403)
                    + f0.g * float4x4(0.2013231, 0.11400813, 0.26155326, -1.6279755, 0.10890475, 0.21820146, -1.0399734, -0.44631624, 0.07720297, 0.68694276, -0.33121884, -0.067161635, 0.11483593, 0.9507835, -0.0947699, 0.7731325)
                    + f0.b * float4x4(0.6087735, -0.33211315, 0.20891169, -0.28955254, 0.42727923, -0.5877006, 2.910905, 1.3460549, 0.5911784, 0.40619138, 0.2901748, 1.2918186, 1.0326004, 1.4201365, -0.41409186, -1.4004899)
                    + f0.a * float4x4(0.6104908, -0.8507388, 0.49365288, 0.06292983, -0.17123093, 0.73882693, -0.45497856, -1.1989431, -0.10612589, 0.76227635, 0.64634436, -0.8072258, 0.38912183, -0.34145558, -0.67458916, 0.709541)
                    + f1.r * float4x4(0.9069636, -0.012538978, 0.09794484, 0.24387309, -0.25459903, -0.77493685, 0.24749076, 0.24943775, 0.20689763, -1.0384641, 0.887947, -0.7835392, 0.70383066, -0.8260465, -0.48824355, 0.6282246)
                    + f1.g * float4x4(-0.083090246, 0.060596127, 1.3375269, -0.15544365, -0.1283335, -0.16662677, -0.10080643, 0.03483401, 0.73951864, 0.89942235, 0.5397711, -0.67211705, -0.2524557, -0.5714404, 0.1807401, 0.75973433)
                    + f1.b * float4x4(-0.22740479, 1.3972514, 0.08466826, -0.8256728, 0.006049935, -1.038887, 0.3292921, 2.5226705, -0.12496567, -1.7711973, -0.9059331, 0.9916301, 0.029475031, 0.35666195, 0.10090561, -0.59536153)
                    + f1.a * float4x4(-1.385509, -0.102628134, 0.045493055, -1.0594832, 0.10867239, 1.0711386, -0.44448113, 0.11918488, -0.02228675, 2.92637, -0.3809091, 0.98563325, -0.8708432, 1.2024815, 0.1863617, -0.46140927)
                    + f2.r * float4x4(-1.1501575, 0.16959623, -0.10130971, -0.015129597, 0.6432719, 0.26921725, 0.4123392, -0.22474857, 0.35317352, -0.76769775, 0.53097785, 1.9555562, -0.5756341, 1.0296654, -0.1565235, -1.8511547)
                    + f2.g * float4x4(-0.697965, 0.49939132, 0.11918563, -0.8861377, 0.07626775, -0.83687514, 0.13923393, -0.6569909, -0.6318568, -1.0631888, -0.16515924, -0.41710892, -0.39957258, -0.10032946, 0.15958968, -0.19056508)
                    + f2.b * float4x4(0.7877199, -0.10331067, -0.68079805, -0.15710594, 0.07235634, 0.6340713, 0.0068031703, -0.445773, 0.10808924, -0.072441116, 0.13223559, -0.42799592, 0.25802818, -0.25028494, -0.47632712, -1.4105681)
                    + f2.a * float4x4(-0.7558618, 0.46222562, -0.26367167, -0.88858473, -2.5198388, -1.8780509, 0.42799765, -0.004231819, -0.046388548, 0.72945225, 0.23134163, -0.44613436, 0.41648355, -0.05868387, 0.29764837, -0.5262359)
                    + f3.r * float4x4(-0.07351711, 0.54246145, 0.36813104, 0.25544652, -0.35567433, 0.005111737, 0.20988211, -0.04513624, -0.108878605, -0.52221495, 0.38921008, 0.20576029, 0.6615387, 0.63912386, -0.022489823, -0.015460572)
                    + f3.g * float4x4(-0.12787694, 0.9121392, -0.17261139, -0.04813581, -0.32508543, 0.061939873, 0.67911035, -0.18477987, -0.020086177, -0.53272426, 0.6449624, 0.17683712, 0.11783382, 0.3231582, -0.8843036, 0.817535)
                    + f3.b * float4x4(-0.8257269, 0.19217958, -0.31205472, -0.6830184, -0.75361645, -0.13523507, 0.33108315, -0.015569905, -0.78283244, -0.4989382, 0.4526265, 0.2691016, -0.01675217, 0.5719405, -0.45123202, -0.49124154)
                    + f3.a * float4x4(-0.16708519, -0.23924047, -0.33166313, -0.69843227, -0.6614536, -0.01408508, -0.18949212, 0.1934497, -0.59286225, -0.26597807, 0.8173756, 0.6035685, -0.4689423, 0.27744508, 0.400772, 0.017037246);
                
                intermediate_one_4 +=
                    f0.r * float4(2.1013355, -1.2196143, -0.2500541, 0.72343767)
                    + f0.g * float4(-0.550759, 0.089002945, -0.35062635, -1.8976908)
                    + f0.b * float4(-0.7415795, 0.25536293, 1.9877554, -0.55901754)
                    + f0.a * float4(-0.4254378, 1.3174613, -0.58734524, -0.48116127)
                    + f1.r * float4(0.25542653, -1.1672592, 1.0511521, 0.6086667)
                    + f1.g * float4(-0.56717795, -0.025257498, -0.39130932, -0.1851215)
                    + f1.b * float4(1.2183981, -2.0245535, 0.6770873, -0.05405609)
                    + f1.a * float4(0.35653102, 1.6955596, -1.8723058, -1.3346308)
                    + f2.r * float4(-0.2938869, 0.81373805, 0.18542889, 0.55244845)
                    + f2.g * float4(-2.2482255, 1.0914689, -0.17381394, -0.93333507)
                    + f2.b * float4(0.0057799346, 0.34440476, -0.3026079, 0.963744)
                    + f2.a * float4(-0.50708365, -0.24788441, 0.018572671, -0.08609749)
                    + f3.r * float4(-0.6789054, -0.6404215, 0.25031763, 0.08522206)
                    + f3.g * float4(-0.45532402, 0.13165425, 0.4248054, 0.24545386)
                    + f3.b * float4(-0.78268427, -0.42767882, 0.32275894, -0.10372234)
                    + f3.a * float4(-0.5045409, 0.006157512, -0.02097189, -0.62054044);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.36243954, -0.17926215, -0.6780432, -1.1971182, -0.13310811, -0.6473487, -1.4031404, 0.16941816, -0.4679092, -0.1343259, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.9162636, 0.2795015, -0.27861124, 0.03778082, -0.34881586, -0.25464192, -0.277552, 0.0014151519, -1.4672188, -0.45257047, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.98472905, -0.3623284, -0.07715624, 0.7640981, -0.48249045, 0.04240359, 0.36121684, -0.030740496, 0.21609785, -0.4552244, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26640105, 0.11849176, -0.57132375, -0.2928964, -0.31084985, 0.5580427, 0.42512548, -0.08182517, 0.036276605, 0.22971769, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.29517397, 0.037889063, 0.21419305, 0.3439814, -0.08682968, 0.006291937, 0.27066937, -0.0407141, -1.0427096, -0.11568855, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.70607525, 0.19170654, -1.106155, -0.14331055, -0.28264353, -0.3309555, -6.6544027, 0.14129834, -7.672166, 0.43062937, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.6929582, -0.6036611, 0.3588311, 0.13500509, -0.12114236, 0.18260193, 0.74742925, -0.049775533, 0.9860075, -0.3248287, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(2.4345362, 0.38589647, 0.14296551, 0.35317984, 0.07779298, -0.05286123, -4.816264, 0.3630908, -3.1490798, -0.2813098, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-1.4616282, 0.19144134, 0.5128035, -0.009061546, -0.39732254, 0.10683836, 0.5821389, 0.039923888, 0.879278, -0.22266766, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-1.5138606, -0.055061728, -0.8686293, -0.10652636, 0.4408587, 2.6978626, 0.37345263, 3.0938022, 1.1891475, -0.16226228, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.042751033, -0.06474256, 0.39736965, 0.27171367, -0.43454957, 0.12190177, 0.2992277, -0.22131898, 0.25002828, -0.41076162, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-1.0772802, -0.050901376, -0.858497, -0.4127583, 0.3840245, -0.03852434, -0.67376757, 0.0045788493, -0.9359402, -0.022329, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.8161899, -0.17148216, -0.50575095, 0.17647934, -0.6922334, 0.26482627, -0.19973987, 0.07990016, -0.073759735, -0.35418996, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.2538849, 0.08283568, 1.1220554, 0.45795888, -0.73175323, 0.3850351, 0.14539744, -0.11560056, -0.6717878, 0.42308086, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.462338, 0.1720151, 0.21318537, 0.48173195, 0.5990944, 0.52055395, 0.30063912, 0.3433979, 0.021572016, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.7797431, -0.19699693, -0.32363287, -0.11192223, 0.34440053, 0.04107989, -0.711256, 0.1497061, -1.8556741, -0.646779, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.721763, -0.15672535, -0.3406643, -0.04071986, 0.22084162, -0.17635038, -0.2603406, 0.01477982, -0.99738145, -0.97728753, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.7038332, -0.20332068, -0.93139106, -0.08290314, 0.05207029, -0.0789347, -0.86499774, -0.027448682, -1.4591159, 0.09805487, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-1.2391931, -0.13923256, 0.2775035, -0.10059473, 0.5023012, 0.25724974, 0.11671381, -0.3356671, 0.11003896, -0.27182594, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-1.9988749, 0.046201, -0.29567, -0.27781016, -0.69147015, 0.06718597, -0.65251803, 0.07056301, -0.84907526, 0.117086865, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.019960161, 0.018784033, 0.015075285
                );
                result +=
                    intermediate_two[0][0] * float3(-0.0087205805, 0.27725732, -0.0138422595)
                    + intermediate_two[0][1] * float3(0.6303334, -0.35258314, -0.2408111)
                    + intermediate_two[0][2] * float3(0.05512191, 0.0420323, 0.059946213)
                    + intermediate_two[0][3] * float3(-0.004047384, 0.09256905, 0.007119001)
                    + intermediate_two[1][0] * float3(0.1630906, 0.4883962, -0.3474742)
                    + intermediate_two[1][1] * float3(0.09668426, 0.04021978, 0.040653184)
                    + intermediate_two[1][2] * float3(0.19498962, 0.16108738, 0.18350053)
                    + intermediate_two[1][3] * float3(-0.044625867, -0.04208499, -0.042935047)
                    + intermediate_two[2][0] * float3(0.2537692, 0.28685832, 0.27512604)
                    + intermediate_two[2][1] * float3(-0.08835291, -0.5578033, 0.29583767);

                return result;
            }