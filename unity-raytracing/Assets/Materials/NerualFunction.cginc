			#pragma exclude_renderers gles
            
            half3 EvaluateNetwork_Glossy(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.27974778, 0.15763792, 0.09894428, 0.92841166, -0.14269353, 0.7683509, -0.29543892, 0.44342536, -0.21329886, 0.5449934, 0.066362955, 0.42715725, 0.09158349, 0.31212518, 0.12417867, 0.3506034
                );

                float4 intermediate_one_4 = float4
                (
                    -0.51164246, -0.22854611, 0.65937215, 0.16902083
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.62523335, -0.43852368, -0.5380837, 1.0971925, 0.3986349, 0.029690485, 2.7055287, 0.4546229, 0.95167303, 0.17740382, -0.12582642, -0.8735248, 1.1940353, 0.033780467, 2.1809866, -2.6283834)
                    + f0.g * float4x4(-0.16877082, 0.6450429, 0.37479478, 0.69823676, -0.90067357, 0.43798736, 0.82630324, -1.3169825, -1.5101767, 0.18525691, -2.9711673, -1.2966353, -1.7056884, 1.0983931, -0.8386803, -0.026081048)
                    + f0.b * float4x4(0.8734585, 1.102756, -0.6676846, 0.1503819, -0.94861305, -0.98615605, 1.3080217, 1.2152283, 0.7174786, 1.1826822, 0.07098826, -0.77545756, 0.36687145, 1.1254324, 2.1173942, 3.0162725)
                    + f0.a * float4x4(0.98328406, 0.9366769, 1.3470182, 0.24619779, -0.081829615, -0.47704574, 0.24456015, 1.1039317, -1.0811458, 0.95412743, -0.59730667, -0.22255991, -0.4910139, -0.4726611, -0.80501467, -0.15398215)
                    + f1.r * float4x4(-0.718711, -1.01992, 0.140452, 0.3651888, 0.2766104, 0.20420395, -0.80047274, 1.6506695, -0.20354345, -0.36479482, 0.8681791, 1.020708, -0.5802397, -0.9768625, 0.46864474, -0.35592458)
                    + f1.g * float4x4(-1.3969957, -0.73839504, 0.5037541, -0.07444609, -0.45166343, -0.3652034, 0.33621424, 0.5533216, -1.3756995, 0.57006717, 0.12727672, -0.01280355, -0.1739258, -0.27591905, 0.030613517, 0.019999374)
                    + f1.b * float4x4(-1.4926206, -1.2954708, -2.055701, -0.12988131, 1.0241597, 0.6564718, -0.10738086, -0.5114798, 1.4168432, 0.43323538, 1.0201283, 0.991732, 0.42529196, 0.69955885, 0.7637018, -0.26433438)
                    + f1.a * float4x4(1.3005823, 1.4010271, 0.1750994, -0.84710604, -1.5422105, -2.32706, 1.5062857, -0.27075619, 1.1225274, -0.30018064, -1.0213562, -1.9357619, 0.7917986, 1.7052624, -1.2174386, 0.23152094)
                    + f2.r * float4x4(1.8776175, 1.2237474, -1.7145035, 0.58539134, 0.36225528, 0.4741258, 0.6055194, 0.17018168, 1.3329688, 1.7897066, -0.028626515, -0.24175891, 0.3463724, 0.40857422, 0.3212575, 0.2944899)
                    + f2.g * float4x4(0.6109377, 0.19046131, 0.22613044, -1.7055207, 0.7564381, 0.1736829, 0.94933957, -0.30869964, -0.633294, -0.41601408, 1.4713799, 1.4744271, 0.24853389, -0.038564917, -0.88745826, -0.121935636)
                    + f2.b * float4x4(-0.06692693, -0.024248486, -0.9004438, 0.41978306, 0.19883193, -0.2779498, -0.21974252, 0.18065034, 0.87060314, 1.1113378, 0.018412715, -0.4203309, 0.68034405, 0.05483186, 0.34200144, -0.23005769)
                    + f2.a * float4x4(-1.0023651, -0.26467717, 1.0031179, 0.23309414, -0.5202257, 0.36479387, 0.8509292, -0.13099009, 1.3084409, -1.3960443, -0.9745658, -0.58379227, -0.54496855, 0.3949541, -0.5685864, 0.020989958)
                    + f3.r * float4x4(-0.5502171, 0.31425595, 0.32676986, 0.9228617, 0.022654237, 0.83904016, -0.10145794, 0.74793273, -0.50843704, 0.2260654, -0.0070974827, 0.40008962, 0.44338086, 0.43320963, -0.16755171, 0.30075473)
                    + f3.g * float4x4(-0.196904, 0.29804364, 0.11804221, 0.78069484, -0.07123286, 0.68223035, -0.080257975, 0.4917392, -0.46793386, 0.2092792, 0.20844652, 0.4179039, 0.34615195, 0.5067877, 0.24683061, 0.3227631)
                    + f3.b * float4x4(-0.16882685, 0.026979027, 0.38254797, 0.65061355, -0.02691083, 0.9410984, -0.11698552, 0.5391621, -0.6097709, 0.29056138, 0.10426214, 0.31083617, 0.34579045, 0.23372284, -0.024581611, 0.43027052)
                    + f3.a * float4x4(-0.38374576, 0.053741567, 0.017235396, 0.7557486, -0.09500977, 0.8134896, 0.06486689, 0.6210889, -0.5295033, 0.4318618, 0.011423199, 0.401776, 0.3110084, 0.2522206, -0.09773276, 0.20785403);
                
                intermediate_one_4 +=
                    f0.r * float4(0.5312796, -0.04824978, 1.4851754, -0.66775143)
                    + f0.g * float4(-0.33186248, -0.109698534, 0.1645952, -1.0012023)
                    + f0.b * float4(-0.93177605, -0.092971265, 0.21319322, -1.579849)
                    + f0.a * float4(0.63919395, 0.154459, -1.1254725, 0.76525575)
                    + f1.r * float4(0.55603445, -0.0751974, 1.1381222, 0.90158343)
                    + f1.g * float4(-0.4341185, 0.08088711, 0.34632945, -0.24231501)
                    + f1.b * float4(0.84260565, 0.032370985, 0.873757, -1.0577971)
                    + f1.a * float4(0.72215635, -0.0305309, -1.8069229, -1.9084709)
                    + f2.r * float4(-2.020132, 0.015095115, -0.41452605, 0.06628572)
                    + f2.g * float4(-0.9005269, -0.17695737, -1.5132848, 0.75969005)
                    + f2.b * float4(-1.3084109, -0.0939486, -0.55326056, 0.22276571)
                    + f2.a * float4(1.2931174, 0.1198003, -0.055046607, 0.98404753)
                    + f3.r * float4(-0.18206467, -0.042660743, 0.8855715, 0.090907015)
                    + f3.g * float4(-0.41697016, 0.051097125, 0.6349245, 0.21369316)
                    + f3.b * float4(-0.406022, -0.129855, 0.6774949, -0.19577265)
                    + f3.a * float4(-0.034835637, -0.18271965, 0.65501356, -0.07082682);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.5228423, 0.0884043, 1.0540688, -0.42533463, -0.24262099, -0.2373058, -0.25310475, -0.22114316, -0.1666369, 1.0656914, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.37852776, -0.19063768, 0.03387963, 0.20077361, -0.11142563, 0.054143265, -0.021288155, 0.092358075, 0.025896898, -1.2527595, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.56175226, -0.18912183, -0.78269917, -0.24871276, 0.09348398, -0.004905603, -0.029975826, -0.21240298, 0.00853949, 0.08272206, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.06469161, -0.08180137, -1.0327679, -0.020927701, -0.12611845, 0.016881863, -0.12152923, 0.15379994, -0.17037272, -0.5898991, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.12902497, -0.16059119, -1.6581365, 0.023786198, 0.08692306, -0.051706664, -0.13930316, -0.1903462, -0.009604194, 0.5295926, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.047299236, 0.025076801, 0.20796633, -0.388052, 0.16302846, -0.045384143, 0.07375011, -0.18687415, -0.13201074, -0.30377308, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(1.136411, 0.017702121, 0.5915708, -0.05662385, -0.011047432, -0.121155925, -0.07671786, -0.028236166, 0.04449281, 1.6255848, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(1.4923248, -0.09464898, 0.38187504, 0.11962037, 0.12452183, -0.08304594, -0.123673975, -0.228064, -0.1829515, -0.55338883, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.6537854, 0.09287614, 0.8448134, 0.051943667, -0.06515595, -0.056235295, 0.059580747, 0.09599327, 0.1222159, 0.76306534, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.33580595, -0.11755539, -0.03557524, 0.020021563, -0.08612345, 0.18248306, -0.045771696, 0.13866562, 0.051156424, -1.1454363, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.26296937, -0.1624375, -0.00089306815, 0.018542001, 0.03674654, 0.13430409, -0.09678763, -0.048461586, -0.20654058, -0.7790094, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.5805747, 0.023460586, -1.4501377, -0.7441697, -0.1059669, -0.21986315, -0.2617173, -0.09294951, -0.058782782, 0.61621755, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.8142063, -0.021408487, 0.12859789, 0.94883776, -0.22561148, 0.113298155, -0.2296329, -0.09547351, -0.08350967, -1.368294, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.26495197, -0.24216728, 0.7277547, 0.6960766, -0.26322803, -0.1931365, 0.089743055, 0.14788662, -0.17808194, -0.21687618, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8552655, -0.14319663, 0.077533334, -0.02824823, 0.051554576, 0.17745997, -0.23219144, -0.13503304, 0.102968104, -0.38707784, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.12100886, 0.0014485238, 0.7961243, 0.030344082, -0.11036756, -0.08890046, 0.0019469339, -0.13930495, -0.15870881, 0.55530465, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.47665393, 0.0876844, -8.726392, -0.19071862, 0.096390665, -0.19175667, 0.016043479, -0.002177067, -0.16997981, -0.48254853, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.20197046, 0.015644232, 0.029220754, 0.045799483, 0.08042438, -0.18170677, 0.102510065, 0.033161465, -0.0001321381, -0.74821526, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.33912367, -0.22087713, 0.14834721, 0.026195051, -0.2543545, -0.07191727, 0.12553762, 0.0006579243, 0.022909846, -1.9096352, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.42613328, -0.21623595, 0.016755436, 0.028464958, 0.102092676, 0.07980112, 0.18021098, -0.048065476, 0.12057293, -1.8179938, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.30672234, -0.02006384, 0.034511738
                );
                result +=
                    intermediate_two[0][0] * float3(0.025645742, 0.058818743, 0.033868544)
                    + intermediate_two[0][1] * float3(0.0113567915, -0.21333003, 0.09581385)
                    + intermediate_two[0][2] * float3(-0.008002264, 0.20448267, -0.040264867)
                    + intermediate_two[0][3] * float3(-0.17945991, 0.016673684, -0.018094076)
                    + intermediate_two[1][0] * float3(-0.15206075, -0.07767828, 0.2818064)
                    + intermediate_two[1][1] * float3(-0.17138837, 0.09917551, -0.06352247)
                    + intermediate_two[1][2] * float3(0.20135954, 0.2528443, 0.18366769)
                    + intermediate_two[1][3] * float3(0.15056933, -0.06142302, -0.04860787)
                    + intermediate_two[2][0] * float3(-0.05600887, -0.18881513, 0.07157786)
                    + intermediate_two[2][1] * float3(0.1427773, 0.14409178, 0.15943891);

                return result;
            }
            half3 EvaluateNetwork_Glossy2(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.124835365, 0.2744201, -0.035812, -0.5528337, -0.42036283, 0.41009787, -0.026327226, 0.8250126, 0.0, 0.17897528, 0.5271993, -0.4690421, -0.032361362, -0.1456091, 0.06038358, 0.4873036
                );

                float4 intermediate_one_4 = float4
                (
                    -0.8291943, -0.5121888, 0.37346795, -0.025601001
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.1139203, 1.5957116, -0.4269074, -0.15120724, 0.49939325, 0.35820222, 0.5104763, 0.20288828, -0.9045647, 0.004784063, -0.8562756, 0.40879, 1.0184894, 0.16574754, -0.16554905, 0.9457372)
                    + f0.g * float4x4(0.05763979, 0.552124, 0.26827818, -0.7857624, -0.31627434, -0.674345, -1.0211048, 1.3368307, 0.07720297, 1.2619812, -1.4490612, 0.21028362, -0.0033055206, 1.3237056, 2.9540188, 0.96065015)
                    + f0.b * float4x4(-0.24010393, -0.9769839, 0.20942378, 0.88270926, 0.33048716, -0.9536508, 0.08027137, 3.1831284, 0.5911784, 0.016981322, -0.67628986, 0.7935306, 1.5433974, -0.55443686, -1.3175954, -1.3186891)
                    + f0.a * float4x4(-0.39824757, -0.74145055, 0.4978046, 1.4720026, -0.8189496, 0.85909146, -0.46713924, 0.027803117, -0.10612589, 0.58484316, 0.17947295, -0.5724627, 2.6715736, -0.3083207, -0.2436942, 0.9030309)
                    + f1.r * float4x4(-2.5712147, 0.2952262, 0.078795426, -0.38996977, -0.29721415, 0.40516463, -0.1994051, 0.039936844, 0.20689763, -0.89507073, 0.965256, -1.3656269, -0.6986409, -0.83963525, -1.1173989, 0.7102589)
                    + f1.g * float4x4(-1.7668626, 0.007077602, 1.3329026, -0.7421967, -1.1427457, 0.10419268, -0.11719786, -0.17684323, 0.73951864, 0.14890668, 0.52743423, -0.6359147, 1.3595024, 0.32201958, 0.30742598, 0.64107853)
                    + f1.b * float4x4(0.04039183, 1.3803793, 0.07954704, -2.7375498, 1.1762992, -1.6585265, 0.78582394, -0.0072497744, -0.12496567, -1.5245905, -0.2794166, 0.9987027, -3.0159466, 1.4346765, 1.1425639, -1.6438214)
                    + f1.a * float4x4(1.1119627, -0.92127794, 0.061351895, 1.1565506, -0.09743931, 0.033188097, 0.07805728, 0.1930328, -0.02228675, 1.5345615, -0.9929418, 2.6179755, -0.13580592, 1.5184863, 1.6552789, -1.7752469)
                    + f2.r * float4x4(2.0919955, -0.49552873, -0.10446404, 1.594141, 2.3781548, 0.9191424, 0.72431934, 0.30295506, 0.35317352, 0.48260024, -0.95220894, 1.4518908, -1.0092446, -0.30537158, 0.13943829, -1.1180273)
                    + f2.g * float4x4(0.0068034893, -0.3570046, 0.13177319, 0.28028584, -0.35911742, 0.25136262, -2.2317455, 0.093000114, -0.6318568, -0.6500456, 2.0943155, -0.67697674, 0.3935441, 0.62368107, 1.9198878, -0.5525646)
                    + f2.b * float4x4(-0.66537714, 0.54305166, -0.6833635, 0.28206086, 1.233819, -0.31807008, 1.9633284, -0.22971188, 0.10808924, -0.056574922, -2.0246446, -0.61382616, -0.13992661, -0.031317208, -0.68308264, 0.013278444)
                    + f2.a * float4x4(0.9187559, -0.75600034, -0.26072443, -1.3339523, -1.692393, -0.094856106, 2.8552892, 0.34459877, -0.046388548, -0.06859376, 0.63140005, -1.3014798, 0.08409798, -0.0032989965, 1.8137906, -1.0969553)
                    + f3.r * float4x4(-0.026644615, 0.56822795, 0.36795098, -0.1628989, -0.32016054, 0.23735304, 0.02458625, 0.8219641, -0.108878605, 0.045027226, 0.49716341, -0.35593718, 0.5540913, 0.056459162, 0.106584065, 0.27989352)
                    + f3.g * float4x4(-0.080998786, 0.93788075, -0.17279066, -0.46648565, -0.28956303, 0.29418156, 0.4938099, 0.6823263, -0.020086177, 0.034517016, 0.75292057, -0.38486406, 0.010333937, -0.25951993, -0.75530386, 1.1128509)
                    + f3.b * float4x4(-0.7789203, 0.21792632, -0.3122348, -1.1013515, -0.7181037, 0.09700972, 0.14577916, 0.85153395, -0.78283244, 0.068275124, 0.56057847, -0.29257205, -0.12422624, -0.010755105, -0.32217366, -0.19585578)
                    + f3.a * float4x4(-0.120340206, -0.21352443, -0.33181113, -1.1166095, -0.62609065, 0.21806659, -0.37495095, 1.0600034, -0.59286225, 0.30103147, 0.9254567, 0.042069774, -0.57654047, -0.30509865, 0.52932394, 0.31235078);
                
                intermediate_one_4 +=
                    f0.r * float4(1.8614044, -1.2202619, -0.1332754, 1.4337949)
                    + f0.g * float4(-1.9436849, -0.16694035, 0.017985037, -0.38693413)
                    + f0.b * float4(-1.1108925, 0.90066516, 0.8835265, -0.67446524)
                    + f0.a * float4(-1.3568757, 0.86162996, -0.0412962, -1.6401339)
                    + f1.r * float4(-1.28719, -1.0331937, 1.2658457, 1.0852817)
                    + f1.g * float4(-0.255314, -0.30407608, 0.43377018, -0.24740323)
                    + f1.b * float4(0.75950915, -1.1505599, 0.034080487, 2.7836976)
                    + f1.a * float4(2.5125852, 2.1212595, -2.7294228, -1.6122059)
                    + f2.r * float4(0.6642514, 0.8179684, -0.67406946, -0.42017952)
                    + f2.g * float4(-1.0421634, 1.1715004, 0.1653986, -1.0772121)
                    + f2.b * float4(-0.11148562, 1.6834023, -0.38191238, 0.3147807)
                    + f2.a * float4(0.100692816, 0.37969866, -0.15962692, 0.63473034)
                    + f3.r * float4(-1.1202703, -0.9600795, 0.3189249, 0.09725165)
                    + f3.g * float4(-0.8966231, -0.18802698, 0.49341875, 0.2575044)
                    + f3.b * float4(-1.2240849, -0.74736935, 0.39137396, -0.0916893)
                    + f3.a * float4(-0.945716, -0.31355846, 0.047534183, -0.60848886);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.29013684, 1.551658, -1.2249426, 0.3969802, 2.3439696, -0.5155576, 0.37640992, 0.69460773, 1.7948093, 1.1671301, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.017147869, 0.13117938, 0.091447, -0.21322381, -0.59372747, 0.07453341, 0.29470426, -0.35083583, 0.9878282, -0.0026903567, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.07769171, -0.7935375, -0.036966372, -0.040421814, -1.3613433, 0.2265773, 0.8281075, -0.36451912, 0.7136369, -0.64195645, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26681954, 0.11012344, -0.5640196, -0.24548383, -0.30199173, 0.5277729, 0.4349173, -0.07784191, 0.041718997, 0.23185967, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.01618374, -0.5865154, -0.5402881, 0.102829486, -1.5569247, 0.0573608, -0.1805244, -0.27803004, -1.5252557, -0.71190983, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.018990226, 0.08230625, 0.32724577, 0.121050656, -0.5975963, -0.08373722, -0.6522828, 0.004504444, -0.9625891, 0.07950289, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.0011589534, 0.115175486, 0.28073004, -0.32198855, 0.44901508, 0.19117886, 0.31817818, 0.04005046, 0.6680844, 0.17411706, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.037747525, -0.16511019, -0.31171405, 0.12631299, -0.013011268, -0.03201006, -0.33416304, -0.070710346, -0.80875486, -3.6646342, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.042154897, -0.005888675, 0.0958405, -0.5330079, -0.030735357, 0.27153045, 0.16307849, -0.09225797, -0.10651391, -0.21005063, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.052664336, 0.38327876, 0.76673186, -0.12949622, -0.3318984, -0.1484067, 0.6698934, 0.3736866, -0.3702651, 0.3981412, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.048261628, -0.24285027, -0.17536497, 0.16818385, -2.0405695, -0.006799095, -0.45564696, -0.10653918, -1.4368681, -0.1750052, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.00829219, 0.033847626, -0.73094726, 0.12207443, -1.1784298, -0.13897347, -0.5762235, -0.07677361, -1.598293, 0.120968446, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.011240466, -0.17287034, -0.86201936, -0.14148852, 0.056730766, 0.09416012, 0.41278195, -0.028661799, 0.7996385, -0.15267853, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.07454315, 0.53948116, 1.5921613, -0.17802109, 0.5687678, 0.28819573, 0.08200025, -0.25372282, -0.24213298, 0.44169796, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(1.6307817, 0.6068252, 0.025280438, -0.394101, 0.5300896, 1.6655396, 0.3898817, -0.3154241, -1.2935271, 0.45117095, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.026509015, -0.09841243, -1.1289479, 0.29412296, 0.45246136, -0.18957087, -1.0516171, 0.10468399, -1.3176912, -0.13527013, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-1.9444028, -0.27688512, 0.054162726, 0.025471235, 0.30813426, 0.097801186, -1.0463965, 0.055802047, -1.8287652, -2.9362202, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.025761006, -0.79371184, -0.60105395, 0.13901828, -3.6839087, -0.04291858, -0.7860959, 0.015845656, -0.93990785, -0.7390833, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.07849462, 0.31154972, 0.65145576, -0.32788375, -0.8496646, 0.101798005, 0.7761248, 0.06296621, 0.41832992, 0.33961302, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-1.038308, 0.4950055, 0.05261931, -0.006160717, -0.31470782, -0.019366827, -0.8105735, 0.10752009, -1.1583675, -0.13457924, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.06654929, 0.0715461, 0.053001426
                );
                result +=
                    intermediate_two[0][0] * float3(0.0059773233, -0.12579736, -0.0043647415)
                    + intermediate_two[0][1] * float3(0.08666942, 0.0019425432, 0.020875212)
                    + intermediate_two[0][2] * float3(-0.015971866, -0.09675739, 0.0040105744)
                    + intermediate_two[0][3] * float3(-0.05679358, -0.062450845, -0.046654966)
                    + intermediate_two[1][0] * float3(0.2187351, -0.008814962, -0.0052590296)
                    + intermediate_two[1][1] * float3(-0.034854032, 0.11452668, -0.019543676)
                    + intermediate_two[1][2] * float3(0.05231816, 0.06604852, 0.059615236)
                    + intermediate_two[1][3] * float3(0.07137919, -0.014149913, -0.008474532)
                    + intermediate_two[2][0] * float3(0.24660559, 0.22348991, 0.24275166)
                    + intermediate_two[2][1] * float3(-0.08354158, -0.0077110343, -0.034061044);

                return result;
            }
            half3 EvaluateNetwort_Test_LEFT_TOP(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                 float4x4 intermediate_one_16 = float4x4
                    (
                        0.000000000,0.000000000,0.019315623,0.633110702,-0.227442503,-0.054700404,-0.004654981,-0.422453314,-0.422679335,0.376430035,0.185108364,0.067478426,-0.112253152,-0.534473658,0.000000000,0.000000000
                        );

                float4 intermediate_one_4 = float4
                    (
                        -0.025544453,-0.154952884,-0.370600492,0.027784040
                        );

                // weights                
                intermediate_one_16 +=
                      f0.r * float4x4(-0.277078539, 0.609905779, -0.482820809, -0.444996744, 0.099760123, -0.459123135, 0.184520438, 0.733963251, -0.481863439, -0.239236355, -0.440524042, 0.473892033, 0.013123244, 0.273430347, 0.089738429, 0.404739201)
                    + f0.g * float4x4(-0.012227400, -0.214041740, -0.159394205, -0.777001321, -0.256353647, -0.120603338, 0.207366630, 0.101089567, -0.397220016, -0.402837187, 0.277010173, 0.888270438, 0.633427501, -0.078003988, -0.195798978, -0.034502659)
                    + f0.b * float4x4(-0.726069033, -0.323445946, -0.188721746, -0.445884138, 0.415397912, -0.046970967, 0.124018043, 1.089419842, 0.700531483, 0.053346083, -0.571152747, -0.678355157, 0.127586454, 0.832790911, -0.494830430, -1.129513741)
                    + f0.a * float4x4(-0.212598041, 0.040904190, -0.032263681, 0.014288940, -0.030437868, 1.276892900, -0.453745902, -0.359340787, 0.018138837, 0.056919683, -0.396718204, -0.041953471, 0.239953130, 0.542363048, -0.767378390, 0.257953137)
                    + f1.r * float4x4(0.124373354, -0.399443626, -0.004534842, -0.000286938, -0.001878618, -0.106389694, -0.302812994, 0.014510144, 0.009485282, -0.019572983, 0.046149276, 0.042299449, -0.091786638, 0.009773167, -0.435372710, 0.177666962)
                    + f1.g * float4x4(-0.260064393, 0.090057380, -0.001068445, -0.008062040, -0.035324786, -0.073198870, -0.053740565, 0.012066331, -0.002967491, -0.009869737, -0.016131610, 0.013092794, -0.111728914, -0.015010014, 0.142008618, -0.251850784)
                    + f1.b * float4x4(0.264531642, -0.031294916, 0.138375312, 0.194984704, -0.049728613, -0.503875732, -0.355364949, -0.348072976, -0.547620654, 0.040084336, 0.011401619, 0.169325024, 0.014763337, -0.084001906, 0.136601731, -0.311616063)
                    + f1.a * float4x4(0.122044556, 0.081975900, 0.051311567, -0.404313713, -0.048172325, 0.210278288, -0.045441289, 0.156450793, -0.022286750, 0.772007465, -0.185010180, 0.209042281, -0.168661118, 0.264608532, 0.052209903, -0.604700804)
                    + f2.r * float4x4(-0.270777017, -0.187700167, -0.138956487, 0.212887689, 0.346073657, 0.325137705, -0.186964825, 0.421597779, 0.353173524, 0.234008059, 0.176138997, 0.517386734, -0.225587815, 0.270756751, -0.263392061, 0.027586879)
                    + f2.g * float4x4(-0.117459536, -0.037833728, 0.090401262, 0.284360141, 0.834150732, -0.133541584, -0.508662701, 0.663625836, -0.760918260, -1.767744422, 1.264174104, 1.623435378, -0.819433868, -0.408130288, 0.194434941, -0.151558027)
                    + f2.b * float4x4(0.274710298, -0.218078583, -1.365590930, -0.497260511, -0.020011276, -0.008973682, -0.338984877, -0.307909846, -1.069404483, -0.656790912, 0.194387779, -0.329706222, 1.586455584, 0.143125415, -0.400258005, -0.468192041)
                    + f2.a * float4x4(-0.239512235, 0.279514223, -0.383553922, -1.377795458, -0.600477040, 0.142242134, 0.291342139, -0.680599153, 1.067203999, 0.180316776, -0.755325139, -1.185111880, 0.273912251, 0.043627851, 0.233667478, -0.319544256)
                    + f3.r * float4x4(-0.151464343, 0.293790102, 0.423070908, 1.023084879, -0.127203107, -0.227411225, 0.046257012, -0.425471067, -0.531535447, 0.242468432, 0.155071199, 0.180589110, 0.474203140, -0.332430154, 0.046178464, -0.207396731)
                    + f3.g * float4x4(-0.205819637, 0.663464487, -0.136985913, 0.086330771, 0.130819336, -0.115885511, 0.520146668, -0.142655879, -0.020086177, -0.144451693, 0.225733832, 0.084192403, 0.042721815, -0.113913953, -0.815638959, 0.625572383)
                    + f3.b * float4x4(-0.903691113, -0.056490853, -0.276429445, -0.548560441, -0.297699779, -0.313053727, 0.172113061, 0.026549861, -0.782832444, -0.110688150, 0.033377655, 0.176460400, -0.091851883, 0.134851605, -0.382563829, -0.683170974)
                    + f3.a * float4x4(-0.244970456, -0.487860471, -0.276755631, 0.069193058, -0.433081359, -0.246581212, -0.353311568, -0.186598912, -1.015540361, 0.498590022, 0.583370805, 0.578542948, -0.656229019, -0.694012463, 0.468954653, -0.174885854);
                
                intermediate_one_4 +=
                    f0.r * float4(0.484781981, -0.237765312, 0.161065564, -0.086673155)
                    + f0.g * float4(0.037353333, -0.677317381, 0.543978095, -0.315751404)
                    + f0.b * float4(0.275123984, 0.473210961, 0.253681481, 0.390877515)
                    + f0.a * float4(-0.563414991, 0.176815301, -0.108957015, 0.060163312)
                    + f1.r * float4(-0.098192789, -0.095300242, 0.038146496, -0.025762647)
                    + f1.g * float4(0.387714326, -0.103891887, 0.060164411, -0.011516512)
                    + f1.b * float4(0.256376743, -0.142095417, 0.029001711, 0.460335881)
                    + f1.a * float4(0.194661006, 0.273123473, -0.886544168, -0.173878461)
                    + f2.r * float4(-0.236890242, 0.456795126, 0.076860450, -0.044328995)
                    + f2.g * float4(-0.278048038, -0.163151428, 0.817000985, -1.134492278)
                    + f2.b * float4(-0.029546890, -0.061669320, 0.372887045, 0.665739954)
                    + f2.a * float4(-0.158607557, -0.607943833, -0.168509498, 0.522976041)
                    + f3.r * float4(-0.316591531, -0.602803349, -0.425071955, 0.150643185)
                    + f3.g * float4(-0.067456260, 0.324180484, 0.120018989, 0.283109754)
                    + f3.b * float4(-0.394824386, -0.235143751, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.142161310, 0.043722074, -0.696193576, -0.555102766);
                // relu
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                    (
                        -0.308953434,-0.052998882,-0.009212598,0.593467712,-0.089224346,-0.231772006,0.117040530,-0.027040433,-0.414657295,-0.047731381, 0.0, 0.0
                        );
                // weights
                intermediate_two +=
                    intermediate_one_16[0][0] * float3x4(-0.142733157, 0.342077106, 0.146745697, 0.125952184, -0.274074286, 0.565800488, -0.113547556, 0.085352503, -0.078971073, -0.417732924,0.0, 0.0)
                    + intermediate_one_16[0][1] * float3x4(-0.205786496, -0.195800543, -1.091672301, 0.337522954, -0.358802736, 0.365154803, 0.075811900, 0.078196481, 0.161590800, -0.335328579,0.0, 0.0)
                    + intermediate_one_16[0][2] * float3x4(-0.687977254, -0.041196216, -0.016469602, 0.040123470, -0.397165269, 0.362677544, 0.019636510, -0.201668918, 0.043863520, 0.514008105,0.0, 0.0)
                    + intermediate_one_16[0][3] * float3x4(-0.442093343, -0.201938406, -0.289196104, 0.190439582, 0.047432061, 0.397414982, -0.228797913, -0.049308021, -0.629222393, -0.108179808,0.0, 0.0)
                    + intermediate_one_16[1][0] * float3x4(-0.004674055, 0.184559196, 0.410560995, 0.074638598, -0.225358292, -0.531123698, 0.175679311, -0.746906281, 0.472373635, 0.411745638,0.0, 0.0)
                    + intermediate_one_16[1][1] * float3x4(-0.183721542, -0.080848187, -0.310736090, 0.038380738, 0.271538228, -0.408597112, -0.184734464, 0.062812142, 0.113775983, -0.074596621,0.0, 0.0)
                    + intermediate_one_16[1][2] * float3x4(0.129685596, 0.562332213, -0.066737607, 0.383857518, 0.131598890, 0.334752440, -0.041340020, -0.345385283, -0.500010192, -0.266158164,0.0, 0.0)
                    + intermediate_one_16[1][3] * float3x4(0.266425431, 0.722390950, 0.798777878, -0.479708701, -0.419353604, -0.117643893, 0.313545644, -0.297048271, 0.099153712, -0.345795602,0.0, 0.0)
                    + intermediate_one_16[2][0] * float3x4(0.674421668, 0.092027761, -0.006296922, 0.468586773, -0.374374300, -0.888762593, -0.067481250, 0.436706841, -0.675334632, 0.581989288,0.0, 0.0)
                    + intermediate_one_16[2][1] * float3x4(0.338316828, 0.054602843, -0.179609865, 0.477446109, 0.579418600, -0.094581842, 0.025373515, 0.308042556, 0.223160625, -0.555400252,0.0, 0.0)
                    + intermediate_one_16[2][2] * float3x4(-0.403029472, -0.207633451, -0.718334138, 0.921676278, -0.389921844, 0.005701511, -0.164879337, 0.018998651, 0.209296927, 0.007015751,0.0, 0.0)
                    + intermediate_one_16[2][3] * float3x4(0.873894036, -0.429298967, -0.298451871, -0.840043485, 0.368005157, -0.296421468, 0.005649069, -0.462598264, 0.580625057, 1.146902680,0.0, 0.0)
                    + intermediate_one_16[3][0] * float3x4(0.584933937, 0.074986681, 0.017089482, 0.502127886, -0.666391492, 0.173468530, 0.062235683, 0.066507809, 0.133515462, -0.172587782,0.0, 0.0)
                    + intermediate_one_16[3][1] * float3x4(0.234068602, 0.566841006, 0.840368986, 0.082313158, -0.671876907, 0.029034782, -0.815980732, -0.438625455, 0.051505797, -0.070684679,0.0, 0.0)
                    + intermediate_one_16[3][2] * float3x4(0.457290113, 0.182314843, 0.213185370, 0.222974151, 0.599094391, 0.632278979, 0.417210549, 0.331404239, 0.136314854, 0.112209506,0.0, 0.0)
                    + intermediate_one_16[3][3] * float3x4(0.086495914, -0.070993833, -0.367532641, -0.188349262, 0.475050002, -0.075371794, -0.312334090, 0.304842234, -0.118649781, -0.594971359,0.0, 0.0)
                    + intermediate_one_4[0] * float3x4(-0.130400375, -0.017846864, 0.255278438, 0.637073278, 0.363773495, 0.164058879, -0.167160720, 0.424243718, 0.436762571, -0.966143966,0.0, 0.0)
                    + intermediate_one_4[1] * float3x4(-0.434855908, 0.046739105, 0.168739781, 0.068828508, 0.017495027, -0.406494588, 0.148450419, 0.033615574, -0.389736980, 0.075300395,0.0, 0.0)
                    + intermediate_one_4[2] * float3x4(0.464171946, 0.243045613, 0.258921117, -0.334205210, 0.528970957, -0.103676736, -0.080942951, -0.128745064, 0.244960189, -0.477616608,0.0, 0.0)
                    + intermediate_one_4[3] * float3x4(0.274300754, 0.027124168, -0.092362277, -0.378999174, -0.611713409, -0.281788647, 0.204738721, 0.234390467, 0.459225625, 0.520681202,0.0, 0.0);
                
                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                    (
                        0.067494959,0.002296036,0.000268432
                        );
                result +=
                    intermediate_two[0][0] * float3(-0.083844446, -0.000127336, -0.001585591)
                    + intermediate_two[0][1] * float3(0.495897293, -0.001127203, 0.002801416)
                    + intermediate_two[0][2] * float3(-0.354508311, 0.000571937, -0.002022747)
                    + intermediate_two[0][3] * float3(-0.121012330, 0.000148500, -0.000141867)
                    + intermediate_two[1][0] * float3(0.044369537, 0.566767931, -0.465279043)
                    + intermediate_two[1][1] * float3(0.263306111, 0.482602835, 0.335042536)
                    + intermediate_two[1][2] * float3(0.037219867, 0.016645927, 0.014363898)
                    + intermediate_two[1][3] * float3(-0.050347686, -0.029167837, 0.031616028)
                    + intermediate_two[2][0] * float3(0.137793913, 0.000400788, 0.001535752)
                    + intermediate_two[2][1] * float3(0.066253506, -0.001005057, 0.000023065)
                    ;

                return result;
            }
            half3 EvaluateNetwort_Test_LEFT_BOTTOM(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                 float4x4 intermediate_one_16 = float4x4
                    (
                        -0.049856771,-0.238213629,-0.078147776,0.119626947,0.001876301,0.080997698,-0.275972039,-0.068829745,0.148336798,0.133852616,-0.099892586,0.160095870,-0.247028142,-0.101468921,0.076867364,0.168807849
                        );

                float4 intermediate_one_4 = float4
                    (
                        -0.218956813,-0.228546113,-0.197280407,0.143872052
                        );

                // weights                
                intermediate_one_16 +=
                      f0.r * float4x4(-0.032338154, 0.287323058, -0.072815083, 0.308832943, -0.209269077, 0.072454244, -0.024822973, 0.147035033, 0.255628049, -0.203651473, 0.172385335, 0.106850050, -0.016314138, 0.156704783, 0.214311197, -0.285160482)
                    + f0.g * float4x4(0.134909123, 0.020516565, 0.213380083, 0.013252228, 0.097196862, 0.446601540, 0.181568637, 0.063547999, 0.250923157, 0.216239750, 0.237746090, -0.003164599, -0.161808416, -0.046533406, -0.046035670, -0.061396502)
                    + f0.b * float4x4(0.282868117, 0.265703231, -0.135490358, 0.003591445, -0.150686592, 0.226955786, 0.006909628, -0.087541610, 0.021642501, 0.200371310, -0.169627637, -0.170030639, 0.261187464, -0.102208883, 0.067532517, -0.255291045)
                    + f0.a * float4x4(0.038481224, 0.254140317, 0.051665530, 0.346354216, -0.012212424, 0.099906474, -0.037150342, 0.242628038, 0.053969175, -0.213827655, -0.181640238, -0.099185981, -0.217154175, -0.222868323, -0.004877251, 0.015372426)
                    + f1.r * float4x4(0.005680109, 0.038170569, 0.220524579, 0.647721112, -0.020908663, 0.099797629, 0.028874479, 0.222031564, -0.216026396, -0.089352205, -0.036552906, 0.193852454, 0.016214859, -0.137515426, -0.054131500, -0.060791403)
                    + f1.g * float4x4(-0.026962830, -0.221387863, 0.025904173, -0.176103383, 0.015855320, -0.104979545, -0.107116781, 0.075792640, -0.134681806, 0.135718152, 0.030141562, 0.172688454, 0.023462225, 0.184029847, -0.088847116, -0.159127563)
                    + f1.b * float4x4(-0.390854388, -0.400805682, -0.157300636, -0.136100233, 0.060046259, 0.253011674, 0.002031433, -0.132023871, 0.213033974, 0.016758977, 0.033219129, 0.157087594, 0.166080251, 0.041376859, -0.082989760, 0.249243274)
                    + f1.a * float4x4(-0.020841479, 0.246985167, 0.093650281, -0.211000592, 0.074802250, -0.100478798, -0.170794398, -0.172462136, 0.233379573, 0.231129646, 0.237269938, -0.110651106, 0.127314508, -0.035267770, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.180395275, 0.062183440, -0.154091716, -0.057105869, -0.223544091, 0.234244436, -0.172772020, 0.224692702, 0.153450847, 0.049491167, -0.135883033, -0.006309569, -0.185182631, 0.156177729, -0.024955511, 0.132156163)
                    + f2.g * float4x4(-0.910684645, 0.193584770, 0.145921737, 0.000171517, -0.175015405, -1.001199007, 0.118318751, 0.034632802, -0.091496676, -0.119438946, -0.006770164, 0.027252518, -0.243422806, 0.221919864, 0.166913837, 0.349889547)
                    + f2.b * float4x4(0.398427695, 0.215346307, 0.196035549, 0.079631753, 0.366387844, -0.212577149, -0.109346971, -0.129027098, 0.200427234, -0.522579253, -0.240878284, -0.001680596, -0.124692462, 0.030206472, 0.222746596, -0.137926966)
                    + f2.a * float4x4(0.356167167, -0.314847648, 0.208137363, 0.009978329, -0.674640417, 0.381377220, 0.061822128, -0.096196443, 0.183887631, -0.080018207, -0.103439599, -0.096331134, -0.556208432, 0.133457810, 0.013165179, 0.129981190)
                    + f3.r * float4x4(-0.320313811, -0.081598788, 0.149669364, 0.114058368, 0.167228088, 0.151690394, -0.081983685, 0.235768974, -0.146815896, -0.185090259, -0.173354447, 0.133037120, 0.104802579, 0.019607693, -0.214849710, 0.118984163)
                    + f3.g * float4x4(0.198968023, 0.139191270, -0.048276633, 0.041189998, 0.102083921, -0.069885731, -0.014095902, -0.020508826, -0.088045686, -0.167623699, 0.042194664, 0.158556432, 0.055818647, 0.093182504, 0.205798775, 0.032057106)
                    + f3.b * float4x4(0.227052420, -0.131881922, 0.216221809, -0.088890046, 0.146407366, 0.189008772, -0.050820231, 0.026910633, -0.229876310, -0.086337090, -0.061993241, 0.051490754, 0.055456489, -0.179849595, -0.065615267, 0.139580190)
                    + f3.a * float4x4(-0.153908491, -0.342064798, -0.159847423, -0.052950468, 0.049552765, 0.126297757, 0.084376983, 0.109003872, -0.167766631, 0.020842703, -0.154805154, 0.134729743, -0.027557179, -0.161193222, -0.144839615, 0.026318848);
                
                intermediate_one_4 +=
                     f0.r * float4(-0.238152772, -0.048249781, 0.036989272, 0.082403988)
                    + f0.g * float4(0.066790491, -0.109698534, -0.095695883, 0.158381805)
                    + f0.b * float4(-0.135143206, -0.092971265, -0.084559500, 0.095514625)
                    + f0.a * float4(0.033000443, 0.154459000, 0.064301014, -0.050966136)
                    + f1.r * float4(-0.011876750, -0.075197399, -0.066839516, -0.050561972)
                    + f1.g * float4(0.151581123, 0.080887109, 0.075163752, 0.070044182)
                    + f1.b * float4(0.169474483, 0.032370985, -0.011923730, 0.137322783)
                    + f1.a * float4(-0.151296884, -0.030530900, 0.051655352, -0.233542532)
                    + f2.r * float4(-0.074851990, 0.015095115, -0.069118351, 0.171411872)
                    + f2.g * float4(0.112621821, -0.176957369, -0.218051881, 0.206573293)
                    + f2.b * float4(0.198369756, -0.093948603, 0.123395383, -0.298839837)
                    + f2.a * float4(0.242907375, 0.119800299, -0.218338817, 1.247033238)
                    + f3.r * float4(0.110629909, -0.042660743, 0.028912425, 0.065766320)
                    + f3.g * float4(-0.143145084, 0.051097125, -0.221734822, 0.191681325)
                    + f3.b * float4(-0.132191390, -0.129855007, -0.179149479, -0.217788130)
                    + f3.a * float4(0.257822007, -0.182719648, -0.201509356, -0.095936909);
                // relu
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                    (
                        0.016353335,0.069556773,0.182539552,0.079008676,-0.059970926,-0.207830414,-0.091603756,-0.166074961,-0.126206622,0.112658672, 0.0, 0.0
                        );
                // weights
                intermediate_two +=
                    intermediate_one_16[0][0] * float3x4(-1.074296355, -0.167373016, 0.386697561, 0.248966351, 0.805317938, 0.081158549, -0.541152239, -0.171078846, 0.063506782, 0.433133185, 0.0, 0.0)
                    + intermediate_one_16[0][1] * float3x4(0.068761542, -0.173369497, 0.146837413, -0.053106681, -0.644114316, 0.015845001, -0.419579118, -0.624991119, 0.015340850, 0.222258881, 0.0, 0.0)
                    + intermediate_one_16[0][2] * float3x4(-0.099929132, -0.048662856, 0.131784022, 0.060634024, -0.111706100, 0.043462187, -0.079816774, 0.231246427, -0.159885854, -0.093108304, 0.0, 0.0)
                    + intermediate_one_16[0][3] * float3x4(-0.084099419, -0.116755545, 0.071387120, 0.006383942, -0.092130274, -0.025919452, -0.190123886, -0.197987303, 0.035007685, 0.043520439, 0.0, 0.0)
                    + intermediate_one_16[1][0] * float3x4(0.024506971, 0.021168690, 0.171248555, 0.003721187, 0.214708313, -0.029961944, -0.159445688, -0.132912025, -0.097414374, 0.011099564, 0.0, 0.0)
                    + intermediate_one_16[1][1] * float3x4(0.008526301, 0.053143922, -0.200886294, -0.019692354, 0.150977939, -0.095590368, 0.214948967, 0.104656391, 0.096384525, -1.038539767, 0.0, 0.0)
                    + intermediate_one_16[1][2] * float3x4(0.074097119, -0.077944398, 0.078562886, 0.140984118, 0.133732051, -0.083045945, -0.103515357, -0.124449246, -0.162591696, 0.159257740, 0.0, 0.0)
                    + intermediate_one_16[1][3] * float3x4(0.024110809, 0.171419263, 0.073769450, 0.174364686, -0.005488679, -0.026562020, 0.104511142, 0.158557862, 0.163531393, -0.129601926, 0.0, 0.0)
                    + intermediate_one_16[2][0] * float3x4(-0.194146067, -0.101796575, -0.170794532, 0.116114415, -0.076427266, 0.171292573, -0.035448715, 0.138665617, 0.051156431, -0.133519694, 0.0, 0.0)
                    + intermediate_one_16[2][1] * float3x4(-0.137474626, -0.161844790, -0.068933532, 0.004491183, 0.048324738, 0.164435267, 0.147932589, 0.179252774, -0.189594477, 0.070438348, 0.0, 0.0)
                    + intermediate_one_16[2][2] * float3x4(0.212655932, 0.148246646, -0.180093125, 0.089902818, -0.090308666, -0.208827138, -0.200902596, -0.066733748, -0.053710222, -0.199891552, 0.0, 0.0)
                    + intermediate_one_16[2][3] * float3x4(-0.028599512, 0.021639422, -0.179568499, 0.232517034, -0.172254458, 0.142605662, -0.191891626, -0.087688565, -0.038760602, -0.045959756, 0.0, 0.0)
                    + intermediate_one_16[3][0] * float3x4(0.115543872, -0.258656383, -0.072925746, 0.188623101, -0.126347899, -0.165678516, 0.228389919, 0.350762427, -0.164687797, 0.059162475, 0.0, 0.0)
                    + intermediate_one_16[3][1] * float3x4(-0.100967221, -0.018663734, 0.143309504, 0.153134137, 0.114192098, 0.192575455, -0.216850802, -0.138514906, 0.142076641, -0.009116918, 0.0, 0.0)
                    + intermediate_one_16[3][2] * float3x4(0.051690899, 0.042434990, 0.186783299, 0.111460947, -0.098662123, -0.060472727, 0.037900608, -0.121227153, -0.111311860, -0.120227270, 0.0, 0.0)
                    + intermediate_one_16[3][3] * float3x4(0.039338741, 0.049666960, 0.158218235, 0.169323295, 0.316856474, -0.178130314, -0.093877599, -0.045433894, -0.139435381, 0.032965720, 0.0, 0.0)
                    + intermediate_one_4[0] * float3x4(0.137443602, -0.003600153, -0.157624885, 0.164073735, 0.162826017, -0.181706786, 0.091386259, 0.031889249, 0.047773629, -0.103726625, 0.0, 0.0)
                    + intermediate_one_4[1] * float3x4(-0.148651168, -0.131849140, -0.038328186, -0.153472036, 0.123182446, 0.167284459, 0.081117541, 0.016540959, 0.086045206, -0.054643646, 0.0, 0.0)
                    + intermediate_one_4[2] * float3x4(-0.071795285, -0.118651696, 0.125195920, 0.142030448, -0.210224122, -0.059985936, 0.178726852, 0.047400266, 0.047484338, -0.045170918, 0.0, 0.0)
                    + intermediate_one_4[3] * float3x4(-0.114006303, -0.215286702, 0.072407737, -0.008241551, 0.229792401, 0.108507216, 0.101133801, 0.137122363, 0.165365100, -1.273339748, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                    (
                       0.195066079,-0.061480068,-0.056145601
                        );
                result +=
                    intermediate_two[0][0] * float3(-0.131104186, -0.005640854, -0.002183565)
                    + intermediate_two[0][1] * float3(0.003977802, -0.234030306, 0.075895339)
                    + intermediate_two[0][2] * float3(-0.134651691, 0.009077454, 0.002497680)
                    + intermediate_two[0][3] * float3(-0.191427037, 0.165046081, 0.152304605)
                    + intermediate_two[1][0] * float3(-0.131512582, -0.003447361, -0.002569817)
                    + intermediate_two[1][1] * float3(-0.178550303, 0.096145093, -0.070472136)
                    + intermediate_two[1][2] * float3(0.127511725, 0.116430879, 0.097310454)
                    + intermediate_two[1][3] * float3(0.205943123, -0.087566517, -0.071748734)
                    + intermediate_two[2][0] * float3(-0.100581408, -0.218291014, 0.048644125)
                    + intermediate_two[2][1] * float3(0.174576715, 0.004745511, 0.003519638);

                return result;
            }
            half3 EvaluateNetwort_Test(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                    (
                        -0.243351653,-0.099044107,-0.830881178,0.054768268,-0.231627911,-0.307587385,-0.472843558,-0.379873186,0.112231597,-0.368292212,-0.099892586,0.493526101,-0.908435583,-0.101468921,0.383830726,0.231041521
                        );

                float4 intermediate_one_4 = float4
                    (
                        -1.097296357,-0.228546113,-0.197280407,0.097195983
                        );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.090133660, -0.274064571, -0.794647038, -0.211641535, 0.026129365, 0.390143812, 0.013321908, -0.087889284, 0.174049541, 0.764209867, 0.172385335, 0.430901766, 0.207492068, 0.156704783, -0.330835819, -0.485807776)
                    + f0.g * float4x4(0.512284160, -0.464753151, 0.229054049, 0.042693906, -0.030984242, -0.147503793, 0.302980691, 1.047729850, 0.281507641, 0.060159117, 0.237746090, -0.080194518, 0.218054026, -0.046533406, -0.091129795, 0.515779734)
                    + f0.b * float4x4(0.444551975, 0.089929372, 0.251630485, 0.202650934, 0.289263248, -0.350846529, 0.140395135, 0.214619577, -0.014705582, -0.236414060, -0.169627637, -0.046170514, 0.517105222, -0.102208883, 0.030834140, -0.470572561)
                    + f0.a * float4x4(0.008514652, 0.077607214, 0.030443167, 0.008666858, -0.020545047, 0.004465101, -0.014393608, 0.027706010, 0.099440932, -0.052843135, -0.181640238, -0.013178499, -0.012314741, -0.222868323, 0.004280979, 0.032450262)
                    + f1.r * float4x4(-0.038864456, 0.063988574, -0.006151949, -0.019561686, 0.010151292, -0.008616408, -0.024497986, -0.126027316, -0.260293990, -0.031537071, -0.036552906, -0.016291844, 0.018011205, -0.137515426, -0.024716055, 0.026243880)
                    + f1.g * float4x4(0.010344280, -0.052358091, 0.035914939, 0.012504636, -0.031537231, 0.026463775, -0.049163140, 0.079184070, -0.095652997, -0.072551005, 0.030141562, 0.008781850, -0.027213428, 0.184029847, -0.005812825, -0.049474478)
                    + f1.b * float4x4(-0.037864532, -0.793920219, -0.811802506, 0.090774931, 0.492018074, 0.080555029, -0.123705000, -0.149130926, 0.155814007, 0.822267652, 0.033219129, 0.691931725, 0.007668708, 0.041376859, -0.505273104, 0.416283607)
                    + f1.a * float4x4(0.842789590, -0.716926098, 0.365389854, 0.016712010, -0.010286417, -0.143463686, -0.132727519, 0.979711294, 0.167021349, 1.424766183, 0.237269938, 0.218219861, 0.008793408, -0.035267770, 0.021164456, 0.004738764)
                    + f2.r * float4x4(0.073970899, -0.017462449, 0.404674500, -0.113012902, -0.067020267, 0.156949162, -0.432754010, 0.232849330, 0.197987676, 0.440079451, -0.135883033, -0.061878141, 0.082054220, 0.156177729, -0.144016385, -0.771170795)
                    + f2.g * float4x4(-0.130070776, -0.592359900, -1.915551662, -0.188383400, 0.910359859, -0.035577465, 0.149367824, -0.213462755, -0.034185391, 1.484707117, -0.006770164, 1.050287604, 0.032514002, 0.221919864, -0.844147563, -0.330009282)
                    + f2.b * float4x4(-0.330512643, -0.452585310, 0.031702206, 1.199287057, 0.518376648, 1.346620917, 1.303776383, 1.255462646, 0.161791816, 0.747950256, -0.240878284, -0.533068538, 0.168343127, 0.030206472, 0.429744720, 0.926912665)
                    + f2.a * float4x4(-0.043265861, -0.315447628, 0.348541379, 0.279724985, -0.446131349, 0.493775815, 1.406309485, 0.581241131, 0.107642882, 0.163607121, -0.103439599, -0.544467509, 0.107250653, 0.133457810, -0.083986305, -0.013276340)
                    + f3.r * float4x4(-0.513785779, 0.057575725, -0.603013039, 0.049209632, -0.066261813, -0.236859605, -0.278843492, -0.075260416, -0.182913095, -0.687209308, -0.173354447, 0.466461569, -0.556591570, 0.019607693, 0.092113912, 0.181200340)
                    + f3.g * float4x4(-0.160510346, 0.041373622, -0.811730266, -0.093009293, -0.160145134, -0.393664092, -0.257649213, -0.331539243, -0.142397940, -0.703995824, 0.042194664, 0.484282315, -0.653823078, 0.093182504, 0.506493628, 0.203212976)
                    + f3.b * float4x4(-0.132425025, -0.229690239, -0.547237635, -0.223093405, -0.115820222, -0.134775862, -0.294375598, -0.284116298, -0.284228235, -0.622712791, -0.061993241, 0.377223313, -0.654185295, -0.179849595, 0.235083356, 0.310738653)
                    + f3.a * float4x4(0.229559883, 0.313719243, 0.494196683, -1.046007514, -0.199128240, 1.795072436, -0.083880953, -0.621616542, -0.205258295, 0.435898036, -0.154805154, 0.217972040, 0.380984455, -0.161193222, -1.034352779, -0.001169550);

                intermediate_one_4 +=
                    f0.r * float4(-0.483438849, -0.048249781, 0.036989272, 0.219294012)
                    + f0.g * float4(0.142645881, -0.109698534, -0.095695883, 0.406027615)
                    + f0.b * float4(0.329825342, -0.092971265, -0.084559500, 0.266315401)
                    + f0.a * float4(0.014652522, 0.154459000, 0.064301014, -0.043608513)
                    + f1.r * float4(-0.040116720, -0.075197399, -0.066839516, -0.000764721)
                    + f1.g * float4(0.010179563, 0.080887109, 0.075163752, 0.019595804)
                    + f1.b * float4(-0.314070702, 0.032370985, -0.011923730, 0.704353631)
                    + f1.a * float4(0.122711003, -0.030530900, 0.051655352, 0.085347466)
                    + f2.r * float4(0.233709350, 0.015095115, -0.069118351, 0.271350533)
                    + f2.g * float4(-0.049514569, -0.176957369, -0.218051881, 0.781228364)
                    + f2.b * float4(0.678263545, -0.093948603, 0.123395383, 0.837564945)
                    + f2.a * float4(0.204715699, 0.119800299, -0.218338817, 1.133386612)
                    + f3.r * float4(-0.767587364, -0.042660743, 0.028912425, 0.019096419)
                    + f3.g * float4(-1.002506971, 0.051097125, -0.221734822, 0.141859248)
                    + f3.b * float4(-0.991554797, -0.129855007, -0.179149479, -0.267610162)
                    + f3.a * float4(1.077984571, -0.182719648, -0.201509356, 0.058914654);
                // relu
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                    (
                        -0.469289452,0.051950570,0.438540727,-0.361616641,-0.515877545,-0.290861070,0.122450829,-0.194229722,-0.056353115,0.156357825, 0.0, 0.0
                        );
                // weights
                intermediate_two +=
                    intermediate_one_16[0][0] * float3x4(0.382609606, -0.168969497, 0.016618127, 0.029127052, 0.235415176, 0.001848091, 0.078464396, 0.080377959, -0.129086703, -0.162588805, 0.0, 0.0)
                    + intermediate_one_16[0][1] * float3x4(0.056859344, -0.228913650, -0.010636886, 0.133698449, 0.328171760, 0.015845001, -0.076155715, -0.222969130, -0.149203062, -0.198262051, 0.0, 0.0)
                    + intermediate_one_16[0][2] * float3x4(0.078959085, -0.048662856, 0.487966478, -0.219808459, -0.143795431, 0.043462187, 0.610990286, 0.205095634, 0.406779349, 0.014895434, 0.0, 0.0)
                    + intermediate_one_16[0][3] * float3x4(0.326639622, -0.175560817, -0.262494743, -0.023256749, 0.566461265, -0.079943202, -0.154304400, -0.183610916, 0.249978542, 0.022047451, 0.0, 0.0)
                    + intermediate_one_16[1][0] * float3x4(-0.063391678, -0.028605839, 0.169095412, -0.117006198, 0.256330699, -0.117968902, 0.024128363, -0.187615544, -0.547101557, 0.071844168, 0.0, 0.0)
                    + intermediate_one_16[1][1] * float3x4(0.557472944, 0.040617403, -0.250304073, 0.190484241, -0.644965410, -0.126163289, 0.486431032, -0.002205255, 0.495507836, -0.195139557, 0.0, 0.0)
                    + intermediate_one_16[1][2] * float3x4(-0.122076608, -0.077944398, 0.210811913, -0.215027615, 0.060792867, -0.091303155, -0.523970187, -0.221322700, -0.314635545, 0.072047085, 0.0, 0.0)
                    + intermediate_one_16[1][3] * float3x4(0.463053405, 0.171419263, -0.124136560, 0.093479484, 0.261749953, -0.051500093, 0.261855602, 0.139071375, 0.339840353, -0.128075853, 0.0, 0.0)
                    + intermediate_one_16[2][0] * float3x4(-0.173466608, -0.101796575, -0.076062463, 0.135726988, -0.060943402, 0.171292573, -0.014673850, 0.138665617, 0.032794774, -0.121338129, 0.0, 0.0)
                    + intermediate_one_16[2][1] * float3x4(0.130183712, -0.139738545, 0.071068622, 0.367775202, -0.332456172, 0.104848430, 0.492178530, -0.050674822, 0.271131158, -0.106523134, 0.0, 0.0)
                    + intermediate_one_16[2][2] * float3x4(0.212655932, 0.148246646, -0.180093125, 0.089902818, -0.090308666, -0.208827138, -0.200902596, -0.066733748, -0.053710222, -0.199891552, 0.0, 0.0)
                    + intermediate_one_16[2][3] * float3x4(-0.093680032, -0.047335245, -0.180897266, 0.303191036, -0.205952287, 0.055344839, -0.218299478, -0.070618711, 0.332897246, -0.145073205, 0.0, 0.0)
                    + intermediate_one_16[3][0] * float3x4(0.310660481, -0.240345716, -0.464208603, 0.401400298, 1.281574011, -0.223521262, 0.319202930, 0.174777091, 0.394402444, 0.077298664, 0.0, 0.0)
                    + intermediate_one_16[3][1] * float3x4(-0.100967221, -0.018663734, 0.143309504, 0.153134137, 0.114192098, 0.192575455, -0.216850802, -0.138514906, 0.142076641, -0.009116918, 0.0, 0.0)
                    + intermediate_one_16[3][2] * float3x4(-0.044377372, -0.002653308, 0.095542811, 0.331535429, -0.181082770, -0.060472727, 0.193728253, -0.153528288, -0.037945565, -0.131523505, 0.0, 0.0)
                    + intermediate_one_16[3][3] * float3x4(-0.627208292, 0.034733910, -0.096512236, 0.094846390, -0.149861842, -0.178130314, -0.008235694, 0.003447071, 0.319678009, 0.083218895, 0.0, 0.0)
                    + intermediate_one_4[0] * float3x4(0.084986605, -0.009950403, 0.792003334, -0.347656667, -0.477459699, -0.181706786, 0.721038640, 0.091924071, -0.602382779, -0.250147492, 0.0, 0.0)
                    + intermediate_one_4[1] * float3x4(-0.148651168, -0.131849140, -0.038328186, -0.153472036, 0.123182446, 0.167284459, 0.081117541, 0.016540959, 0.086045206, -0.054643646, 0.0, 0.0)
                    + intermediate_one_4[2] * float3x4(-0.071795285, -0.118651696, 0.125195920, 0.142030448, -0.210224122, -0.059985936, 0.178726852, 0.047400266, 0.047484338, -0.045170918, 0.0, 0.0)
                    + intermediate_one_4[3] * float3x4(-0.242266521, -0.229253173, -0.028774871, 0.319542587, 0.124393433, 0.023073297, 0.375309408, -0.038304541, 0.025921563, -0.259242505, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                    (
                        0.034882255,-0.149866879,0.009905573
                        );
                result +=
                    intermediate_two[0][0] * float3(0.071897998, 0.058389168, 0.069348440)
                    + intermediate_two[0][1] * float3(0.016457461, -0.229738638, 0.076796658)
                    + intermediate_two[0][2] * float3(0.001477500, 0.090716138, -0.051040746)
                    + intermediate_two[0][3] * float3(-0.079803132, 0.256724656, 0.000708378)
                    + intermediate_two[1][0] * float3(0.101281442, 0.075230926, 0.083059959)
                    + intermediate_two[1][1] * float3(-0.188419849, 0.074537486, -0.071987845)
                    + intermediate_two[1][2] * float3(0.134885639, 0.026321433, 0.052041911)
                    + intermediate_two[1][3] * float3(0.032941770, -0.120166115, -0.072707377)
                    + intermediate_two[2][0] * float3(-0.090340376, -0.050738074, -0.061172955)
                    + intermediate_two[2][1] * float3(0.097191773, 0.187415376, -0.016926132);

                return result;
            }
            half3 EvaluateNetwork_Left_0_up(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.014347255, -0.30962992, 0.08720686, 0.30721438, -0.20280845, 0.15149392, 0.15489204, -0.068829745, 0.10593306, -0.34193033, -0.09989259, 0.16483888, -0.5440248, -0.10146892, 0.0831328, 0.34492648
                );

                float4 intermediate_one_4 = float4
                (
                    0.07931089, -0.22854611, -0.1972804, 0.1985603
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.067795545, 0.35875437, -0.23819031, 0.121061146, -0.0044992864, 0.0019381911, -0.45576423, 0.14703503, 0.2980348, 0.2721866, 0.17238533, 0.10215174, 0.28068143, 0.15670478, 0.20804548, -0.4613049)
                    + f0.g * float4x4(0.72371435, 0.124354295, 0.056253776, -0.44088542, 0.19246875, 0.050829984, 0.008677845, 0.063548, 0.985297, -0.008894462, 0.23774609, -0.009978059, -0.3521686, -0.046533406, -0.052334726, -0.14442402)
                    + f0.b * float4x4(0.23831941, 0.8287975, -0.5273912, 0.10819502, 0.35457048, -0.004665667, -0.47271225, -0.08754161, -0.046714418, 0.8105993, -0.16962764, -0.16528223, 0.58939004, -0.10220888, 0.073792666, -0.4300979)
                    + f0.a * float4x4(0.010860236, 0.018361023, -0.07816495, -0.00247401, -2.629721, 0.09293006, 0.03870271, 0.24262804, 0.01976371, 0.023730913, -0.18164024, -0.095969535, 0.16047092, -0.22286832, 0.0009897947, -0.014422393)
                    + f1.r * float4x4(0.003191863, 0.0077799656, 0.023155369, -0.024863021, 0.19104637, -0.00860816, -0.0057866396, 0.22203156, 0.019427262, 0.0014295722, -0.036552906, 0.19889016, -0.041615516, -0.13751543, -0.049144745, -0.037346106)
                    + f1.g * float4x4(0.025710214, 0.007838457, 0.042235103, -0.012684463, 0.3843124, 0.00024377306, -0.010598895, 0.07579264, -0.015055952, 0.0002620349, 0.030141562, 0.16813064, -0.10758322, 0.18402985, -0.095365345, -0.059742864)
                    + f1.b * float4x4(-0.35531816, -0.47220463, 0.008047073, 0.05148995, -0.14464481, 0.3235212, 0.4328942, -0.13202387, 0.1706209, -0.45901838, 0.03321913, 0.1618306, -0.13091716, 0.04137686, -0.07672432, 0.42535844)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.76390684, -0.020809004, 1.374895, 0.01621804, 0.2654466, -1.1028292, -0.20342055, 0.034632802, 0.47581896, -0.0018632574, -0.006770164, 0.030679144, 0.50280625, 0.22191986, 0.17332524, -0.09167356)
                    + f2.b * float4x4(1.8820895, 0.35739496, -0.11335034, 0.66420627, 0.18660103, 0.14653367, -0.18767732, -0.1290271, 1.2805793, -0.0067761526, -0.24087828, 0.0036608926, -0.84341174, 0.030206472, 0.22896466, 0.5965448)
                    + f2.a * float4x4(0.13694051, -0.18838875, -0.59122676, 0.17344366, 0.28310037, -1.7390634, -1.6180598, -0.09619644, -0.029083524, -0.008654426, -0.1034396, -0.093686655, -0.0027983068, 0.13345781, 0.0069237947, -0.12122613)
                    + f3.r * float4x4(-0.2848062, -0.15300523, 0.31500325, 0.3016419, -0.037476633, 0.22218832, 0.34889272, 0.23576897, -0.18922453, -0.6608333, -0.17335445, 0.13778013, -0.19218135, 0.019607693, -0.20858425, 0.2950826)
                    + f3.g * float4x4(0.19896802, 0.13919127, -0.048276633, 0.04119, 0.10208392, -0.06988573, -0.014095902, -0.020508826, -0.08804569, -0.1676237, 0.042194664, 0.15855643, 0.055818647, 0.093182504, 0.20579877, 0.032057106)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(-0.1183987, -0.41346398, 0.0055003273, 0.13465582, -0.15513776, 0.19679606, 0.51522666, 0.10900387, -0.21018064, -0.45493427, -0.15480515, 0.13947275, -0.32453382, -0.16119322, -0.13857415, 0.20243154);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.53643584, -0.04824978, 0.03698927, 0.027694352)
                    + f0.g * float4(-0.0065336516, -0.109698534, -0.09569588, 0.057936)
                    + f0.b * float4(-0.597044, -0.092971265, -0.0845595, 0.046163563)
                    + f0.a * float4(0.11413041, 0.154459, 0.064301014, -1.2570891)
                    + f1.r * float4(-0.020800747, -0.0751974, -0.066839516, 0.0006498034)
                    + f1.g * float4(-0.08126311, 0.08088711, 0.07516375, 0.055672437)
                    + f1.b * float4(0.46772736, 0.032370985, -0.01192373, 0.19201122)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.20563336, -0.17695737, -0.21805188, 0.17112854)
                    + f2.b * float4(-0.017983839, -0.0939486, 0.12339538, 0.08974127)
                    + f2.a * float4(-0.12668575, 0.1198003, -0.21833882, 0.1592969)
                    + f3.r * float4(0.40888944, -0.042660743, 0.028912425, 0.120450415)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.19168133)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.5560969, -0.18271965, -0.20150936, -0.041246224);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.21843703, 0.11514378, 0.2209718, 0.10174925, -0.25844872, -0.22870934, -0.09087118, -0.1946683, -0.17402743, -0.12724635, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.43127254, -0.16821232, 0.06149411, -0.17650673, 0.14254695, 0.06054226, 0.05593385, 0.058351252, -0.06482566, -0.45881227, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.07980106, -0.1791728, -0.84662896, -0.19990776, 0.20071882, -0.0060139885, 0.5786787, -0.23037624, -0.5492259, -0.43877786, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.44838417, -0.051048785, 0.028523121, -0.1459544, -0.07876089, 0.043462195, -0.04231175, 0.19843917, 0.45317236, -0.69339764, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.6697894, -0.11245555, 0.018027859, -0.20712855, 0.15707088, -0.033293247, 0.1807734, -0.16428873, -0.09246556, 0.41158316, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.032071047, 0.05121872, -0.004201181, -0.14726412, -0.00908439, -0.050872054, 0.076285146, -0.17842224, -0.0078008138, -0.0010506518, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.09389479, 0.10373681, 0.004161169, 0.018547451, -0.46304852, -0.11829984, -0.09184153, 0.017986163, 0.047840327, -0.69623286, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.22546162, -0.08166307, 0.2294066, -0.13364007, 0.41895998, -0.10224374, 0.050731815, -0.23242256, -0.077779315, 0.42912084, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.02411081, 0.17141926, 0.07376946, 0.17436467, -0.0054886853, -0.026562018, 0.10451114, 0.15855785, 0.16353141, -0.12960194, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.113500245, -0.101796575, 0.05156965, -0.09667725, -0.3027088, 0.15033503, 0.057770062, 0.13188791, -0.14576504, 0.8761439, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.1651397, -0.13973854, 1.1556678, 0.7693006, 0.7034868, 0.14272085, -1.0082128, -0.028211715, -0.013257861, 0.5567373, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.038980305, 0.021639427, -0.17811558, 0.21243098, -0.18085752, 0.14260566, -0.19631861, -0.03486403, -0.038760606, -0.041986607, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.33274463, -0.21569516, -0.2200789, -0.3325665, -0.5941518, -0.18730909, 0.3872301, 0.18074083, -0.38221216, 0.12303447, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.04581824, 0.042434976, 0.19268289, 0.108934864, -0.102018565, -0.060472723, 0.03198902, -0.12122715, -0.11131186, -0.11446422, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.18241741, 0.0940776, 0.115585946, -0.038129605, 0.15594019, -0.17813031, -0.011129799, -0.025004277, 0.39596397, -0.3503901, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.20212553, 0.040629826, 0.1744062, 0.7654868, 0.266454, -0.18591227, -0.29291397, 0.056251433, 0.12171604, -0.16085717, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.018608851, -0.17030756, 0.007222947, 0.20990321, -0.017251644, 0.088509105, 0.2169018, -0.022011029, -0.08509237, 0.06748135, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.18217295, -0.0042102346, -0.003402351
                );
                result +=
                    intermediate_two[0][0] * float3(-0.07230347, -0.0023256952, -0.0020185825)
                    + intermediate_two[0][1] * float3(0.02412261, -0.23351166, 0.07710408)
                    + intermediate_two[0][2] * float3(-0.44037586, -0.0022931024, -0.0015393835)
                    + intermediate_two[0][3] * float3(-0.09765095, 0.010343643, 0.006888447)
                    + intermediate_two[1][0] * float3(-0.04774698, -0.0013530772, -0.0015132633)
                    + intermediate_two[1][1] * float3(-0.16600387, 0.08868946, -0.06562423)
                    + intermediate_two[1][2] * float3(0.17622274, 0.020412123, 0.016059153)
                    + intermediate_two[1][3] * float3(0.11983126, -0.06680302, -0.047923252)
                    + intermediate_two[2][0] * float3(-1.4295483, 0.023989433, 0.022210518)
                    + intermediate_two[2][1] * float3(0.061472826, -0.0025349378, -0.0013941071);

                return result;
            }
            half3 EvaluateNetwork_Left_0_down(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.46035638, -0.42552304, -0.08158866, -0.32259995, 0.17190582, 0.45486125, -0.2793896, -0.068829745, 0.14651567, 0.46928453, -0.09989259, 0.15934072, -0.55922025, -0.10146892, 0.07715704, 0.74092436
                );

                float4 intermediate_one_4 = float4
                (
                    0.27429706, -0.22854611, -0.1972804, 0.20389171
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.5426387, 0.47476527, -0.06934981, 0.75119036, -0.37942433, -0.30160326, -0.021407051, 0.14703503, 0.25745392, -0.53921616, 0.17238533, 0.10760576, 0.2958998, 0.15670478, 0.21402144, -0.8575458)
                    + f0.g * float4x4(1.3562983, 0.72146547, 0.20403315, -0.42499465, -0.058486264, 0.7027726, 0.17490041, 0.063548, 0.23861283, 0.43259364, 0.23774609, -0.0059609483, -0.06930067, -0.046533406, -0.046242166, -0.35582915)
                    + f0.b * float4x4(0.014690932, 0.6317166, -0.1387526, 0.8481713, -0.65811723, -0.40953943, -0.0028324688, -0.08754161, 0.020107932, -0.3796814, -0.16962764, -0.17059675, 0.74464697, -0.10220888, 0.06779126, -0.84591615)
                    + f0.a * float4x4(-0.017391454, -0.02116351, 0.047730885, 0.08532896, -0.018474016, -0.008182805, -0.034569684, 0.24262804, 0.052759893, 0.8706879, -0.18164024, -0.10160843, -0.63679135, -0.22286832, -0.0049916515, -0.15113224)
                    + f1.r * float4x4(0.08332214, 0.035326913, 0.21737422, 0.010192598, 0.017825078, -0.0033060382, 0.02623932, 0.22203156, -0.21399702, 0.006053626, -0.036552906, 0.19345266, -0.003668532, -0.13751543, -0.055244572, -0.022173582)
                    + f1.g * float4x4(-0.0002835512, -0.0012770091, 0.027772995, 0.0117805675, 0.01412409, 0.0035362162, -0.099153236, 0.07579264, -0.13357174, -0.008658852, 0.030141562, 0.17340407, 0.14752792, 0.18402985, -0.08939474, 0.12955512)
                    + f1.b * float4x4(0.1193725, -0.58810294, -0.16074182, -0.57834697, 0.23006706, 0.6269213, -0.0013862521, -0.13202387, 0.21121284, 0.3521931, 0.03321913, 0.15633245, -0.14607696, 0.04137686, -0.08270008, 0.8213784)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.019836936, 0.6681202, 0.14225398, -0.8544319, 1.7429066, -1.1094836, 0.11905854, 0.034632802, -0.09291661, 0.27443078, -0.006770164, 0.025285723, 0.47817618, 0.22191986, 0.16745491, -0.7424617)
                    + f2.b * float4x4(-0.1946376, 1.0129509, 0.19592328, 0.14569914, 0.54735494, 1.5080899, -0.107633635, -0.1290271, 0.1978788, -0.11421491, -0.24087828, -0.0018214431, -0.35410693, 0.030206472, 0.22287968, -1.1997612)
                    + f2.a * float4x4(1.2783818, 1.2301875, 0.20226286, -0.24258417, -2.8631527, -1.957393, -0.00954306, -0.09619644, 0.17853922, 0.13364542, -0.1034396, -0.09810205, 1.4311718, 0.13345781, 0.012578764, 0.0730158)
                    + f3.r * float4x4(0.18991013, -0.26893285, 0.14622818, -0.328173, 0.33726615, 0.5255634, -0.08540153, 0.23576897, -0.14863703, 0.15034957, -0.17335445, 0.13228197, -0.20734374, 0.019607693, -0.21455996, 0.6910848)
                    + f3.g * float4x4(0.19896802, 0.13919127, -0.048276633, 0.04119, 0.10208392, -0.06988573, -0.014095902, -0.020508826, -0.08804569, -0.1676237, 0.042194664, 0.15855643, 0.055818647, 0.093182504, 0.20579877, 0.032057106)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(0.35630864, -0.5293517, -0.16328861, -0.49519852, 0.21957462, 0.50016457, 0.08095913, 0.10900387, -0.16958776, 0.35627928, -0.15480515, 0.1339746, -0.33971235, -0.16119322, -0.14454986, 0.5984436);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.7314529, -0.04824978, 0.03698927, 0.022349723)
                    + f0.g * float4(0.45787236, -0.109698534, -0.09569588, 0.68741065)
                    + f0.b * float4(-0.5423558, -0.092971265, -0.0845595, 0.28507176)
                    + f0.a * float4(-0.48429048, 0.154459, 0.064301014, 0.021547327)
                    + f1.r * float4(0.047326423, -0.0751974, -0.066839516, 0.020655196)
                    + f1.g * float4(0.01691785, 0.08088711, 0.07516375, -0.02850166)
                    + f1.b * float4(0.66270727, 0.032370985, -0.01192373, 0.19734202)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(0.10851406, -0.17695737, -0.21805188, 0.5164204)
                    + f2.b * float4(0.061468825, -0.0939486, 0.12339538, -0.5943946)
                    + f2.a * float4(-0.19163294, 0.1198003, -0.21833882, 2.9290001)
                    + f3.r * float4(0.603868, -0.042660743, 0.028912425, 0.12578544)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.19168133)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.75103706, -0.18271965, -0.20150936, -0.035915665);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.17870119, 0.065396555, 0.0041035176, 0.60571516, -0.33073872, -0.22649093, -0.54077786, -0.49025682, -0.1393976, -0.051401462, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.15008461, -0.17165047, 0.0050542024, -0.41881752, -0.24235609, 0.058316514, -0.00901885, -0.4478711, 0.04921856, -0.28163677, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.12556395, -0.1733695, -0.012590339, -0.12796275, -0.24563521, -0.00019650071, 0.049384512, -0.47658455, 0.0028647094, 0.4670199, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.082459286, -0.04866286, 0.12845163, 0.058447476, -0.098615296, 0.043462195, -0.07073556, 0.27874526, -0.15988585, -0.08885756, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.8255826, -0.12021251, 0.040039103, -0.06751894, 0.4946368, -0.025919449, -0.040151294, 0.5417537, 0.03500768, -0.24906152, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.2514476, -0.0077245166, -0.0073920307, 0.075438425, 0.34683803, -0.030223249, -0.018605525, -0.13497224, -0.10211932, 1.048038, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.25066972, 0.056310862, 0.02070471, -0.32529312, 0.33896807, -0.10000991, -0.021593891, -0.21983857, 0.08573937, -1.0195339, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.07780355, -0.077944405, 0.07672842, 0.14640443, 0.13528006, -0.08304594, -0.09962293, -0.07286186, -0.1625917, 0.15341677, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.02411081, 0.17141926, 0.07376946, 0.17436467, -0.0054886853, -0.026562018, 0.10451114, 0.15855785, 0.16353141, -0.12960194, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.19434607, -0.101796575, -0.17075461, 0.11541753, -0.077348575, 0.17129257, -0.035143845, 0.13388896, 0.051156424, -0.13312286, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.08345643, -0.18875122, 0.039782897, 0.23629832, -0.12155707, 0.14355224, -0.9519724, 0.5204486, -0.20240839, -0.34316912, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.032292396, 0.021639427, -0.18180831, 0.2252411, -0.1736844, 0.14260566, -0.19211544, -0.057714596, -0.038760606, -0.047005672, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.025012096, -0.26239207, 0.015152543, 0.023042347, -0.4910846, -0.18300967, 0.5112658, 0.52613175, -0.17771558, 0.09771558, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.05109515, 0.042434976, 0.18733677, 0.11394005, -0.095991164, -0.060472723, 0.03731859, -0.12122715, -0.11131186, -0.11974639, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.22810103, 0.0525393, 0.008828439, -0.35727686, 0.50887764, -0.18857725, -0.1813652, -1.0016907, -0.14539209, 0.11123764, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.24663553, -0.009237433, -0.040739715, 0.20185184, 0.4050763, -0.19863139, 1.125728, 0.5412776, 0.034555618, -0.7201114, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.124138616, -0.20071857, -0.007411214, 0.12946379, 0.4166304, 0.08599453, -0.090635434, -0.042759433, 0.1513631, 0.79627615, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.17573212, 0.003588932, 0.0023152195
                );
                result +=
                    intermediate_two[0][0] * float3(-0.04449214, 0.0011465357, 0.0004600756)
                    + intermediate_two[0][1] * float3(0.04130534, -0.22018716, 0.07914305)
                    + intermediate_two[0][2] * float3(-0.0029858174, -0.035533063, -0.028083123)
                    + intermediate_two[0][3] * float3(-0.07329616, -0.003544311, -0.0017997245)
                    + intermediate_two[1][0] * float3(-0.067570284, 0.00034357092, -2.8914441e-05)
                    + intermediate_two[1][1] * float3(-0.17835858, 0.09614577, -0.07051993)
                    + intermediate_two[1][2] * float3(0.03530811, 0.0014887447, 0.0011586783)
                    + intermediate_two[1][3] * float3(0.06015732, 0.00047717014, 0.0010332648)
                    + intermediate_two[2][0] * float3(-0.10030796, -0.21820338, 0.048696604)
                    + intermediate_two[2][1] * float3(0.052245926, 0.00078529795, 0.00033048115);

                return result;
            }
            half3 EvaluateNetwork_Left_l17_up(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.000000000,0.000000000,-0.775112689,-0.835002542,-0.413701147,-0.477663487,-0.029766055,0.149087250,0.268169522,0.312904626,0.107790492,-0.523553312,-0.357195646,0.017823566, 0.0, 0.0
                );

                float4 intermediate_one_4 = float4
                (
                    -0.035933342,0.100920789,-0.777218580,-0.280415326
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.277078539, 0.609905779, 0.311618090, 1.023147345, 0.286043793, -0.036167204, 0.209631190, 0.162390009, -1.172739267, -0.175675422, -0.363157332, 1.064980865, 0.258059144, -0.278948545, 0.089738429, 0.404739201)
                    + f0.g * float4x4(-0.012227400, -0.214041740, 1.103433013, -0.282643944, -0.176745743, -0.206542566, 0.182411030, -0.374820352, 0.181150243, -1.470071793, 1.155449271, 1.646616220, 1.196921825, 0.135655671, -0.195798978, -0.034502659)
                    + f0.b * float4x4(-0.726069033, -0.323445946, 0.659511983, 1.346114039, 0.858962834, 0.372337133, 0.099174947, 0.394033968, -0.176697910, 0.633356035, -1.295033813, 0.463894218, 0.530525088, -0.187127516, -0.494830430, -1.129513741)
                    + f0.a * float4x4(-0.212598041, 0.040904190, -0.131120965, -0.093786739, 0.051252473, 0.050584845, -0.470902145, -0.070272997, -0.022293339, -0.097776845, -0.060500007, -0.108127445, -0.180464253, -0.097411521, -0.767378390, 0.257953137)
                    + f1.r * float4x4(0.124373354, -0.399443626, 0.035101067, -0.011668380, -0.018757841, -0.023028295, -0.274625719, -0.007456598, 0.003111597, 0.015894827, 0.039917391, 0.098068766, 0.103794202, 0.046962343, -0.435372710, 0.177666962)
                    + f1.g * float4x4(-0.260064393, 0.090057380, 0.054321878, 0.039408796, 0.018550795, -0.018633172, -0.029810166, 0.020248253, 0.016461821, 0.047932148, -0.005111465, 0.065535501, 0.150370076, 0.057443846, 0.142008618, -0.251850784)
                    + f1.b * float4x4(0.264531642, -0.031294916, -0.656028867, -1.273121357, -0.236010894, -0.926905334, -0.380475461, 0.223472685, 0.143199190, -0.023404062, -0.065922476, -0.421698719, -0.230183452, 0.468289614, 0.136601731, -0.311616063)
                    + f1.a * float4x4(0.122044556, 0.081975900, 0.051311567, -0.404313713, -0.048172325, 0.210278288, -0.045441289, 0.156450793, -0.022286750, 0.772007465, -0.185010180, 0.209042281, -0.168661118, 0.264608532, 0.052209903, -0.604700804)
                    + f2.r * float4x4(-0.270777017, -0.187700167, -0.138956487, 0.212887689, 0.346073657, 0.325137705, -0.186964825, 0.421597779, 0.353173524, 0.234008059, 0.176138997, 0.517386734, -0.225587815, 0.270756751, -0.263392061, 0.027586879)
                    + f2.g * float4x4(-0.117459536, -0.037833728, 0.183685303, 0.473464370, 0.456861496, 3.610005617, -0.531182468, 1.097272277, -2.987265348, -2.290996552, 0.665511668, 0.365555257, -1.335859776, 2.852936983, 0.194434941, -0.151558027)
                    + f2.b * float4x4(0.274710298, -0.218078583, -0.240035579, 0.112000406, 0.658927739, 0.393342942, -0.314455092, -1.915171981, -0.181861818, 0.084836289, -1.939442039, 0.866046906, 1.896566510, 0.712244213, -0.400258005, -0.468192041)
                    + f2.a * float4x4(-0.239512235, 0.279514223, -0.407271206, 0.110387750, 1.523625374, 0.747842550, 0.269792229, -0.828012288, -0.340803176, -0.659004867, -0.924412489, 0.102625735, 0.564207494, -1.253459096, 0.233667478, -0.319544256)
                    + f3.r * float4x4(-0.151464343, 0.293790102, -0.371297091, -0.445039928, -0.313484251, -0.650423288, 0.021145931, 0.146072954, 0.159282088, 0.178974569, 0.077742875, -0.410440207, 0.229257271, 0.219901189, 0.046178464, -0.207396731)
                    + f3.g * float4x4(-0.205819637, 0.663464487, -0.136985913, 0.086330771, 0.130819336, -0.115885511, 0.520146668, -0.142655879, -0.020086177, -0.144451693, 0.225733832, 0.084192403, 0.042721815, -0.113913953, -0.815638959, 0.625572383)
                    + f3.b * float4x4(-0.903691113, -0.056490853, -0.276429445, -0.548560441, -0.297699779, -0.313053727, 0.172113061, 0.026549861, -0.782832444, -0.110688150, 0.033377655, 0.176460400, -0.091851883, 0.134851605, -0.382563829, -0.683170974)
                    + f3.a * float4x4(-0.244970456, -0.487860471, -1.071166635, -1.398926020, -0.619354069, -0.669593930, -0.378422081, 0.384958625, -0.324684620, 0.435076356, 0.506112278, -0.012533817, -0.901134551, -0.141693562, 0.468954653, -0.174885854);
                
                intermediate_one_4 +=
                     f0.r * float4(0.495171279, -0.493665844, 0.567582071, 0.221559510)
                    + f0.g * float4(0.027148219, -1.744981289, -0.330637902, 0.385628939)
                    + f0.b * float4(0.264597148, 0.431800216, 0.910637081, 0.569324553)
                    + f0.a * float4(-0.570146501, -0.010903449, -0.065445170, -2.054661274)
                    + f1.r * float4(-0.083747864, -0.005766849, -0.000218431, 0.075964794)
                    + f1.g * float4(0.395346850, 0.013923309, 0.004251065, 0.055793412)
                    + f1.b * float4(0.245987698, 0.113773137, -0.377579600, 0.152114928)
                    + f1.a * float4(0.194661006, 0.273123473, -0.886544168, -0.173878461)
                    + f2.r * float4(-0.236890242, 0.456795126, 0.076860450, -0.044328995)
                    + f2.g * float4(-0.282364607, 1.592848301, 1.710339785, 0.201931626)
                    + f2.b * float4(-0.025017971, -0.618543804, -0.031566389, 0.176078334)
                    + f2.a * float4(-0.149181306, -0.776311457, -0.240218788, 0.311551273)
                    + f3.r * float4(-0.326980352, -0.346928686, -0.831687629, -0.157570496)
                    + f3.g * float4(-0.067456260, 0.324180484, 0.120018989, 0.283109754)
                    + f3.b * float4(-0.394824386, -0.235143751, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.152550340, 0.299603522, -1.102862120, -0.863386393);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.463396788,0.299320191,0.624656260,-0.107993402,-0.096363731,-2.117003918,-0.811289251,-2.288354635,-1.007332563,-0.361168534, 0.0, 0.0
                );
                // weights
               intermediate_two +=
                    intermediate_one_16[0][0] * float3x4(-0.142733157, 0.342077106, 0.146745697, 0.125952184, -0.274074286, 0.565800488, -0.113547556, 0.085352503, -0.078971073, -0.417732924,0.0,0.0)
                    + intermediate_one_16[0][1] * float3x4(-0.205786496, -0.195800543, -1.091672301, 0.337522954, -0.358802736, 0.365154803, 0.075811900, 0.078196481, 0.161590800, -0.335328579,0.0,0.0)
                    + intermediate_one_16[0][2] * float3x4(-0.156130433, 0.514171958, -0.364659935, -0.383039385, -0.354698360, -0.282214403, -0.037244607, 0.261565119, 0.802111745, -1.081554651,0.0,0.0)
                    + intermediate_one_16[0][3] * float3x4(1.564450502, 1.226670980, -1.800196648, 0.180305809, -0.005656523, 0.534682691, -0.917312741, 1.728580952, -0.445685744, -3.195496798,0.0,0.0)
                    + intermediate_one_16[1][0] * float3x4(0.015561701, 0.676985502, 0.374801308, -0.120295636, -0.245877847, 0.837309718, 0.376177639, 0.201543629, 0.708321810, 0.826349318,0.0,0.0)
                    + intermediate_one_16[1][1] * float3x4(-0.047816351, -1.588045716, -1.352990985, -0.082883999, 0.261404365, -0.683499157, -0.211989671, 1.064866781, -0.475937754, -0.671687245,0.0,0.0)
                    + intermediate_one_16[1][2] * float3x4(0.153322667, 0.564443469, -0.059888851, 0.383857518, 0.131598890, 0.326095551, -0.050476927, -0.345385283, -0.519072890, -0.248416692,0.0,0.0)
                    + intermediate_one_16[1][3] * float3x4(-0.473915994, 0.101795606, -0.536386669, -0.313202113, -0.427662849, 0.634651959, 0.601947606, 0.061534993, 0.226823285, 0.249000639,0.0,0.0)
                    + intermediate_one_16[2][0] * float3x4(0.996385157, -0.087104507, 0.557651460, -0.499181896, -0.387156010, -0.320800364, -0.439078748, 0.816029131, -0.663209081, -0.024211794,0.0,0.0)
                    + intermediate_one_16[2][1] * float3x4(-0.203186408, -0.852460444, -0.964440405, -0.095289037, 0.560198188, 0.321459919, 0.247837141, 0.999315798, 0.302633166, -0.109122373,0.0,0.0)
                    + intermediate_one_16[2][2] * float3x4(0.031141128, 0.501394033, -0.135553896, 0.273307472, -0.299340636, 0.614573419, -0.166460097, 1.111488342, 1.582249403, -0.551297665,0.0,0.0)
                    + intermediate_one_16[2][3] * float3x4(-0.112656713, 0.517502546, 0.498574257, -0.098780714, 0.456235707, 0.550152063, -0.326792449, 0.540477991, 1.092104435, 1.313597322,0.0,0.0)
                    + intermediate_one_16[3][0] * float3x4(-0.244948179, -0.242050827, -0.932874024, 0.198018566, -0.652700543, -0.476989686, 0.394703180, -0.315459549, -0.533538580, -0.859129369,0.0,0.0)
                    + intermediate_one_16[3][1] * float3x4(0.722779870, 0.591237724, 1.050378203, -0.412693769, -0.755003810, 0.675932229, 0.221389383, 0.124498419, 0.304897040, 0.734826088,0.0,0.0)
                    + intermediate_one_16[3][2] * float3x4(0.457290113, 0.182314843, 0.213185370, 0.222974151, 0.599094391, 0.632278979, 0.417210549, 0.331404239, 0.136314854, 0.112209506,0.0,0.0)
                    + intermediate_one_16[3][3] * float3x4(0.086495914, -0.070993833, -0.367532641, -0.188349262, 0.475050002, -0.075371794, -0.312334090, 0.304842234, -0.118649781, -0.594971359,0.0,0.0)
                    + intermediate_one_4[0] * float3x4(-0.129023165, -0.020723538, 0.253100961, 0.637073278, 0.363773495, 0.162451372, -0.166530013, 0.424243718, 0.433403045, -0.961908877,0.0,0.0)
                    + intermediate_one_4[1] * float3x4(0.532466173, 0.270181686, 0.889850855, 0.468713492, -0.024296040, -0.768741012, -0.657025099, -0.753022909, -0.225602508, 0.062264711,0.0,0.0)
                    + intermediate_one_4[2] * float3x4(-0.189958468, 0.301681459, -0.884488821, -0.543240547, 0.542353809, 0.098546147, 0.539664268, -0.331251711, 0.209998056, -1.223088264,0.0,0.0)
                    + intermediate_one_4[3] * float3x4(0.004203902, 0.334560633, 0.085574463, -0.176305234, -0.692298770, 0.018439563, -1.009716988, -0.048122168, 0.055094607, 0.285985291,0.0,0.0);


                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    -0.003116366,-0.000948076,-0.001577199
                );
                result +=
                    intermediate_two[0][0] * float3(0.149669155, 0.001639567, 0.002807636)
                    + intermediate_two[0][1] * float3(0.137553036, 0.002322376, 0.003497876)
                    + intermediate_two[0][2] * float3(-0.210612223, -0.003131759, -0.004935667)
                    + intermediate_two[0][3] * float3(-0.132133633, -0.040140845, -0.161286831)
                    + intermediate_two[1][0] * float3(0.113221183, 0.550461709, -0.445565432)
                    + intermediate_two[1][1] * float3(0.398449183, 0.000708382, 0.003803767)
                    + intermediate_two[1][2] * float3(0.060137276, -0.005019732, -0.005692421)
                    + intermediate_two[1][3] * float3(-0.180385739, -0.002903598, -0.004671670)
                    + intermediate_two[2][0] * float3(0.095204219, -0.000503171, 0.000002840)
                    + intermediate_two[2][1] * float3(0.120178029, 0.002110795, 0.003071782);

                return result;
            }
            half3 EvaluateNetwork_Left_l17_down(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.000000000,0.000000000,-0.153753325,-0.318994254,-0.259611100,0.725894690,0.000000000,-0.119019605,-0.479934424,0.453492999,0.274705708,-0.245752409,0.199835286,-0.183301017,0.000000000,0.000000000
                );

                float4 intermediate_one_4 = float4
                (
                    -0.037898444,-0.158516154,-0.269503325,-0.267253608
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.783696473, 1.725074053, -1.157141089, 0.851177633, -0.101529196, -2.179226875, 0.508735418, 1.000022650, -2.078688622, -0.065276980, -0.996990979, 1.777125359, -0.480219871, -0.555246532, 0.253818601, 1.144775391)
                    + f0.g * float4x4(-0.034584310, -0.605401456, 0.030978674, -0.660532475, -0.344182014, -0.392489731, 0.599688590, 0.313500732, 1.035792589, 0.364504904, -0.260065764, 0.216630951, 0.968281448, 0.232400164, -0.553803146, -0.097588263)
                    + f0.b * float4x4(-2.053633451, -0.914843261, 0.384598643, 1.804793239, 0.239685252, -1.148929000, 0.363943964, 1.377544045, 1.186857343, 0.294768780, -0.764253318, 0.595727742, 0.100604504, 0.034572653, -1.399591804, -3.194747210)
                    + f0.a * float4x4(-0.601318061, 0.115694523, 0.494883001, 0.111491896, 0.265099406, 0.256730497, -1.270228744, -0.573319972, -0.630052149, 0.031837538, -1.005002141, -0.023625996, 1.121385813, -0.250537425, -2.170473814, 0.729601622)
                    + f1.r * float4x4(0.351780981, -1.129797220, 0.019182850, -0.328608185, -0.283336878, -0.040086322, -0.869650066, 0.149324819, 0.450752795, 0.047023483, 0.047418058, 0.110106714, 0.068266734, 0.204671010, -1.231420040, 0.502518058)
                    + f1.g * float4x4(-0.735573232, 0.254720747, 1.959618449, 0.760241985, -0.239789024, -0.170702428, -0.165161371, 0.712825418, 1.092344761, -0.021395558, -2.116944551, -0.044065889, 1.559058309, -0.183900461, 0.401661038, -0.712341607)
                    + f1.b * float4x4(0.748208523, -0.088515386, 0.182977185, -1.558224440, 0.242966369, -0.544651628, -0.991958141, 0.091371499, -0.833411038, -0.497792840, -0.216643512, 0.042348403, 0.559050739, 1.090975761, 0.386368036, -0.881383300)
                    + f1.a * float4x4(0.345194131, 0.231862858, 0.145131037, -1.143571854, -0.136251912, 0.594756842, -0.128527373, 0.442509681, -0.063036449, 2.183566809, -0.523287833, 0.591260850, -0.477045685, 0.748425961, 0.147671908, -1.710352182)
                    + f2.r * float4x4(-0.765873075, -0.530896246, -0.393028319, 0.602137327, 0.978844106, 0.919628322, -0.528816402, 1.192458630, 0.998925567, 0.661874771, 0.498196334, 1.463390708, -0.638058722, 0.765815794, -0.744985223, 0.078027479)
                    + f2.g * float4x4(-0.332225740, -0.107009947, 0.988778114, 0.475194752, -0.105098024, -0.058987170, -1.425550342, -1.272410631, -2.776096344, -6.751152992, 0.634744406, 2.884712696, -0.885043502, 0.466728181, 0.549945056, -0.428670824)
                    + f2.b * float4x4(0.776998043, -0.616819382, -1.870740294, 0.081850849, 0.846205115, 0.072333187, -0.971958995, -0.954015493, -0.092753254, 0.187487990, -0.607904077, 0.218410015, 1.670556664, -0.233435914, -1.132100582, -1.324247122)
                    + f2.a * float4x4(-0.677442908, 0.790585637, -0.497256726, -0.297424793, 0.193133354, 0.342183203, 0.837179840, 0.045452420, -0.217598379, -0.331610829, 0.304057509, 0.354045749, 0.441197723, 0.348052800, 0.660911441, -0.903807640)
                    + f3.r * float4x4(-0.428405851, 0.830963910, 0.988253653, 0.783910036, 0.023871157, 0.237422332, 0.144000798, -0.127551928, -0.787880838, 0.074657492, 0.189714029, 0.074209921, 1.858525395, 0.388251334, 0.130612418, -0.586606562)
                    + f3.g * float4x4(-0.582145870, 1.876561046, -0.387454659, 0.244180292, 0.370012969, -0.327773720, 1.471197009, -0.403491765, -0.056812290, -0.408571094, 0.638471723, 0.238132074, 0.120835543, -0.322197318, -2.306975365, 1.769385934)
                    + f3.b * float4x4(-2.556024551, -0.159780264, -0.781860530, -1.551563263, -0.842022181, -0.885449648, 0.486809254, 0.075094350, -2.214184523, -0.313073367, 0.094406269, 0.499105394, -0.259796351, 0.381417960, -1.082053900, -1.932299376)
                    + f3.a * float4x4(-0.692881107, -1.379877806, -0.991150141, -1.914029956, -0.841297030, 0.183202267, -0.986150324, 0.548049986, -2.156791449, 0.799032152, 1.401262760, 1.199607253, -1.338775754, -0.634454250, 1.326404095, -0.494651914);
                
                intermediate_one_4 +=
                    f0.r * float4(1.336809754, -0.952265739, -0.323219627, 0.100720987)
                    + f0.g * float4(0.084234409, -2.070490122, -0.414539844, -0.144999266)
                    + f0.b * float4(0.811291099, 0.650743067, 0.505304873, 0.623695910)
                    + f0.a * float4(-1.574180126, -0.131830722, 0.118844256, -0.830449343)
                    + f1.r * float4(-0.235660434, -0.920140803, -0.131088018, -0.098701924)
                    + f1.g * float4(1.065053344, 0.825485051, 0.401470929, 0.258506685)
                    + f1.b * float4(0.759497643, -0.122153245, 0.861065149, 0.956198454)
                    + f1.a * float4(0.550584495, 0.772509813, -2.507525682, -0.491802573)
                    + f2.r * float4(-0.670026779, 1.292011738, 0.217394188, -0.125381336)
                    + f2.g * float4(-0.772993267, 1.047665358, 1.456138372, 0.342539608)
                    + f2.b * float4(-0.125255525, -0.532143772, 0.440720439, -0.087538235)
                    + f2.a * float4(-0.447182834, -0.551231742, 0.432240367, 0.180379197)
                    + f3.r * float4(-0.861101389, -1.425181627, -0.423542798, 0.080235302)
                    + f3.g * float4(-0.190795124, 0.916920900, 0.339464962, 0.800755322)
                    + f3.b * float4(-1.116732001, -0.665086985, 0.050842129, -0.186904132)
                    + f3.a * float4(-0.367741257, 0.403425306, -1.190308213, -1.915921330);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.049459480,-0.115216523,-0.362345457,1.200760722,0.310565919,-0.535363793,-0.177803665,0.000000000,0.441162825,-0.241026729, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                    intermediate_one_16[0][0] * float3x4(-0.451361865, 1.081742764, 0.464050621, 0.398295790, -0.866698980, 1.789218187, -0.359068900, 0.269908309, -0.249728456, -1.320987463,0.0,0.0)
                    + intermediate_one_16[0][1] * float3x4(-0.650754035, -0.619175673, -3.452171087, 1.067341328, -1.134633899, 1.154720902, 0.239738286, 0.247278988, 0.510994971, -1.060402036,0.0,0.0)
                    + intermediate_one_16[0][2] * float3x4(-0.481077492, -0.003188861, -1.415138006, 0.742967248, 0.552435815, 1.257010460, 0.799214363, -0.531161368, 0.257141471, 0.520890713,0.0,0.0)
                    + intermediate_one_16[0][3] * float3x4(-0.479946941, 0.629429281, -0.041226260, -1.316063881, 0.257276624, 1.080046773, -0.303467333, -0.127116874, -1.533805966, -0.565286160,0.0,0.0)
                    + intermediate_one_16[1][0] * float3x4(-0.556344688, 0.584048212, -0.694355071, -0.398191720, -1.059271932, -1.511599183, 1.459013581, -2.277519703, 0.707660437, 1.504103780,0.0,0.0)
                    + intermediate_one_16[1][1] * float3x4(-2.484977007, 0.277982682, 0.009314392, -2.028830767, -0.004440619, -1.285691142, 0.176751360, 0.325262725, -1.530407071, 0.712799907,0.0,0.0)
                    + intermediate_one_16[1][2] * float3x4(0.395776600, 1.763723731, -0.225626215, 1.213864088, 0.416152209, 1.073244333, -0.116082795, -1.092204213, -1.566889524, -0.856304765,0.0,0.0)
                    + intermediate_one_16[1][3] * float3x4(0.251194835, 0.708002627, 0.352822989, 0.509854317, 0.282621056, -0.139273077, -0.578241408, -0.821572244, -0.094384015, -0.404415250,0.0,0.0)
                    + intermediate_one_16[2][0] * float3x4(-0.697080910, -0.302177429, 0.392959654, -0.382521212, -0.281581014, -2.620398998, 0.696170211, 1.465149522, 0.054051604, -0.022113236,0.0,0.0)
                    + intermediate_one_16[2][1] * float3x4(0.791840672, -0.859192312, -1.654949069, -2.825759888, -1.116408110, -0.159908503, -0.113591470, 1.044450402, 1.380267620, 1.854382277,0.0,0.0)
                    + intermediate_one_16[2][2] * float3x4(-0.316157579, -0.250267446, -1.082588911, 1.577302337, 0.340349466, -0.088232748, 0.346503735, 0.102578454, 0.149782047, -0.960422099,0.0,0.0)
                    + intermediate_one_16[2][3] * float3x4(-0.397937149, 0.175854981, 1.288338304, -1.952623129, 0.856157303, -0.708367765, -0.023957578, -1.462864161, -0.030711986, 1.389467359,0.0,0.0)
                    + intermediate_one_16[3][0] * float3x4(0.287592173, -0.294844955, -0.128481954, 1.719340086, -0.894184113, 0.709283352, -0.516239643, 0.322525144, 0.327754259, -0.893367708,0.0,0.0)
                    + intermediate_one_16[3][1] * float3x4(2.291573286, 0.709508419, 1.918261051, 0.690846622, -1.146417141, 0.304711670, -1.236013055, -1.293243766, 0.266806304, 1.226536870,0.0,0.0)
                    + intermediate_one_16[3][2] * float3x4(1.446078300, 0.576530159, 0.674151361, 0.705106199, 1.894502878, 1.999441624, 1.319335580, 1.047992229, 0.431065410, 0.354837626,0.0,0.0)
                    + intermediate_one_16[3][3] * float3x4(0.273524106, -0.224502206, -1.162240267, -0.595612645, 1.502240062, -0.238346532, -0.987687171, 0.963995755, -0.375203550, -1.881464720,0.0,0.0)
                    + intermediate_one_4[0] * float3x4(-0.314846367, -0.208881572, 0.640294373, 2.014602661, 0.964218080, 0.527301073, -0.372926176, 1.341576457, 1.280474663, -3.135796785,0.0,0.0)
                    + intermediate_one_4[1] * float3x4(0.615579069, -0.327088773, 1.306155324, 0.898259997, -0.102890879, -1.277094245, -0.506690919, 0.144080475, 0.506376982, 0.046094473,0.0,0.0)
                    + intermediate_one_4[2] * float3x4(0.860162199, 0.088216141, -0.995731771, -1.206640124, 2.170916319, -0.126245722, 0.709160149, -0.370097458, 0.060889907, -0.792157531,0.0,0.0)
                    + intermediate_one_4[3] * float3x4(-1.121840715, 0.271830261, -1.036178708, 0.208886057, -0.864318550, -0.757181287, 0.708397985, 0.818904042, -0.419885308, 0.596814394,0.0,0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.029500591,-0.001564847,-0.002315997
                );
                result +=
                    intermediate_two[0][0] * float3(-0.132428557, -0.000745764, -0.001412619)
                + intermediate_two[0][1] * float3(0.187493756, 0.000839196, 0.001573433)
                + intermediate_two[0][2] * float3(0.036012504, 0.000192702, 0.000192208)
                + intermediate_two[0][3] * float3(-0.045269284, -0.000113342, -0.000443860)
                + intermediate_two[1][0] * float3(0.034997020, 0.000128904, 0.000253845)
                + intermediate_two[1][1] * float3(0.534580886, 1.111500144, 0.680565417)
                + intermediate_two[1][2] * float3(-0.045473821, 0.005598279, 0.010441015)
                + intermediate_two[1][3] * float3(-0.179604635, -0.299031675, 0.290152013)
                + intermediate_two[2][0] * float3(0.169737324, 0.001271135, 0.002247917)
                + intermediate_two[2][1] * float3(-0.086340554, 0.000106915, -0.000359860);

                return result;
            }
            half3 EvaluateNetwork_Left_l1_down(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, 0.0, -0.0011089584, -0.022330439, -0.10358806, 0.060190976, 0.0, 0.079663396, -0.03799386, 0.09167959, 0.06500763, 0.012694422, 0.12323887, -0.057576787, 0.0, 0.0
                );

                float4 intermediate_one_4 = float4
                (
                    -0.019613765, -0.015146825, 0.007696566, 0.06308315
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.7836965, 1.725074, -1.3097813, 0.55448735, -0.25757015, -1.5135149, 0.5087354, 0.8013214, -2.5206342, 0.29653555, -0.78729224, 1.5186324, -0.4036241, -0.6809234, 0.2538186, 1.1447754)
                    + f0.g * float4x4(-0.03458431, -0.60540146, 0.43401313, -2.0001285, -0.78729373, -0.28055805, 0.5996886, 0.82060605, 0.1880574, -0.4549381, 0.05461205, 0.61075443, 1.9801767, 0.43692753, -0.55380315, -0.09758826)
                    + f0.b * float4x4(-2.0536335, -0.91484326, 0.5725011, 1.5957125, 0.3370966, -0.11248301, 0.36394396, 1.6042689, 1.6601508, 1.1224079, -0.7450657, 1.084235, 0.5900903, 0.49756622, -1.3995918, -3.1947472)
                    + f0.a * float4x4(-0.60131806, 0.11569452, 1.2672629, 0.60796946, 0.3713066, 1.2647895, -1.2702287, -0.47841194, -0.46120545, -1.2456044, -0.1530009, -0.63461924, 2.035056, -0.031913843, -2.1704738, 0.7296016)
                    + f1.r * float4x4(0.35178098, -1.1297972, -0.05675975, -0.36569968, -0.2848831, -1.1630293, -0.86965007, 1.4549096, 0.5164158, 0.28847623, 0.51794136, -0.40569207, -0.79927534, 0.5408976, -1.23142, 0.50251806)
                    + f1.g * float4x4(-0.73557323, 0.25472075, 3.1798525, 1.2151119, -0.48992592, -0.025409732, -0.16516137, 0.37900102, 1.9758829, 0.13812397, -2.3769498, 1.1989859, 0.68146795, -0.92338955, 0.40166104, -0.7123416)
                    + f1.b * float4x4(0.7482085, -0.088515386, 0.3356432, -1.2616302, 0.39902863, -1.2103213, -0.99195814, 0.29005247, -0.39146695, -0.859604, -0.42634, 0.30077764, 0.48247674, 1.2166002, 0.38636804, -0.8813833)
                    + f1.a * float4x4(0.34519413, 0.23186286, 0.14513104, -1.1435719, -0.13625191, 0.59475684, -0.12852737, 0.44250968, -0.06303645, 2.1835668, -0.52328783, 0.59126085, -0.47704569, 0.74842596, 0.14767191, -1.7103522)
                    + f2.r * float4x4(-0.7658731, -0.53089625, -0.39302832, 0.6021373, 0.9788441, 0.9196283, -0.5288164, 1.1924586, 0.99892557, 0.6618748, 0.49819633, 1.4633907, -0.6380587, 0.7658158, -0.7449852, 0.07802748)
                    + f2.g * float4x4(-0.33222574, -0.10700995, 0.42798015, -0.41740358, 0.26939538, -0.059330985, -1.4255503, -0.1919249, -1.8049526, -0.8803768, 1.9326185, -0.34971675, -0.047494277, 0.32590643, 0.54994506, -0.42867082)
                    + f2.b * float4x4(0.77699804, -0.6168194, -1.7418523, 0.8538024, 1.377775, 0.29603955, -0.971959, -0.5747306, 0.258037, -0.4952852, -0.55047023, 0.4448665, 1.5822438, -0.2533197, -1.1321006, -1.3242471)
                    + f2.a * float4x4(-0.6774429, 0.79058564, -0.50230205, -0.3351993, -0.1839358, 0.35505888, 0.83717984, -0.55005294, -0.4164396, 0.2884761, -0.27076194, 0.23869367, -0.6646987, -0.09721906, 0.66091144, -0.90380764)
                    + f3.r * float4x4(-0.42840585, 0.8309639, 1.140853, 1.0804648, 0.17989859, -0.42830622, 0.1440008, 0.071132965, -0.3459666, -0.28716046, -0.019971926, 0.33263627, 1.7820674, 0.51394784, 0.13061242, -0.58660656)
                    + f3.g * float4x4(-0.58214587, 1.876561, -0.38745466, 0.24418029, 0.37001297, -0.32777372, 1.471197, -0.40349177, -0.05681229, -0.4085711, 0.6384717, 0.23813207, 0.12083554, -0.32219732, -2.3069754, 1.7693859)
                    + f3.b * float4x4(-2.5560246, -0.15978026, -0.78186053, -1.5515633, -0.8420222, -0.88544965, 0.48680925, 0.07509435, -2.2141845, -0.31307337, 0.09440627, 0.4991054, -0.25979635, 0.38141796, -1.0820539, -1.9322994)
                    + f3.a * float4x4(-0.6928811, -1.3798778, -0.8385131, -1.6174357, -0.6852798, -0.48252714, -0.9861503, 0.7467533, -1.7148424, 0.4372418, 1.1915224, 1.4581116, -1.4152337, -0.50879693, 1.3264041, -0.4946519);
                
                intermediate_one_4 +=
                    f0.r * float4(1.3185328, -1.0956732, -0.6004796, -0.22964324)
                    + f0.g * float4(0.14668095, -3.0520558, -0.4701125, -1.3017296)
                    + f0.b * float4(0.8310227, 1.2988539, 1.0338342, 0.5454065)
                    + f0.a * float4(-1.5556166, 0.36459282, 0.1615655, -2.0821998)
                    + f1.r * float4(-0.3320704, -1.095325, 1.0977253, 0.21752308)
                    + f1.g * float4(1.0472301, 0.44178128, -0.5869552, -1.3939558)
                    + f1.b * float4(0.7777791, 0.021207815, 1.1379786, 1.2865344)
                    + f1.a * float4(0.5505845, 0.7725098, -2.5075257, -0.49180257)
                    + f2.r * float4(-0.6700268, 1.2920117, 0.21739419, -0.12538134)
                    + f2.g * float4(-0.7357241, 1.1694564, 0.4389227, -0.13256611)
                    + f2.b * float4(-0.16910635, -0.22942084, 0.26896316, -0.6075025)
                    + f2.a * float4(-0.49915472, 0.3553912, -0.40769902, 0.9586377)
                    + f3.r * float4(-0.8428199, -1.2818484, -0.14637356, 0.41059116)
                    + f3.g * float4(-0.19079512, 0.9169209, 0.33946496, 0.8007553)
                    + f3.b * float4(-1.116732, -0.665087, 0.05084213, -0.18690413)
                    + f3.a * float4(-0.34945726, 0.54677916, -0.91313666, -1.58557);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.11212986, -0.020048365, 0.085388385, -0.083002165, 0.83962333, -0.22652291, -0.047255736, 0.0, 0.13188629, -0.06587724, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.45136186, 1.0817428, 0.46405062, 0.3982958, -0.866699, 1.7892182, -0.3590689, 0.2699083, -0.24972846, -1.3209875, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.65075403, -0.6191757, -3.452171, 1.0673413, -1.1346339, 1.1547209, 0.23973829, 0.24727899, 0.510995, -1.060402, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.7711516, 0.3462326, -1.0374384, -1.1196314, 0.29170835, 1.5666765, 0.89325106, -0.53116137, 0.2735793, 0.79271495, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.5082234, 0.7087811, -0.35525084, 0.4976908, -0.13249345, 1.3979479, -0.24608167, -0.12711687, -1.3756843, -0.35649335, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-1.0506128, 1.0210682, -0.4086254, -0.11204528, -0.16685359, -1.2129875, 1.2376914, -2.2775197, 0.9240101, 1.7107254, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-2.021978, -0.4859123, -1.7783425, -0.05772123, 0.8655982, -0.9919105, 0.32977808, 0.32526273, 1.2290003, -0.45487905, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.3957766, 1.7637237, -0.22562622, 1.2138641, 0.4161522, 1.0732443, -0.116082795, -1.0922042, -1.5668895, -0.85630476, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.36263174, 0.97604495, 0.40216598, -0.71974075, -0.78505504, 0.16540945, -0.45195472, -0.82157224, 0.74813163, -0.47614968, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.38564575, -0.44020596, 0.8041814, -1.3265733, -0.44830912, -2.325192, 1.0713825, 1.4651495, 0.09888649, -0.07029994, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.96467954, -0.15167661, -1.4923056, -0.054760985, 1.709145, -0.021349307, -0.3920008, 1.0444504, 0.8085454, -0.40469387, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.20253815, 0.22014025, -1.0365477, 0.7245746, 0.5165494, 0.24901116, 0.6661935, 0.10257845, 0.46779218, -1.1629628, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.113445275, 0.20846517, 0.39819404, -0.4189252, 1.3306637, -0.42170694, 1.1807871, -1.4628642, 0.30952096, 0.34561327, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.65902585, -0.40550795, -0.7204352, 0.7089035, -1.2207695, 1.0011278, -0.45516092, 0.32252514, 0.36634764, -0.7177023, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(2.5641537, 0.7089778, 2.3169832, -1.0371827, -1.4709728, 0.61731434, -1.0452352, -1.2932438, 0.0773979, 1.678755, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(1.4460783, 0.57653016, 0.67415136, 0.7051062, 1.8945029, 1.9994416, 1.3193356, 1.0479922, 0.4310654, 0.35483763, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.2735241, -0.2245022, -1.1622403, -0.59561265, 1.5022401, -0.23834653, -0.9876872, 0.96399575, -0.37520355, -1.8814647, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.44646737, -0.056866452, 0.7887597, 2.0146027, 1.0935186, 0.557587, -0.53062785, 1.3415765, 1.3982155, -3.0394263, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.7479159, -0.5890853, 1.5593613, 1.7716799, 0.47690094, -0.9615331, -0.27340272, 0.14408047, -0.13913481, 0.6200728, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.9838454, 0.06084259, -0.71561915, -1.6498278, 2.3956447, 0.18141453, 1.0118234, -0.37009746, 0.029671935, -0.79182065, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-1.3135782, 0.4530617, -0.6140683, -0.37017086, -1.4691373, -0.4869755, 1.4301819, 0.81890404, -0.4500278, 0.26091105, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    -0.010410777, 0.028348818, -0.5000454
                );
                result +=
                    intermediate_two[0][0] * float3(-0.83243203, 0.17073037, 0.47459468)
                    + intermediate_two[0][1] * float3(1.2846053, -0.987917, -0.31070098)
                    + intermediate_two[0][2] * float3(-0.25517794, -0.19694056, -0.67841285)
                    + intermediate_two[0][3] * float3(-0.12562455, -0.02177053, -0.27669045)
                    + intermediate_two[1][0] * float3(-0.038015414, 0.58520263, -0.1703466)
                    + intermediate_two[1][1] * float3(0.7010623, 1.2011601, 0.76744884)
                    + intermediate_two[1][2] * float3(0.1494353, 0.89727265, 0.36299074)
                    + intermediate_two[1][3] * float3(-0.17960463, -0.29903167, 0.290152)
                    + intermediate_two[2][0] * float3(0.61611366, -0.07595515, -0.5174039)
                    + intermediate_two[2][1] * float3(-0.16277957, -1.2801926, 0.19735971);

                return result;
            }
            half3 EvaluateNetwork_Left_l1_up(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, 0.0, -0.11473407, 0.7378459, -0.3302341, -0.28809038, -0.016667817, -0.39569107, -0.29318365, -0.67978704, 0.45301077, -0.4439918, 0.036539774, -0.090414725, 0.0, 0.0
                );

                float4 intermediate_one_4 = float4
                (
                    -0.0247383, -0.32078657, -0.10942782, -0.90255195
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27707854, 0.6099058, -0.34879085, -0.54968995, 0.20254737, -0.22572742, 0.1965331, 0.707157, -0.6113733, 0.8170716, -0.7085064, 0.9854402, -0.1356619, -0.17067358, 0.08973843, 0.4047392)
                    + f0.g * float4x4(-0.0122274, -0.21404174, -0.21947841, -0.7095479, 0.7709907, 1.3073208, 0.1952803, 0.4380808, -1.1484426, 0.013458676, -0.4557222, 1.6443543, -0.6594204, -0.09388004, -0.19579898, -0.03450266)
                    + f0.b * float4x4(-0.72606903, -0.32344595, -0.20250572, -0.21029782, 0.3805631, 0.015077999, 0.11199838, 0.9191414, 0.7650552, 0.6551228, -1.0380002, 0.06724639, -0.23583359, 0.35594937, -0.49483043, -1.1295137)
                    + f0.a * float4x4(-0.21259804, 0.04090419, 1.9075587, 0.11715741, -0.17943566, 0.09044128, -0.46150357, -0.6448874, 0.049261507, -0.14306945, -0.04972066, 0.002705574, -0.00021077483, 0.035153553, -0.7673784, 0.25795314)
                    + f1.r * float4x4(0.124373354, -0.39944363, -0.069984615, -0.061531577, 0.06120734, 0.009639728, -0.29062212, 0.06767647, -0.022489373, 0.01924954, 0.021466304, 0.016828239, 0.03123254, 0.026208136, -0.4353727, 0.17766696)
                    + f1.g * float4x4(-0.2600644, 0.09005738, -0.049307227, -0.044642016, 0.07174427, -0.01708945, -0.040755797, 0.062411908, -0.079052, 0.13303357, 0.061318737, 0.006075525, -0.08353031, 0.011277917, 0.14200862, -0.25185078)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.0043366654, 0.29965615, -0.15251896, -0.73731077, -0.36737773, -0.32131132, -0.41815147, -1.0160875, 0.27930892, -0.34213635, 0.1635491, 0.36004722, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.117459536, -0.037833728, -0.09826294, -1.7606549, 1.1903985, 0.5931443, -0.5203533, 0.49743977, -1.5156962, 2.0922096, 1.6288383, 1.4308541, 1.9938896, -1.3180912, 0.19443494, -0.15155803)
                    + f2.b * float4x4(0.2747103, -0.21807858, -0.029793987, 0.6682064, 1.4765272, 0.926166, -0.32688808, 0.33047917, -0.941909, -0.07245253, -0.5957468, 0.98880875, -1.1536825, 0.58989155, -0.400258, -0.46819204)
                    + f2.a * float4x4(-0.23951223, 0.27951422, 0.04619886, -0.15420479, 1.188544, -0.124153525, 0.28174505, 0.35690475, 0.36425048, -0.5442814, -2.1860595, 0.05643562, -1.014908, -0.68566865, 0.23366748, -0.31954426)
                    + f3.r * float4x4(-0.15146434, 0.2937901, 0.28906688, 1.1277881, -0.22999853, -0.4608051, 0.034244236, -0.39870712, -0.40206662, -0.81372994, 0.4229606, -0.3308785, 0.62302, 0.11165873, 0.046178464, -0.20739673)
                    + f3.g * float4x4(-0.20581964, 0.6634645, -0.13698591, 0.08633077, 0.13081934, -0.11588551, 0.52014667, -0.14265588, -0.020086177, -0.1444517, 0.22573383, 0.0841924, 0.042721815, -0.11391395, -0.81563896, 0.6255724)
                    + f3.b * float4x4(-0.9036911, -0.056490853, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.17211306, 0.02654986, -0.78283244, -0.11068815, 0.033377655, 0.1764604, -0.09185188, 0.1348516, -0.38256383, -0.683171)
                    + f3.a * float4x4(-0.24497046, -0.48786047, -0.41076207, 0.17386329, -0.53587294, -0.47997618, -0.36532435, -0.15983005, -0.8859921, -0.5575969, 0.851267, 0.067017615, -0.50743395, -0.24994016, 0.46895465, -0.17488585);
                
                intermediate_one_4 +=
                    f0.r * float4(0.4839757, -0.07190664, -0.10013747, 0.8437279)
                    + f0.g * float4(0.038326792, -1.271364, -0.78314507, 0.8662355)
                    + f0.b * float4(0.27545983, 0.94891614, 0.23880842, 0.7578063)
                    + f0.a * float4(-0.5632141, 0.04465319, 0.0119815245, -0.002587601)
                    + f1.r * float4(-0.09909693, -0.042418588, -0.0381799, 0.010549295)
                    + f1.g * float4(0.38729644, -0.04422071, 0.006529704, -0.012546775)
                    + f1.b * float4(0.2571824, -0.3079272, 0.2901726, -0.4699419)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.27575365, 0.13370223, 1.0916777, 1.1975887)
                    + f2.b * float4(-0.03321181, -0.7646903, -1.7116308, 1.9494478)
                    + f2.a * float4(-0.15790705, -0.43609518, -0.042950347, 0.6822993)
                    + f3.r * float4(-0.31578588, -0.76868004, -0.16391043, -0.77968824)
                    + f3.g * float4(-0.06745626, 0.32418048, 0.12001899, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.14135528, -0.12211306, -0.43502447, -1.485347);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.44556642, -0.30520087, -0.39025873, -0.14934582, -0.0894902, -0.26926774, -1.1259152, -0.01504274, 0.05088965, 0.4635324, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.14273316, 0.3420771, 0.1467457, 0.12595218, -0.2740743, 0.5658005, -0.113547556, 0.0853525, -0.07897107, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.2057865, -0.19580054, -1.0916723, 0.33752295, -0.35880274, 0.3651548, 0.0758119, 0.07819648, 0.1615908, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.1214175, 0.24709325, 0.06977898, -0.45036888, -0.33386984, 0.32871202, 0.15977074, -0.18334377, -0.8356263, -0.19441308, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.2448144, 0.386414, 0.23117383, 0.028431848, 0.034367908, 0.30481467, -0.17095205, -0.054268785, 0.09113789, 0.04223155, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.08920957, 0.39153597, -1.0376247, -0.16215004, -0.2392867, -0.49912694, 0.08397981, -0.7300823, 0.20025699, 0.8697498, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.5182921, -0.16972965, 0.14341925, -0.111404486, 0.1932936, -0.48493606, -0.09277833, 0.08839034, 0.053826027, -0.2136379, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.15897153, 0.562671, -0.05880587, 0.38385752, 0.13159889, 0.3263846, -0.052885357, -0.34538528, -0.53220314, -0.24739712, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.2520334, 0.7397155, 0.5249165, -0.34535694, -0.41432583, -0.14139003, 0.46136796, -0.27502608, 0.0052427547, -0.70694107, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.3686019, -0.41652685, 0.6863501, -0.5271443, -0.30253968, -0.9176582, 0.08626245, 0.44775122, 0.06953969, -0.16987182, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.75309646, 0.029825049, -0.35813504, -0.009490849, 0.6595171, -0.033077665, -0.21171632, 0.3158315, 0.0069740987, -0.6832085, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(1.4093301, 0.55703413, 0.43235627, 0.14083934, -0.31681436, 0.0071935384, 0.24672723, 0.017960353, 0.08752811, -0.20186423, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.7163494, -0.1757609, 1.3020456, -0.15285799, 0.41088977, -0.29903743, 0.85697436, -0.47761527, -0.07164539, -0.042828932, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.49601972, 0.39119205, -1.3693575, 0.11823503, -0.647584, 0.14424844, -0.030669887, 0.086554304, -0.016916541, 0.090107284, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.43860385, 0.08604174, 0.6179356, -0.45088288, -0.7105854, -0.0036042489, -1.0216935, -0.42432204, -0.036779705, 0.048100855, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4572901, 0.18231484, 0.21318537, 0.22297415, 0.5990944, 0.632279, 0.41721055, 0.33140424, 0.13631485, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.08649591, -0.07099383, -0.36753264, -0.18834926, 0.47505, -0.075371794, -0.3123341, 0.30484223, -0.11864978, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.123348445, -0.016233468, 0.2576311, 0.6370733, 0.3637735, 0.1612562, -0.16978243, 0.42424372, 0.43419674, -0.9617721, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.25523904, -0.2074635, -0.5289429, 0.42511493, 0.060501978, -0.45439944, 0.9214853, 0.030455183, -0.044459682, 0.24784754, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.19789593, 0.40464517, 0.22050862, -0.63613224, 0.5313538, -0.13467734, -0.52474314, -0.13105224, 0.14141533, -0.013791192, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-1.1682968, -0.18139789, 1.2437413, -0.14476758, -0.6117134, -0.060631633, 0.7255296, 0.24551573, 0.04427747, 0.57582563, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.0019411854, 0.0006160951, 0.00014795181
                );
                result +=
                    intermediate_two[0][0] * float3(-0.16254862, -4.727979e-05, -0.0008714483)
                    + intermediate_two[0][1] * float3(0.29724583, -6.8692534e-05, 0.001476357)
                    + intermediate_two[0][2] * float3(-0.06533956, -0.0017660512, -0.0019241128)
                    + intermediate_two[0][3] * float3(-0.034132134, -0.03251043, -0.13161136)
                    + intermediate_two[1][0] * float3(0.031097408, 0.577479, -0.47330147)
                    + intermediate_two[1][1] * float3(0.22486855, 0.48017702, 0.33449706)
                    + intermediate_two[1][2] * float3(0.12179181, -0.00011583473, 0.0006641627)
                    + intermediate_two[1][3] * float3(-0.07426885, -0.13300851, 0.12979513)
                    + intermediate_two[2][0] * float3(0.026555207, 0.009537894, 0.009116407)
                    + intermediate_two[2][1] * float3(-0.17021237, 0.00079049775, -0.0003060078);

                return result;
            }
            half3 EvaluateNetwork_Left_2_down(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, 0.0, -0.23217647, -0.4288902, -0.26582164, 0.73044604, 0.0, -0.43823242, -1.2524772, -0.20543814, 0.12948625, -0.6653084, 0.36648053, -0.829094, 0.0, 0.0
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, -0.5194647, -0.7252672, -0.7590357
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27707854, 0.6099058, -0.23123603, 0.6172958, 0.13849051, -1.2446239, 0.17986512, 0.7497924, 0.34835863, 0.34285513, -0.38489446, 1.207037, -0.4660787, 0.5687668, 0.08973843, 0.4047392)
                    + f0.g * float4x4(-0.0122274, -0.21404174, -0.065035306, 0.038285665, 0.28718066, -0.025826203, 0.21202193, 0.014849659, 0.042162944, -0.42798012, 1.1783549, 0.15341744, 1.2299241, -0.24553864, -0.19579898, -0.03450266)
                    + f0.b * float4x4(-0.72606903, -0.32344595, -0.12579888, 1.5237219, 0.27080444, -0.87337726, 0.12867361, 1.268125, 2.072587, 1.0355306, 0.02779457, 1.2118651, -0.34586582, 1.1000952, -0.49483043, -1.1295137)
                    + f0.a * float4x4(-0.21259804, 0.04090419, 1.7695765, 0.3410961, 0.12813315, 0.22709565, -0.44909367, -0.8714743, 0.047371924, 0.16899022, 0.2131527, -0.09415717, -0.025460524, 0.0021997208, -0.7673784, 0.25795314)
                    + f1.r * float4x4(0.124373354, -0.39944363, -0.07160778, -0.06415836, 0.008494072, -0.0142808035, -0.30746773, -0.07237228, 0.0010673266, 0.029454669, 0.15535097, -0.028071329, -0.010016, 0.007443795, -0.4353727, 0.17766696)
                    + f1.g * float4x4(-0.2600644, 0.09005738, -0.049449697, 0.17319003, 0.053558666, -0.08745566, -0.058393363, 0.1556643, 0.0009883776, -0.13111691, -0.16896792, 0.01999641, 0.04532345, -0.02813881, 0.14200862, -0.25185078)
                    + f1.b * float4x4(0.26453164, -0.031294916, -0.113093965, -0.86709774, -0.08815306, 0.28124994, -0.35071015, -0.36384442, -1.3773375, -0.5417497, -0.044236027, -0.5634445, 0.49350083, -0.3786161, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.117459536, -0.037833728, -0.04769018, -0.740594, 0.39388236, -0.40097582, -0.5040082, -0.0031309016, 0.11710768, -1.5534686, 0.16236125, 0.036725435, -0.56320965, -0.2944996, 0.19443494, -0.15155803)
                    + f2.b * float4x4(0.2747103, -0.21807858, -0.19700038, -0.5354748, 1.3267609, -0.23922348, -0.3436394, 0.22845612, 0.082354315, -0.048992533, 0.042337783, 0.31117952, 0.8337073, -0.07324779, -0.400258, -0.46819204)
                    + f2.a * float4x4(-0.23951223, 0.27951422, -0.19848993, -0.17051041, 1.9581815, 0.27568445, 0.29598776, 0.076330364, 0.064590186, 0.9983429, 0.06766922, 0.74432606, -1.871778, 1.9758519, 0.23366748, -0.31954426)
                    + f3.r * float4x4(-0.15146434, 0.2937901, 0.17157786, -0.03898675, -0.16560012, 0.5577152, 0.05091197, -0.44124272, -1.3612705, -0.33936107, 0.09943486, -0.5521746, 0.9529369, -0.62703544, 0.046178464, -0.20739673)
                    + f3.g * float4x4(-0.20581964, 0.6634645, -0.13698591, 0.08633077, 0.13081934, -0.11588551, 0.52014667, -0.14265588, -0.020086177, -0.1444517, 0.22573383, 0.0841924, 0.042721815, -0.11391395, -0.81563896, 0.6255724)
                    + f3.b * float4x4(-0.9036911, -0.056490853, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.17211306, 0.02654986, -0.78283244, -0.11068815, 0.033377655, 0.1764604, -0.09185188, 0.1348516, -0.38256383, -0.683171)
                    + f3.a * float4x4(-0.24497046, -0.48786047, -0.5282317, -0.9928488, -0.47147667, 0.5385544, -0.34865677, -0.20234783, -1.8451953, -0.08326068, 0.5277808, -0.15427329, -0.17744541, -0.9885966, 0.46895465, -0.17488585);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, 0.12698565, 0.51597506, 0.7003785)
                    + f0.g * float4(0.06488515, -0.4599096, 0.5982462, -0.3164203)
                    + f0.b * float4(0.3008439, 0.4923083, 1.1746458, 0.2986088)
                    + f0.a * float4(-0.5425608, 0.2852623, 0.75372237, 0.0061024823)
                    + f1.r * float4(-0.12611742, 0.090579316, 0.13702983, -0.00993626)
                    + f1.g * float4(0.3637557, -0.2123701, -0.33006507, -0.004867401)
                    + f1.b * float4(0.2819205, -0.50661904, -0.32559863, -0.32652056)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.25332278, 1.7232091, 0.7330565, 2.943906)
                    + f2.b * float4(-0.05775499, -1.6026063, 0.8992676, 1.1442474)
                    + f2.a * float4(-0.1836326, 0.21541722, -0.09041568, 0.4673879)
                    + f3.r * float4(-0.29104778, -0.96727556, -0.7797309, -0.6361808)
                    + f3.g * float4(-0.06745626, 0.32418048, 0.12001899, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.11661739, -0.32081518, -1.0507425, -1.3421216);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.018457506, 0.35282633, 0.20375432, -0.16514283, -0.26055202, -0.1847839, 0.36684197, -1.729689, -0.1070904, 0.52196974, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.14273316, 0.3420771, 0.1467457, 0.12595218, -0.2740743, 0.5658005, -0.113547556, 0.0853525, -0.07897107, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.2057865, -0.19580054, -1.0916723, 0.33752295, -0.35880274, 0.3651548, 0.0758119, 0.07819648, 0.1615908, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.00036230875, 0.32736692, 0.081674054, -0.4267696, -0.43566427, 0.3861647, 0.12913275, 0.07087007, 0.3174358, 0.078946725, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.83020574, 0.12852174, -0.08107334, 0.022320703, -0.15422493, 0.33019358, -0.468506, 0.61383057, 0.106693715, -0.9426601, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.0043977303, 0.0109633, 0.2091454, -0.17407577, -0.39687863, -0.47804022, 0.3949659, -0.34398422, -0.01594912, 0.11901729, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.7010762, -0.79106843, 0.00087998644, -0.13938172, 0.023731416, -0.40957603, -0.17113271, 0.27463496, -0.48236907, 0.49289757, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.12515555, 0.5577384, -0.07134927, 0.38385752, 0.13159889, 0.33938965, -0.0367086, -0.34538528, -0.49549398, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.80779326, 0.52127063, 0.090364225, -0.3723228, -0.5191987, -0.06275267, 0.15207003, 0.041877218, 0.8692721, -0.6997949, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-2.248289, -1.0599337, 0.28201953, -0.5109791, -0.41577289, -0.8549396, 0.60033166, 0.31793728, -1.1850929, 2.0651314, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.3340129, 0.87801605, -1.0884795, -0.15383512, 0.3996063, -0.04996742, -0.74056137, 0.9438382, 0.6909421, -0.28844061, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.2275744, 0.39867368, -0.22642161, 0.16078347, -0.44006392, -0.010496993, 0.046236977, 0.35455865, 0.38661754, 0.13984367, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.1494308, -0.09124779, 0.056751687, -0.11649433, 0.4452691, -0.23055433, -0.34585863, -1.005665, 0.22806789, -0.43711752, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.009886512, 0.23914522, -0.3285177, 0.18306114, -0.6237846, 0.19960395, -0.23590441, -0.48199707, 0.16828233, 0.20595041, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.067374565, 0.18306397, 0.16528822, -0.46709698, -0.88514125, 0.08307363, 0.5205597, 0.2103904, -0.035082426, 0.17778267, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4572901, 0.18231484, 0.21318537, 0.22297415, 0.5990944, 0.632279, 0.41721055, 0.33140424, 0.13631485, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.08649591, -0.07099383, -0.36753264, -0.18834926, 0.47505, -0.075371794, -0.3123341, 0.30484223, -0.11864978, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.3295034, 0.100454815, 1.1530519, 0.42225504, -0.14587022, -0.41375253, -0.23154227, 0.82931, 0.16526966, -0.12948234, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.7789047, -0.26515836, -0.24533144, -0.6510842, 0.36731583, -0.0532024, 0.27359232, -1.2845454, -0.18545699, -0.8409873, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.23184296, 0.098581426, 1.2657967, -0.2233246, -0.7485306, -0.1132224, -0.18826775, -1.743976, 0.014639005, -0.18431701, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.061327837, 0.00053246564, 0.00011530261
                );
                result +=
                    intermediate_two[0][0] * float3(-0.133341, -0.0027455366, -0.0024224308)
                    + intermediate_two[0][1] * float3(0.026332788, -0.004666263, -0.0010297783)
                    + intermediate_two[0][2] * float3(0.020945035, 0.0004284937, -3.46626e-05)
                    + intermediate_two[0][3] * float3(-0.055711664, -0.017575337, -0.02969602)
                    + intermediate_two[1][0] * float3(0.071100615, 0.5455614, -0.44152158)
                    + intermediate_two[1][1] * float3(0.3034352, 0.4942921, 0.31036368)
                    + intermediate_two[1][2] * float3(0.035663024, 0.0012233241, -0.00035621895)
                    + intermediate_two[1][3] * float3(-0.034990966, -0.00022534268, -0.0006855262)
                    + intermediate_two[2][0] * float3(0.042730052, 0.009218998, 0.0028889077)
                    + intermediate_two[2][1] * float3(-0.1018773, -0.00071686547, -0.00088560896);

                return result;
            }
            half3 EvaluateNetwork_Left_2_up(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.5048821, 0.15257236, 0.16063204, -0.16484033, 0.23998617, 0.083774745, -1.2093816, -0.068829745, 0.36582455, 0.04115485, -0.09989259, 0.16518804, -0.98167616, -0.10146892, 0.0831328, 0.27286616
                );

                float4 intermediate_one_4 = float4
                (
                    0.40056595, -0.22854611, -0.1972804, 0.35292032
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.42337623, -0.10362217, -0.31169045, 0.59353596, -0.44746384, 0.06961285, 0.9088795, 0.14703503, 0.03751164, -0.11091326, 0.17238533, 0.10175711, 0.7184709, 0.15670478, 0.20804548, -0.38925147)
                    + f0.g * float4x4(0.11592284, 0.48830518, 0.0005619852, -0.027266826, -0.71266097, -0.24015151, 0.0020250666, 0.063548, 0.056713294, -0.6008601, 0.23774609, -0.01001637, -0.31632692, -0.046533406, -0.052334726, 0.0050661582)
                    + f0.b * float4x4(0.6770087, 0.005434909, -0.46268296, 0.66942286, -0.22857447, 0.26063618, 1.8995446, -0.08754161, 0.096683495, 0.09869267, -0.16962764, -0.16487165, 1.7552515, -0.10220888, 0.073792666, -0.5942578)
                    + f0.a * float4x4(-0.25612244, -0.027047807, -0.017567888, 0.14386867, -0.026326142, 0.06200058, -0.012652594, 0.24262804, -1.8934269, 0.017396485, -0.18164024, -0.095717005, -0.04875093, -0.22286832, 0.0009897947, -0.025748655)
                    + f1.r * float4x4(-0.0131700495, 0.009486011, -0.0025430787, 0.030572733, 0.030737005, -0.0020279018, 0.0021285035, 0.22203156, 0.048739925, 0.0074404045, -0.036552906, 0.19921984, -0.002086491, -0.13751543, -0.049144745, -0.0030237043)
                    + f1.g * float4x4(-0.06802963, 0.010101027, 9.1570284e-05, 0.08077139, 0.042373635, -0.018936027, -0.009651477, 0.07579264, 0.43961388, -0.02461914, 0.030141562, 0.16795631, -0.100235745, 0.18402985, -0.095365345, 0.0017520646)
                    + f1.b * float4x4(-0.8458611, -0.010035991, 0.08147734, -0.4205803, 0.29813352, 0.25580406, -0.9314827, -0.13202387, 0.43053594, -0.07591609, 0.03321913, 0.16217977, -0.5686073, 0.04137686, -0.07672432, 0.3533121)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.9943605, -1.0504483, 0.051940512, -0.25022405, -0.051785067, -1.1468377, 0.15040073, 0.034632802, -0.06109342, 0.5126913, -0.006770164, 0.030998114, 0.028985174, 0.22191986, 0.17332524, 0.044311155)
                    + f2.b * float4x4(0.086967744, 1.3037052, 0.0027151487, -0.026770761, 0.17225417, 0.1298514, 0.010625574, -0.1290271, 0.10677947, -1.1466292, -0.24087828, 0.0039631287, 0.113887504, 0.030206472, 0.22896466, 0.0006334319)
                    + f2.a * float4x4(1.945079, -0.2635075, 0.018032897, 3.2467332, -0.03333998, -0.2714344, -0.47261074, -0.09619644, 0.04952315, -0.048346806, -0.1034396, -0.09369834, -0.6093254, 0.13345781, 0.0069237947, -0.19064245)
                    + f3.r * float4x4(-0.77529144, 0.30918223, 0.38844627, -0.17040576, 0.40533143, 0.1544885, -1.015498, 0.23576897, 0.0706869, -0.27777964, -0.17335445, 0.1381293, -0.62989956, 0.019607693, -0.20858425, 0.22304676)
                    + f3.g * float4x4(0.19896802, 0.13919127, -0.048276633, 0.04119, 0.10208392, -0.06988573, -0.014095902, -0.020508826, -0.08804569, -0.1676237, 0.042194664, 0.15855643, 0.055818647, 0.093182504, 0.20579877, 0.032057106)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(-0.6088992, 0.048712417, 0.07893066, -0.33742043, 0.28764403, 0.12908547, -0.8491331, 0.10900387, 0.04973072, -0.0718362, -0.15480515, 0.13982192, -0.7622256, -0.16119322, -0.13857415, 0.13038203);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.8576963, -0.04824978, 0.03698927, -0.12793094)
                    + f0.g * float4(-0.45851645, -0.109698534, -0.09569588, 0.003989041)
                    + f0.b * float4(-0.8289659, -0.092971265, -0.0845595, -0.4134999)
                    + f0.a * float4(-0.029715171, 0.154459, 0.064301014, -0.7073667)
                    + f1.r * float4(0.001257718, -0.0751974, -0.066839516, -0.02765737)
                    + f1.g * float4(-0.082418896, 0.08088711, 0.07516375, -1.1757486)
                    + f1.b * float4(0.789007, 0.032370985, -0.01192373, 0.3463767)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.08022485, -0.17695737, -0.21805188, -0.1572558)
                    + f2.b * float4(0.30370143, -0.0939486, 0.12339538, 0.017892944)
                    + f2.a * float4(-0.1765675, 0.1198003, -0.21833882, 0.007555105)
                    + f3.r * float4(0.7302083, -0.042660743, 0.028912425, 0.27479106)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.19168133)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.87739265, -0.18271965, -0.20150936, 0.113097765);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.08640498, 0.030407716, -0.15129572, 0.5462813, -0.74939924, -0.20783041, -0.56063414, -0.21229006, -0.16020782, 0.17540383, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.005493673, -0.16752589, -0.27986044, -0.00077854266, 0.038524035, 0.081158556, 0.06227508, 0.08057143, 0.036531653, -0.026836663, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.94302654, -0.19225839, -0.040258426, -0.012725461, 0.13503723, 0.015844997, -0.13385613, -0.22806297, -0.014449253, 0.009285256, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(1.1064368, -0.050893217, 1.412189, 1.1249038, 1.2802364, 0.043462195, -1.9351546, 0.17549938, -0.15988585, -0.54243124, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.019303383, -0.13542108, -0.37970945, -0.16317648, 0.042792734, -0.025919449, 0.0864411, -0.18515775, 0.0058970205, 0.1832284, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.18878752, 0.014743608, 0.027573513, 0.15098122, -0.54811656, -0.029961938, -0.47643504, -0.19461633, -0.09741438, -0.20296039, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.92929184, 0.085569374, -0.07674258, 0.02041311, 0.0005907756, -0.09559036, -0.17418635, 0.024309166, 0.096384525, -0.00036529667, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.09307671, -0.07823067, 1.1912955, 0.9192099, 0.9233366, -0.08304594, -0.3495908, -0.23892961, -0.1625917, -1.1836255, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.02411081, 0.17141926, 0.07376946, 0.17436467, -0.0054886853, -0.026562018, 0.10451114, 0.15855785, 0.16353141, -0.12960194, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(0.102809004, -0.101796575, 0.00063391385, 0.004364005, 0.10273841, 0.17129257, 0.4721763, 0.11103637, 0.028602503, -0.0440742, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.79464555, -0.17635144, -0.019264601, 0.11875284, 0.33277512, 0.16443525, -0.07255547, -0.057542294, -0.18532504, -0.03403315, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.21265592, 0.14824663, -0.18009312, 0.089902826, -0.09030866, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.19989155, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.038740553, 0.021639427, -0.17752258, 0.21579754, -0.18147314, 0.14260566, -0.19673547, -0.03486403, -0.038760606, -0.040751565, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.04668694, -0.27250192, -0.9772622, -0.9708817, -0.7242581, -0.16567852, 0.5275272, 0.15310553, -0.18720505, 1.1906071, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.04581824, 0.042434976, 0.19268289, 0.108934864, -0.102018565, -0.060472723, 0.03198902, -0.12122715, -0.11131186, -0.11446422, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.7961044, 0.071213074, 1.5857472, 1.0158178, 1.0211536, -0.17813031, -0.95814127, -0.042171653, -0.14215298, -1.8969461, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.3797285, -0.03767362, 0.6039225, 0.35657555, 1.1591699, -0.18170677, 0.47049913, 0.04201686, 0.015482348, -0.4694864, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.029753542, -0.19171256, 0.018108338, 0.09193265, 0.09102238, 0.10850722, 0.169343, -0.053658135, 0.13391677, -0.116010115, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.3425593, 0.0044743354, 0.00070344633
                );
                result +=
                    intermediate_two[0][0] * float3(-0.030478355, -0.0013327084, -0.00037382226)
                    + intermediate_two[0][1] * float3(0.0153921805, -0.22472659, 0.07301304)
                    + intermediate_two[0][2] * float3(-0.08376526, -0.0031252832, -0.00044240954)
                    + intermediate_two[0][3] * float3(-0.37262234, -0.0015163996, -0.00052703905)
                    + intermediate_two[1][0] * float3(-0.05045054, -0.002312739, -0.0004977358)
                    + intermediate_two[1][1] * float3(-0.1785503, 0.096145086, -0.070472136)
                    + intermediate_two[1][2] * float3(0.02266817, 0.007623103, 0.0035845092)
                    + intermediate_two[1][3] * float3(0.14004923, -0.08592419, -0.07062844)
                    + intermediate_two[2][0] * float3(-0.09162284, -0.19981144, 0.04418703)
                    + intermediate_two[2][1] * float3(-0.35087305, -0.0029449146, -0.0012253696);

                return result;
            }
            half3 EvaluateNetwork_Back_L_R(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, 0.54665756, -0.08802544, 0.0962691, 0.059172254, 0.0, -0.19488665, -0.011713133, 0.059843544, 0.060884297, -0.19524464, -0.012156704, -0.041276295, 0.04620589, 0.0, 1.036588
                );

                float4 intermediate_one_4 = float4
                (
                    0.019991305, -0.00919248, -0.05245401, 0.111072436
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27707854, 0.0019529971, -0.5507642, 0.641821, 0.19583465, -0.5138307, -0.34060374, -0.001551746, 0.21348324, 0.7481074, -0.7159709, 0.24272607, 0.69041127, -0.6124209, 0.08973843, 0.7255649)
                    + f0.g * float4x4(-0.0122274, 0.902385, 0.13501868, -0.2001536, -0.45731616, -0.061149582, 0.22423632, -0.0022986569, 0.20907429, 0.010511468, 0.57821393, 0.14206831, 0.3186132, -0.028310126, -0.19579898, 0.33787784)
                    + f0.b * float4x4(-0.72606903, 0.22340484, 0.084814906, 0.6484734, 0.19895972, -0.06371774, -0.06624914, 0.6118515, 0.65099365, 0.42050904, -0.54559577, 0.37528175, 0.1123306, 0.24954915, -0.49483043, -0.09256181)
                    + f0.a * float4x4(-0.21259804, -0.020453716, 0.5483115, -0.0009449173, -0.0025264963, 0.4714436, -0.0647849, -0.013184109, 0.025769426, 0.015375739, -0.020327047, 0.014225343, -0.009095617, -0.016922818, -0.7673784, 0.038498458)
                    + f1.r * float4x4(0.124373354, 0.04111992, 0.30423203, -7.6171054e-05, 0.0002756389, -0.44881627, 0.01142949, 0.0100972485, -0.008886856, -0.0090112, -0.003104537, -0.015050649, 0.016068053, 0.0062626805, -0.4353727, -0.014813457)
                    + f1.g * float4x4(-0.2600644, -0.018938167, 1.3848515, 0.015814224, -0.027961375, 0.08261935, 0.0068501346, -0.005142599, -0.03042087, -0.006588826, -0.015849365, 0.010863445, -0.015341237, 0.012943705, 0.14200862, -0.0033282281)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.7343636, -0.050930507, 0.11662163, 0.2868875, 0.3251377, 0.007921978, 0.43334123, 0.2933349, 0.17313108, 0.3713785, 0.5295703, -0.18431436, 0.22455697, -0.26339206, -1.0090263)
                    + f2.g * float4x4(-0.117459536, -0.02178399, 0.25992954, -0.63402045, -0.056503877, -0.037164662, -0.6226891, -0.009098363, -0.48931864, -0.6313908, 0.06172867, -0.22201763, -0.23808187, -0.49037263, 0.19443494, 1.6750356)
                    + f2.b * float4x4(0.2747103, -0.13822828, -0.7007496, -0.5857476, -0.26744056, 0.08917348, -0.05515319, -0.15692745, 0.21161519, -0.2915697, 0.4593406, 0.6091235, 0.105023205, -0.042114865, -0.400258, -0.27234742)
                    + f2.a * float4x4(-0.23951223, -0.22585978, -0.3753602, -0.62639195, -0.06637423, 0.08136868, 0.326473, -0.6180934, -0.6351306, -0.5084172, 0.5723623, -0.5918783, 0.07800893, -0.17383675, 0.23366748, 0.035487615)
                    + f3.r * float4x4(-0.15146434, -0.009472312, 0.31420738, 0.0032161837, -0.0003007898, -0.1727081, 0.074142486, -0.0033204244, -0.0067421035, -0.018279847, 0.006759198, 0.002677195, 0.058277424, -0.015420977, 0.046178464, -0.016336499)
                    + f3.g * float4x4(-0.20581964, -0.031192489, -0.19606881, 0.24831322, -0.009401985, -0.11588551, -0.018938204, 0.00014999908, 0.07288722, 0.20779161, -0.016314343, 0.0667691, 0.0026744665, -0.0071382364, -0.81563896, 0.005206887)
                    + f3.b * float4x4(-0.9036911, 0.4893363, -0.36444524, -0.45233196, -0.23734239, -0.31305373, -0.022637937, 0.014817142, -0.722916, -0.04981724, -0.160404, 0.16431935, -0.13287418, 0.18106706, -0.38256383, 0.3520506)
                    + f3.a * float4x4(-0.24497046, 0.058783382, -0.38409418, -0.46764597, -0.14647894, -0.19187808, -0.54350466, 0.2241483, -0.533039, 0.18305355, 0.20304622, 0.49887285, -0.5852342, -0.11332113, 0.46895465, 0.8617344);
                
                intermediate_one_4 +=
                    f0.r * float4(0.8703752, -0.23875283, -0.53415763, 0.40170717)
                    + f0.g * float4(0.04018609, -0.742513, -0.075179026, -0.110411584)
                    + f0.b * float4(0.3209434, 0.47181618, 0.29939908, 0.12507494)
                    + f0.a * float4(0.045100674, 0.010131998, 0.0015442229, -0.0041632424)
                    + f1.r * float4(-0.032670103, -0.009188101, 0.0075931037, -0.007854281)
                    + f1.g * float4(-0.039005592, 0.03415863, 0.033506438, -0.0025494094)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.25688034, 0.46597558, 0.12930416, -0.15540196)
                    + f2.g * float4(0.9674089, 0.17508917, 0.62060285, -0.8776332)
                    + f2.b * float4(-0.11134785, -0.51225084, -0.11138668, 0.103736535)
                    + f2.a * float4(-0.15987104, 0.01303944, 0.25136822, -0.37662202)
                    + f3.r * float4(-0.019150907, -0.013876487, -0.01956217, -0.010737653)
                    + f3.g * float4(0.0043470776, -0.021216832, -0.0042707915, 0.026005048)
                    + f3.b * float4(-0.37525505, -0.24432856, -0.03440003, 0.044947293)
                    + f3.a * float4(-0.09663917, 0.18947896, -0.37804857, -0.47180986);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.031534787, -0.14224699, -0.15435322, -0.032808, -0.2257294, -0.0205947, -3.8856833e-05, -0.17005259, -0.07403702, -0.07067173, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.14273316, 0.3420771, 0.1467457, 0.12595218, -0.2740743, 0.5658005, -0.113547556, 0.0853525, -0.07897107, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.15929002, 0.07374248, -1.140625, 0.24813218, -0.58137894, 0.3587989, 0.08018432, -0.16747048, 0.08437819, -0.7406496, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.23904659, 0.26190346, -0.5665951, -0.25693333, -0.30694672, 0.52394265, 0.37741262, -0.16796798, 0.03947091, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.3211955, -0.061141253, -0.26567966, -0.2515992, -0.14425346, 0.42906883, 0.41175517, -0.20918946, -0.432221, -0.28122014, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.2806616, -0.23383825, -0.3250016, 0.20774996, -0.44117537, 0.06959892, 0.17454772, -0.8199726, -0.52451235, 0.09052539, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.06819809, 0.5300192, -0.13584857, -0.22924787, -0.07844203, -0.07766027, 0.054107036, -0.5197042, -0.5618371, -0.16597311, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.1764011, 0.09543722, -0.032157466, 0.13149092, -0.55021465, -0.36265987, -0.17512645, -0.404172, 0.19194534, -0.13439062, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.15656978, -0.12362223, 0.136361, -0.6652181, -0.51623523, -0.68501806, 0.2631202, 0.29187554, -0.15188527, 0.078538865, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.4706772, 0.16720201, -0.5017202, 0.50327575, 0.4420358, -0.35034773, -0.5998271, 0.14970592, 0.23939489, -0.08242243, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.17375562, -0.07642623, -0.21951331, 0.3727591, -0.29934064, 0.17772312, 0.115703, 0.0035619834, -0.40122956, -0.14142118, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.10364566, -0.029849907, -0.017482711, 0.3904735, 0.28710046, 0.45634833, -0.048242494, -0.56280315, 0.07698064, 0.019352885, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.44666734, -0.28186628, -0.41829237, 0.19785745, -0.8295936, 0.07592088, -0.11392405, -0.05299977, -0.009989756, -0.33804253, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.5417249, 0.1340633, 0.5756874, -0.05602561, -0.74264526, 0.42262137, -0.24519038, -0.47925913, -0.08275722, 0.3565347, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4572901, 0.18231484, 0.21318537, 0.22297415, 0.5990944, 0.632279, 0.41721055, 0.33140424, 0.13631485, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.01080541, -0.16116484, -0.50415206, -0.5636795, 0.21549194, -0.36118725, 0.05562565, 0.118652806, -0.33125716, -0.3684695, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.1276833, 0.3790922, 0.16055343, 0.2700246, 0.14872769, 0.43436435, 0.034484435, 0.2813244, 0.35649526, 0.089488365, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.11996741, 0.024688361, 0.3448717, 0.03928402, -0.12096781, -0.027730405, -0.15001237, -0.10798154, -0.09837478, 0.13395654, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.013876089, 0.27969515, -0.42258474, -0.0075337477, 0.3895316, 0.05846852, 0.38724232, -0.26680282, -0.08405404, -0.32679918, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.15741654, 0.21090499, -0.1660464, -0.40354994, -0.76375, -0.017461719, 0.34626487, 0.11314548, -0.20975608, -0.06067144, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.11005669, 0.03606395, 0.06798379
                );
                result +=
                    intermediate_two[0][0] * float3(-0.11603082, 0.029312579, -0.06778124)
                    + intermediate_two[0][1] * float3(0.009424065, -0.09272857, -0.037462726)
                    + intermediate_two[0][2] * float3(-0.075725235, -0.05525111, -0.25165966)
                    + intermediate_two[0][3] * float3(-0.05879983, -0.07462626, -0.07061745)
                    + intermediate_two[1][0] * float3(-0.07552651, 0.23163198, -0.14137433)
                    + intermediate_two[1][1] * float3(0.15502562, 0.12518598, 0.09283106)
                    + intermediate_two[1][2] * float3(0.0030651027, 0.12590119, 0.05776386)
                    + intermediate_two[1][3] * float3(-0.027110573, -0.00415726, 0.122293286)
                    + intermediate_two[2][0] * float3(0.28172046, 0.024609404, -0.18377185)
                    + intermediate_two[2][1] * float3(0.01749471, -0.16028182, 0.3597787);

                return result;
            }
            half3 EvaluateNetwork_Back_L_R2(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.048351392, 0.013510626, 0.07520347, 0.38734514, 0.04235604, -0.1929839, -0.0832454, 0.007023833, -0.13584566, 0.3611594, 0.010459403, 0.26441804, -0.11658309, -0.10146892, 0.26401672, 0.17665501
                );

                float4 intermediate_one_4 = float4
                (
                    -0.057861976, -0.22854611, -0.1972804, 0.27162853
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.34057352, -0.5369766, -1.6870224, 0.13186364, -0.59921855, 0.6086122, 0.07268171, 0.9048283, 0.6093036, -0.0035240203, -0.22574976, 0.3662015, 1.2582906, 0.15670478, 1.0819497, 0.28148523)
                    + f0.g * float4x4(1.1065447, 0.14870119, 1.31049, 0.0034708588, 0.63725513, 0.11967397, 1.4386588, 0.50891185, 1.2947339, 0.13350926, 0.996, 0.27863124, -0.25764358, -0.046533406, 1.0696337, -1.0398616)
                    + f0.b * float4x4(0.2916913, 0.10894473, -0.26686457, -0.086199306, 0.17311786, 0.3035679, -0.09226834, -0.16325027, 0.34042135, -0.1819479, -0.27986023, -0.2586257, 0.096556984, -0.10220888, -0.10694004, -0.24346495)
                    + f0.a * float4x4(-0.010602356, -0.026185349, -0.010593008, 0.0029645266, -0.001802788, 0.014287179, -0.021485947, 0.017236521, 0.00022468474, 0.031229096, -0.015926203, 0.030504074, 0.031959515, -0.22286832, 0.015640577, -0.00783316)
                    + f1.r * float4x4(0.0127509525, -0.014887655, 0.011490101, 0.004416607, -0.009281609, 0.010714206, 0.049936615, 0.04121728, 0.003830687, 0.0023451194, 0.02350477, -0.0008560288, 0.0042263507, -0.13751543, 0.03594344, 0.0072480394)
                    + f1.g * float4x4(0.06145244, -0.027030513, 0.0014732272, 0.021716325, 0.08073394, -0.005195083, -0.06801204, -0.02004862, -0.045419313, -0.05359209, 0.023727752, 0.033522353, 0.028524373, 0.18402985, -0.03809686, 0.016602803)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.24818859, 0.047453955, -0.29665905, -0.25543377, -0.23528843, 0.4434867, -0.31877655, 0.1488346, 0.45589232, -0.14354436, -0.24622951, -0.102939956, -0.2673993, 0.15617773, -0.20585035, 0.015359806)
                    + f2.g * float4x4(-0.17276667, -1.2335813, 2.346186, -0.048917208, -0.3406155, -1.7198186, -0.108996764, -0.2416539, -0.29379347, 1.1251523, 0.06861155, 0.7244034, 1.1156783, 0.22191986, 0.12829947, -0.19123983)
                    + f2.b * float4x4(0.29226744, 0.19780357, 1.2268727, 1.2582124, -0.3734082, 0.056645516, -0.061449457, -0.8064792, 1.0929714, 0.077988505, -0.33176768, -0.9301259, 0.15238057, 0.030206472, 0.026422719, -0.6008241)
                    + f2.a * float4x4(0.021259224, 0.76516724, 1.6761847, 1.8219211, 0.14631018, 0.38004762, -0.5475933, 0.5319457, -0.47613996, -0.18499435, -0.22819476, 0.13308339, -0.08696705, 0.13345781, -0.5600793, 0.23436762)
                    + f3.r * float4x4(-0.2220761, 0.17013575, 0.3029856, 0.38170525, 0.20769624, -0.12222071, 0.11072655, 0.3116195, -0.43085068, 0.042183068, -0.06301707, 0.23734441, 0.23525123, 0.019607693, -0.027709017, 0.12681271)
                    + f3.g * float4x4(0.13121174, 0.15393284, 0.094248824, 0.23949745, 0.11380449, -0.27904463, 0.13191415, 0.055332538, -0.39032698, 0.025394604, 0.15253867, 0.2551735, 0.13801768, 0.093182504, 0.38666788, 0.1488214)
                    + f3.b * float4x4(0.15929614, -0.11715961, 0.35875383, 0.109419264, 0.15813631, -0.020140722, 0.09520177, 0.10274439, -0.5322131, 0.10667167, 0.048350763, 0.14809777, 0.13765527, -0.1798496, 0.115262136, 0.2563485)
                    + f3.a * float4x4(-0.055698447, -0.09034209, -0.0064903987, 0.21472551, 0.09003038, -0.1476832, 0.2770712, 0.18486199, -0.4519534, 0.24814045, -0.044454515, 0.23905458, 0.1028904, -0.16119322, 0.04231468, 0.03418034);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.23891248, -0.04824978, 0.03698927, 0.9749175)
                    + f0.g * float4(0.6268364, -0.109698534, -0.09569588, -0.5053276)
                    + f0.b * float4(-0.2988073, -0.092971265, -0.0845595, -0.07597217)
                    + f0.a * float4(-0.030420514, 0.154459, 0.064301014, 0.027187046)
                    + f1.r * float4(0.03645668, -0.0751974, -0.066839516, -0.012451302)
                    + f1.g * float4(-0.039600525, 0.08088711, 0.07516375, 0.043340042)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.25479087, 0.015095115, -0.06911835, 0.046789534)
                    + f2.g * float4(-0.44960108, -0.17695737, -0.21805188, 0.77814215)
                    + f2.b * float4(1.5568143, -0.0939486, 0.12339538, 0.6976331)
                    + f2.a * float4(1.1622497, 0.1198003, -0.21833882, 0.01260227)
                    + f3.r * float4(0.2716961, -0.042660743, 0.028912425, 0.19351998)
                    + f3.g * float4(0.036780767, 0.051097125, -0.22173482, 0.31626096)
                    + f3.b * float4(0.04773482, -0.129855, -0.17914948, -0.093174174)
                    + f3.a * float4(0.41891646, -0.18271965, -0.20150936, 0.031828657);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.009895939, 0.061522767, 0.38312596, 0.18146916, 0.056947354, -0.20783041, -0.25480023, -0.16852172, -0.12620662, 0.73199254, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.07836707, -0.18209557, 0.4452059, -0.07828785, 0.290886, 0.081158556, -0.021288155, 0.111098476, 0.06350679, 0.15685312, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.13627648, -0.20490254, -0.22989374, -0.0928008, -0.102548316, 0.015844997, -0.030194303, -0.19669518, 0.015340852, -0.114692025, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(1.0525324, -0.06407569, -0.095546484, 0.068111196, 1.6994305, 0.043462195, -0.08600185, 0.21654546, -0.15988585, -1.1748834, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.24895099, -0.169486, -1.531244, 0.35060528, -0.44425794, -0.025919449, -0.12916605, -0.15313733, 0.03500768, -0.0013874256, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.020439398, -0.0031081107, -0.11912186, -0.2319924, 0.24633925, -0.029961938, 0.09229661, -0.15707734, -0.09741438, 0.048849165, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(0.3024652, 0.065202594, 0.19987191, -0.08051884, 0.22516294, -0.09559036, -0.043539263, 0.019137632, 0.096384525, -0.1839682, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.12056164, -0.15634292, -0.27064332, -0.15701568, 0.12026493, -0.08304594, -0.12860632, -0.23309384, -0.1625917, 0.5305551, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.11799544, 0.11371374, -0.6157734, 0.1649189, -0.35470322, -0.026562018, 0.08991546, 0.1475446, 0.16353141, -0.07168018, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.13039556, -0.110739924, -0.233141, 0.07192154, -0.32353833, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.11116612, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.35405326, -0.1973733, -0.15394773, 0.22359844, 0.18843633, 0.16443525, -0.08936087, -0.018654285, -0.18959448, -0.27885377, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.011874641, 0.10313872, -0.15401024, 0.14203604, -0.31818977, -0.20882714, -0.2009026, -0.06673374, -0.05371023, -0.1361008, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.17370854, -0.04480779, 0.38178727, 0.07784659, 0.15344416, 0.14260566, -0.2246417, -0.046870846, -0.038760606, 0.12543944, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.16841008, -0.25430372, 0.1166335, -0.43791217, 0.45175064, -0.16567852, 0.080546714, 0.19862007, -0.1646878, 0.18357788, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.009280592, -0.029818498, -0.006796974, 0.3448407, -0.2663696, -0.060472723, -0.027086308, -0.13103704, -0.11131186, -0.52027756, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.14396085, 0.04294445, 0.18853293, -0.11424141, 0.36030227, -0.17813031, -0.043337543, -0.007722902, -0.13943538, 0.12933466, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.2539396, 0.0122883385, 1.063325, -0.35382065, 0.54147035, -0.18170677, 0.11480512, 0.092327364, 0.047773615, 0.1154826, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.07298457, -0.22069351, 9.9905665e-05, 0.42754552, -0.48326436, 0.10850722, 0.15628865, -0.012599851, 0.1653651, 0.010830038, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.015449976, -0.095078126, -0.06657258
                );
                result +=
                    intermediate_two[0][0] * float3(-0.0031046018, -0.049652122, 0.081732586)
                    + intermediate_two[0][1] * float3(-0.00024904328, -0.20932531, 0.05946842)
                    + intermediate_two[0][2] * float3(-0.07053565, -0.024305986, -0.034964006)
                    + intermediate_two[0][3] * float3(-0.041494228, 0.13141099, 0.021448482)
                    + intermediate_two[1][0] * float3(0.08226147, 0.1075966, 0.0288334)
                    + intermediate_two[1][1] * float3(-0.1785503, 0.096145086, -0.070472136)
                    + intermediate_two[1][2] * float3(0.2406857, 0.24536137, 0.25505146)
                    + intermediate_two[1][3] * float3(0.12482581, -0.062351372, -0.057807844)
                    + intermediate_two[2][0] * float3(-0.100581415, -0.218291, 0.048644125)
                    + intermediate_two[2][1] * float3(0.09771374, 0.096762694, 0.0934152);

                return result;
            }
            half3 EvaluateNetwork_Back_L_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3) 
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.29475737, 0.39767078, -0.014634549, 0.058955815, -0.15986098, 0.28048795, -0.057280626, 0.12273896, 0.0, -0.00240227, 0.16067787, -0.050909244, -0.10091152, -0.21552238, -0.007848427, 0.3185953
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, -0.07051531, 0.035674866, 0.17366204
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.435985, 0.79064095, -0.4489101, 0.1421184, -0.37759593, -1.0092672, -0.5850506, 1.6926881, -0.9045647, 1.8813261, -0.05200512, 0.5125845, 1.1223044, -1.4090327, 0.091473915, 1.144537)
                    + f0.g * float4x4(1.5307939, 0.68029886, 0.2112762, -0.47141105, -2.3202677, -0.78063333, 1.0127463, -0.042556606, 0.07720297, 0.4424646, 0.54974145, 0.16954702, 1.7187383, 0.88300127, -0.19960943, 0.80197626)
                    + f0.b * float4x4(-0.4314111, -0.7210606, 0.18745798, 0.49343786, 0.29990953, -0.34421036, 0.18593849, 0.500883, 0.5911784, 0.36308578, -0.51064456, 0.4382833, 0.25454494, 0.41879296, -0.48699304, -1.4482448)
                    + f0.a * float4x4(0.004244005, 0.016069207, 0.5142804, -0.00094539474, 0.025208792, -0.01239688, -0.020542085, 0.04083975, -0.10612589, 0.025820501, 0.001936666, -0.082278125, 0.02051118, 0.009393863, -0.7596449, 0.03051408)
                    + f1.r * float4x4(0.006454461, -5.95339e-05, 0.1583243, 0.0011894626, 0.0056885746, -0.004875994, 0.013736454, -0.0033035984, 0.20689763, -0.019154638, 0.011837995, -0.07822381, -0.0035317868, -0.0009896134, -0.42970243, -0.0018432114)
                    + f1.g * float4x4(-0.0026035656, -0.009332535, 1.3186444, 0.004628426, -0.06838258, 0.009559783, 0.03511876, -0.03445029, 0.73951864, -0.03673217, 0.011578616, 0.5706027, -0.03969556, -0.031557187, 0.1493985, -0.01966798)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(0.02396929, -0.58534634, -0.12432205, 0.15392469, 0.50594836, 0.044678066, -0.1296866, 0.29883146, 0.35317352, 0.23641399, 0.015457767, 0.5682931, -0.12467697, 0.48624405, -0.25554398, -0.29100856)
                    + f2.g * float4x4(-0.8626076, -0.22052424, 0.18989545, -0.3423269, -0.27423725, -0.3851982, -0.8747031, -1.2948151, -0.6318568, -1.6803098, 0.021402461, -0.053849235, -0.9760212, -1.9742161, 0.2009385, 0.3653626)
                    + f2.b * float4x4(2.0673273, 0.1776319, -0.6660952, -0.66160077, 0.07023595, 0.86336374, -0.8448335, -0.090768315, 0.10808924, 0.43468148, 0.6874295, 0.10667128, 1.171358, -0.7266094, -0.408156, -0.7199187)
                    + f2.a * float4x4(2.2919877, 1.7199677, -0.2787221, -2.3770528, 1.1950428, 2.7223496, 0.8406956, -0.3733847, -0.046388548, 0.47256586, 1.2002681, -3.686908e-05, 2.4610474, 2.067996, 0.24148487, 0.36662364)
                    + f3.r * float4x4(-0.44622415, 0.6914318, 0.38912335, 0.44887695, -0.059647344, 0.10775958, -0.0063639274, 0.11971016, -0.108878605, -0.1364332, 0.13063625, 0.06221525, 0.4855086, -0.013431579, 0.03833095, 0.11118925)
                    + f3.g * float4x4(-0.50057685, 1.0611067, -0.15161881, 0.14528853, -0.02904874, 0.16458572, 0.4628921, -0.019917965, -0.020086177, -0.14694521, 0.38642207, 0.033289008, -0.05818728, -0.32941443, -0.8234863, 0.94417155)
                    + f3.b * float4x4(-1.1985303, 0.34116912, -0.2910624, -0.48963118, -0.45754793, -0.032589287, 0.114848524, 0.14927568, -0.78283244, -0.113184154, 0.19404995, 0.12555702, -0.19275859, -0.0806457, -0.39041093, -0.3645613)
                    + f3.a * float4x4(-0.5397227, -0.090225846, -0.31070483, -0.50498396, -0.36551872, 0.08858777, -0.40593255, 0.35862485, -0.59286225, 0.11977485, 0.55903006, 0.4601266, -0.64488155, -0.37500983, 0.46110657, 0.14371373);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.31913152, -0.36272696, -0.068127304)
                    + f0.g * float4(0.06488515, -1.0389882, -1.1828027, -1.1678157)
                    + f0.b * float4(0.3008439, 0.5507126, 0.31628335, -0.15958004)
                    + f0.a * float4(-0.5425608, 0.006742743, 0.006212993, 0.0025904467)
                    + f1.r * float4(-0.12611742, -0.5050065, -0.0042339293, -0.009840349)
                    + f1.g * float4(0.3637557, 0.11094253, -0.013749947, -0.015319803)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.52730757, 0.041189753, -0.21799047)
                    + f2.g * float4(-0.25332278, 0.48141858, 0.77175575, 0.24276331)
                    + f2.b * float4(-0.05775499, -0.102955304, 1.0395921, -1.1415913)
                    + f2.a * float4(-0.1836326, 0.23598439, -0.8779968, -0.1442737)
                    + f3.r * float4(-0.29104778, -0.51829076, -0.018802652, 0.29654673)
                    + f3.g * float4(-0.06745626, 0.25373805, 0.15568484, 0.45679653)
                    + f3.b * float4(-0.3948244, -0.30558622, 0.053646, 0.10757003)
                    + f3.a * float4(-0.11661739, 0.12815641, -0.28988886, -0.40919834);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    1.0870253, -1.4615395, 0.0050994754, 0.8231565, -0.0716268, -0.046909373, -1.023492, 0.7039278, 0.3467451, -0.021249544, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.051573094, -0.91811466, 0.27050588, -1.0229626, -0.28983665, 1.1276989, -0.14308141, -1.8384111, 0.65749204, -0.43154752, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.74409175, 0.9282311, -1.0580404, 0.26140586, -0.43983513, 0.4061421, 0.6053969, 0.40114826, 0.37711167, -0.36568704, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26279664, 0.0942146, -0.5665951, -0.32353088, -0.30694672, 0.5812113, 0.43651184, -0.16145918, 0.03999731, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.38382182, 0.60599226, -0.11179057, 0.14931582, -0.19537765, 0.47275808, 0.59259003, -0.6995748, -0.53001803, -0.10250364, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-5.305757, 0.1249449, -0.12715046, 0.48795608, -0.25619435, 0.67782205, 0.025726903, 0.113423936, -0.057058834, 0.54207844, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-1.2540076, 0.30833802, -0.577468, -0.46372232, 0.00923207, -0.48506644, -0.15164308, 0.28914917, 0.2254145, -0.16243108, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.11720504, -0.050422247, -0.09121844, -0.3699415, 0.07958684, -0.33833387, -0.23575372, -0.8698874, -0.5140577, -0.2834091, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.09942576, -0.38921613, 0.16649164, -0.67398334, -0.33854812, -0.7268294, -0.20728458, -0.2860758, -0.19321388, -0.16415481, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.9825552, -0.29551476, -0.36660197, 0.36408693, 0.5609605, 0.2470105, -0.08774283, -0.6516888, -0.8649182, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.15285125, -0.08594612, -0.091178805, 0.061274882, -0.29440928, 0.6851163, 0.3865627, 0.051081568, 0.39918283, -0.30388895, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.013525127, 0.1448977, 0.114845105, -0.026705934, 0.45204476, -0.115055025, 0.3322962, -0.29344714, 0.23514608, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(1.2370096, 0.38456732, -0.25914365, -1.3864322, -0.54404473, -1.3977145, -0.25890177, 0.8142697, 0.80932134, -0.26819155, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(1.0046232, 0.2810257, 0.7425458, 1.4280423, -0.6619556, 0.96972954, -0.30609217, -0.95892113, 0.07528839, 0.5455531, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.47138795, 0.16694117, 0.21318537, 0.22965907, 0.59616387, 0.61241674, 0.41927165, 0.3346668, 0.12774388, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.3547615, -0.22818618, -0.39834937, 0.49168065, 0.46919343, 0.41265583, 0.19980823, -0.18696053, -0.3594694, -0.6065446, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.21910712, -0.1527213, 0.48855293, 0.5234391, 0.052934233, -0.16441195, -0.039753977, 0.0056088204, -0.020476585, 0.21013416, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.3266278, -0.351867, -0.24049464, -0.038295433, 0.4623249, -0.055964474, 0.3023581, -0.29077473, -0.4413321, -0.25174338, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.07047969, 0.16438727, -0.07420076, -0.3687384, -0.59916943, -0.12093771, 0.04946799, 0.6517354, 0.7956198, 0.14083856, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.23189059, -0.027400887, -0.019665381
                );
                result +=
                    intermediate_two[0][0] * float3(-0.26445505, 0.03559783, 0.032478552)
                    + intermediate_two[0][1] * float3(0.78661686, 0.20954132, 0.21110506)
                    + intermediate_two[0][2] * float3(-0.22452551, -0.13435139, -0.41296315)
                    + intermediate_two[0][3] * float3(-0.27541935, -0.15252951, -0.16357903)
                    + intermediate_two[1][0] * float3(0.19540802, 0.59189975, -0.31416738)
                    + intermediate_two[1][1] * float3(0.3235717, 0.14747766, 0.1593969)
                    + intermediate_two[1][2] * float3(-0.23002967, 0.09007494, 0.06546149)
                    + intermediate_two[1][3] * float3(-0.21663924, -0.0033678904, -0.0018133895)
                    + intermediate_two[2][0] * float3(0.21818879, 0.015750803, 0.01032701)
                    + intermediate_two[2][1] * float3(-0.06303201, -0.59828544, 0.27082527);

                return result;
            }
            half3 EvaluateNetwork_Back_C_U(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.21373758, -0.08367128, -0.024734462, 0.0, -0.032001525, -0.06409277, -0.11097295, -0.05873858, 0.0, 0.0, -0.10564256, -0.39413604, -0.22373366, 0.32955018, 0.17952564, 0.3968682
                );

                float4 intermediate_one_4 = float4
                (
                    -0.16076404, -0.008474015, -0.08494133, 0.30710468
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.5805354, 1.1808736, -0.43822947, 0.1881425, -0.13861963, -1.3669289, 0.10385555, 1.0624703, -0.9045647, 0.13725406, 0.3524356, 1.1522841, 0.09094685, 0.4080579, 1.3962821, 0.26606017)
                    + f0.g * float4x4(0.28386804, 0.15771317, 0.20190695, -0.79574597, -0.24010943, 0.31378075, 0.048432965, -0.48429722, 0.07720297, -0.15605927, 0.2822648, 0.32906523, 1.818561, -0.61721176, -0.6812252, -1.068083)
                    + f0.b * float4x4(-0.93977195, -0.23980236, 0.19766212, 0.5521824, 0.17172435, 0.00032535003, 0.23887537, 0.6821946, 0.5911784, 0.3595963, -0.24439602, 0.78114563, 0.37730888, -0.12595437, -0.67317116, -1.5262871)
                    + f0.a * float4x4(-0.015880516, 0.013852011, 0.5013857, 0.21210915, 0.1503232, -0.0061588828, -0.3284581, -0.0026823285, -0.10612589, -0.37735936, 0.008138884, 0.0059757475, -0.007813346, 0.004220353, 0.01479081, -0.0035164633)
                    + f1.r * float4x4(0.014527339, -0.0029282253, 0.15805897, -0.009128058, -0.090036854, -0.01278715, -0.105679765, -0.006510983, 0.20689763, 0.18766409, 0.016647, 0.0046010553, 0.007261779, -0.0034547688, 0.0012347221, -0.012175969)
                    + f1.g * float4x4(0.018397717, -0.003918166, 1.3311714, 0.65755844, -0.0519357, -0.034688883, 0.041971672, 0.015666606, 0.73951864, 0.22193529, 0.015204348, 0.0018821845, -0.026321825, 0.009571419, 0.019480957, -0.02084587)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.4845019, -0.10402769, -0.114222325, 0.21288769, 0.3780744, 0.38924637, -0.07599177, 0.48033938, 0.35317352, 0.23400806, 0.2817841, 0.9114922, -0.0018551633, -0.05878263, -0.44294605, -0.36927164)
                    + f2.g * float4x4(-0.54985, 0.9332148, 0.15048693, -0.20147912, 0.084375486, 1.3508803, -0.23040476, -1.0627655, -0.6318568, -0.36729887, 0.31605497, 2.369807, -0.038105078, 0.7075363, 1.7131463, 0.2401186)
                    + f2.b * float4x4(-0.006227136, 0.1876393, -0.6764683, 0.38151968, 0.491475, 0.18074355, -0.4235979, -0.55183023, 0.10808924, -0.22086994, -0.3953364, 2.533389, 1.1329327, -1.7534193, -2.7194154, -2.0669231)
                    + f2.a * float4x4(-0.86417055, 0.91837096, -0.26882142, -0.4939828, -0.18391164, -1.6076039, 0.3884645, -1.2116989, -0.046388548, -0.012720043, -1.4067355, 1.8039317, 0.61629164, -0.24256583, 2.9493537, -0.95074654)
                    + f3.r * float4x4(0.062259603, 0.21011376, 0.37901512, 0.3899215, 0.068258785, -0.23680814, -0.059981223, -0.061745055, -0.108878605, -0.1339395, -0.13567683, -0.28095782, 0.36270022, 0.531557, 0.22561425, 0.18944697)
                    + f3.g * float4x4(0.007904306, 0.5797902, -0.16172773, 0.08633077, 0.09885072, -0.1799771, 0.4092533, -0.20138331, -0.020086177, -0.1444517, 0.12009935, -0.30988514, -0.18101121, 0.21560222, -0.63626355, 1.0225574)
                    + f3.b * float4x4(-0.6900112, -0.1401673, -0.30117065, -0.54856044, -0.3296674, -0.3771576, 0.061220106, -0.032183237, -0.78283244, -0.11068815, -0.07225448, -0.21762294, -0.31561965, 0.46439877, -0.20311041, -0.2863121)
                    + f3.a * float4x4(-0.031244325, -0.5715513, -0.32080394, -0.5639299, -0.23765357, -0.25597623, -0.45963043, 0.17713255, -0.59286225, 0.12217536, 0.29265398, 0.11687977, -0.7677575, 0.17001885, 0.64850515, 0.22198942);
                
                intermediate_one_4 +=
                    f0.r * float4(1.356502, -0.384177, -1.3698026, 0.37923935)
                    + f0.g * float4(0.40958792, -1.1071048, -0.75496286, -1.1991837)
                    + f0.b * float4(0.4615194, 0.48949775, 0.4366574, -0.29126504)
                    + f0.a * float4(0.00695988, 0.098775454, -0.009023163, 0.0002130803)
                    + f1.r * float4(0.010293523, -0.4300108, -0.02941726, -0.0016965212)
                    + f1.g * float4(0.016452283, 0.056617856, -0.05120645, 0.0070439675)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.07610793, 0.465269, 0.16179213, -0.35143545)
                    + f2.g * float4(-1.4347751, 0.4064875, 1.3920733, -0.10016925)
                    + f2.b * float4(0.23390172, -0.075890094, -0.7768396, -1.2863564)
                    + f2.a * float4(-1.5808047, 0.20127106, -1.5854965, 0.84333634)
                    + f3.r * float4(-0.45181254, -0.45632517, -0.13941017, 0.42981407)
                    + f3.g * float4(-0.22820625, 0.3157051, 0.0350837, 0.590044)
                    + f3.b * float4(-0.5556201, -0.24361914, -0.06695922, 0.24083412)
                    + f3.a * float4(-0.27739495, 0.19019787, -0.41052037, -0.275789);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.295306, -1.088613, 0.7348576, -0.18063624, -0.18509594, 0.5876683, -0.45465556, -0.29666775, -0.42038906, 0.0, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.20248094, 1.0017983, -0.11334018, 0.12460952, -0.5114304, 0.061292566, 0.22280647, 0.39325365, 0.72513753, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.038412023, -0.32331336, -0.07194128, 0.28891122, -0.4799935, -0.12567371, 0.34157145, 0.034211304, 0.63026434, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26003873, 0.091461204, -0.5665951, -0.3050923, -0.30694672, 0.5638027, 0.40420085, -0.14392647, 0.011764152, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.24383911, 0.28042632, -0.10628403, -0.014082869, -0.14687003, -0.4197638, 0.40570483, -0.5982716, 0.14529356, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.30526322, -0.04995647, -0.8225602, 0.7882791, 0.0883092, -0.5007403, 0.6717533, 0.65056276, 0.008394754, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.14373936, 0.5235908, -0.0027859253, 0.40189785, 0.057152633, 0.29470485, -0.13199033, -0.06734243, -0.4706565, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.26971573, 0.057250664, 0.7973468, -0.19278225, -0.36930108, 0.53091705, -0.14749281, -0.21151124, 0.07170966, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.24493687, -1.0533075, 0.16565934, 0.0150501765, -0.4433268, 0.3511587, -0.06035069, -0.23433772, -0.58630383, -0.28430334, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.7835366, 0.08050676, 0.017890992, 0.49468198, 0.32085028, 0.9163867, -0.16900899, -0.33043918, 0.18578844, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.32177225, -0.10279075, -0.60418814, 0.16935857, -0.63739085, 0.8015574, -0.29368982, 0.027359739, -0.07818002, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.5323053, 0.8403352, -0.30908868, -0.46901798, -0.7638074, 0.13065077, -0.51582897, -0.29946333, 0.25593525, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.03549931, 0.15145531, -0.29109257, 0.8475417, 0.5674667, 0.16790168, 0.6090864, 0.1401266, 0.25048658, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.72951597, -0.28327683, 0.08552662, 0.63218045, 0.30420545, -0.5514046, 0.7984986, 0.51774234, -0.11370526, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.43735066, -1.1074436, -0.8587121, 0.9409841, 0.13040745, -0.1330153, 0.5737574, 0.73226404, 0.058801, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.26968852, -0.18119708, 0.50701785, 0.5678912, 0.07509643, -0.22093952, -0.07413527, 0.049936958, -0.078073874, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.0108780535, -0.07585053, 0.7023538, -0.6531304, 0.43871042, 0.47191945, -0.66427094, -0.5412252, -0.0038736362, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.6125492, -0.20624565, -0.18772933, -0.59597564, -0.6238714, 0.032234985, -0.6572555, -0.4702398, 0.011541539, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.10864445, 0.13860671, 0.084382534
                );
                result +=
                    intermediate_two[0][0] * float3(-0.037262682, -0.04277399, -0.031496987)
                    + intermediate_two[0][1] * float3(0.27446032, -0.012594086, -0.006780773)
                    + intermediate_two[0][2] * float3(-0.07180886, -0.073857166, -0.0683691)
                    + intermediate_two[0][3] * float3(-0.28237486, -0.06337938, -0.23809008)
                    + intermediate_two[1][0] * float3(0.0562681, 0.50693226, -0.19517447)
                    + intermediate_two[1][1] * float3(0.17485183, 0.14321125, 0.16671363)
                    + intermediate_two[1][2] * float3(0.25575924, 0.26231998, 0.2568849)
                    + intermediate_two[1][3] * float3(0.03441452, -0.263215, -0.022962626)
                    + intermediate_two[2][0] * float3(0.11740961, 0.03802799, -0.032136325)
                    + intermediate_two[2][1] * float3(-0.09090813, -0.62796783, 0.24741682);

                return result;
            }
            half3 EvaluateNetwork_Back_C_D(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.025917651, 0.047333844, 0.07216837, 0.15391152, 0.041831452, 0.03001521, -0.08297684, 0.015740382, 0.23359835, 0.2230581, -0.030935178, 0.29322702, -0.080502756, -0.10146892, 0.2328919, 0.03531819
                );

                float4 intermediate_one_4 = float4
                (
                    -0.07836602, -0.22854611, -0.1972804, 0.3711664
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.25621107, -1.4307986, -0.5879883, 0.86758864, -0.0062189214, 1.1530561, 0.836053, -0.100958236, 1.0760175, 0.60067546, 1.2862593, 0.9737329, 0.3538579, 0.15670478, 0.87252116, -0.15080895)
                    + f0.g * float4x4(0.40397555, 0.82728404, -0.3136482, -0.3346411, 1.4169406, -0.19298013, 0.66277415, -0.2569021, -0.061452515, -0.7513211, 0.77913225, 0.10143254, -0.8388343, -0.046533406, 0.3008201, -0.17463551)
                    + f0.b * float4x4(0.36599892, 0.075476915, -0.26406747, 0.14676099, 0.17337237, 0.0813422, -0.0921493, -0.17208262, -0.026645547, -0.04413114, -0.23843542, -0.28752393, 0.06046443, -0.10220888, -0.07588698, -0.10257781)
                    + f0.a * float4x4(-0.009163346, -0.0064734174, -0.02030662, 0.051954642, 0.002138348, 0.039253287, 0.021056306, -0.0030632475, 0.0065249535, 0.011345837, 0.026586536, 0.045791794, 0.012052347, -0.22286832, 0.030380925, -0.20533565)
                    + f1.r * float4x4(0.0076939566, 0.003180192, -0.0075370804, 0.03483185, 0.023433922, -0.011827929, -0.0004331394, -0.009985627, -0.017219992, 0.0057324404, 0.014556633, -0.012268565, 0.005445331, -0.13751543, 0.060620602, -0.1713064)
                    + f1.g * float4x4(-0.02098872, 0.010894439, 0.010201733, -0.06954812, -0.03603985, 0.00795842, 0.04586194, -0.020513283, 0.059668254, 0.013336439, 0.01917776, -0.012044031, -0.021331199, 0.18402985, -0.006146182, -0.010666236)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.3224362, 0.013629326, -0.29365557, -0.022032049, -0.23476815, 0.22045025, -0.31909296, 0.1401173, 0.086447015, -0.005456944, -0.20482571, -0.13171993, -0.3034669, 0.15617773, -0.17471729, 0.15670815)
                    + f2.g * float4x4(0.08386687, -1.2598802, 0.36514983, 0.39485657, -0.009442512, -1.1685672, 0.7750986, 1.294255, 0.5857031, 0.18537891, 1.3487186, 0.75405157, 0.45478418, 0.22191986, 0.009578067, 0.020761896)
                    + f2.b * float4x4(-0.27690655, -1.1390536, 0.14508408, -0.10080506, -0.37939814, 0.083320044, -0.8214693, -0.38856733, 0.10336911, 0.51690084, -1.0527314, -0.15358327, -0.9934405, 0.030206472, 0.5220218, -0.24916776)
                    + f2.a * float4x4(-1.7226273, 2.297951, 2.158965, -0.3322942, -0.93056506, 0.22993587, 1.2269667, 0.16278458, -0.074544005, -0.5582609, 1.9459361, 0.14098361, 0.23886517, 0.13345781, 0.7386096, 0.20365728)
                    + f3.r * float4x4(-0.29638308, 0.20391952, 0.29994786, 0.14835371, 0.20718808, 0.100706466, 0.110978104, 0.32034525, -0.06163068, -0.09588828, -0.104400404, 0.26614016, 0.2713121, 0.019607693, -0.058835052, -0.014497944)
                    + f3.g * float4x4(0.056926806, 0.18771568, 0.09123088, 0.00613691, 0.11329313, -0.056106128, 0.13216938, 0.06406004, -0.02111439, -0.112678856, 0.111145295, 0.28396645, 0.17407675, 0.093182504, 0.35555577, 0.0075140707)
                    + f3.b * float4x4(0.08501775, -0.083364405, 0.35572788, -0.12394576, 0.15763335, 0.20277944, 0.0954483, 0.11147972, -0.16293983, -0.031391095, 0.0069536893, 0.17688346, 0.17371501, -0.1798496, 0.084140286, 0.11503723)
                    + f3.a * float4x4(-0.12997136, -0.056515545, -0.009530763, -0.018674152, 0.08951011, 0.07531499, 0.2773719, 0.19357924, -0.082507804, 0.11004405, -0.08584257, 0.26785535, 0.1389704, -0.16119322, 0.011186796, -0.1071712);
                
                intermediate_one_4 +=
                    f0.r * float4(0.03417717, -0.04824978, 0.03698927, 0.60724765)
                    + f0.g * float4(-0.53055567, -0.109698534, -0.09569588, 0.808821)
                    + f0.b * float4(-0.27841792, -0.092971265, -0.0845595, -0.17515962)
                    + f0.a * float4(0.003878398, 0.154459, 0.064301014, 0.017176371)
                    + f1.r * float4(0.0013625462, -0.0751974, -0.066839516, 0.03502573)
                    + f1.g * float4(0.019837184, 0.08088711, 0.07516375, -0.075147875)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.23429447, 0.015095115, -0.06911835, -0.052737907)
                    + f2.g * float4(-0.023907123, -0.17695737, -0.21805188, 0.19183703)
                    + f2.b * float4(0.39402813, -0.0939486, 0.12339538, -0.859164)
                    + f2.a * float4(1.7715759, 0.1198003, -0.21833882, 0.57030344)
                    + f3.r * float4(0.25120932, -0.042660743, 0.028912425, 0.29301682)
                    + f3.g * float4(0.016290244, 0.051097125, -0.22173482, 0.41576567)
                    + f3.b * float4(0.027241202, -0.129855, -0.17914948, 0.0063181967)
                    + f3.a * float4(0.398423, -0.18271965, -0.20150936, 0.131357);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.1106114, 0.15131845, 0.2483013, 0.5984523, -0.22322035, -0.24612866, -0.21008979, -0.25512496, -0.12620662, 0.29863915, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.43338808, -0.15361412, 0.48394507, 0.3862243, -0.09980637, 0.055396892, -0.034922536, -1.0678257, 0.06350679, 0.09809397, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.3958774, -1.238649, 0.19567053, -0.64392716, 0.090875894, 0.015844997, -0.029975826, -0.029171428, 0.015340852, 0.8300832, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.21631953, 0.1602001, -0.9140705, 0.20094015, -0.13773197, 0.043462195, -0.08600185, -0.93383926, -0.15988585, -0.10369251, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.2994057, 0.157139, -0.32590693, -0.020603456, 0.120924756, -0.06137216, -0.078366205, 0.2981195, 0.03500768, 0.34389102, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.38122842, 0.26626065, -0.24773598, -0.29361427, 0.14449526, -0.06807451, 0.07734783, 0.7609249, -0.09741438, -0.007827864, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.2926218, -0.32538667, 0.008311152, 0.22347568, 0.027808154, -0.123100124, -0.015035055, -0.10116745, 0.096384525, -0.16415614, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.1269129, -0.4422502, 0.017622769, 0.038524214, 0.10360381, -0.110913776, -0.12007246, -0.2624565, -0.1625917, 0.5762921, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.2029084, -0.504111, 0.084495544, 0.121405214, -0.024864301, -0.05994401, 0.089777425, 0.28813937, 0.16353141, 0.037148073, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.39615574, -0.1092551, -0.36931995, 0.044983126, -0.08612345, 0.1344538, -0.05944482, 0.20669444, 0.051156424, 0.4863514, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.3976981, -0.6950591, -0.38579258, -0.07715223, 0.08454994, 0.12649012, -0.049822822, 0.18455598, -0.18959448, -0.2749973, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.33219147, 0.09695824, -0.37911585, 0.09906264, -0.118224606, -0.21112734, -0.2009026, -0.31330743, -0.05371023, 1.1964614, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.15747815, -0.13294564, 0.09147501, 0.19293934, -0.19311039, 0.1024058, -0.2136891, -0.69048023, -0.038760606, -0.1621089, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.23995282, 0.7754754, 0.05288867, -0.12694934, -0.24978453, -0.19654867, 0.124570936, 0.50342137, -0.1646878, -0.04724893, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.051909886, 0.12084421, 0.39646995, 0.012143507, -0.13264596, -0.09724935, 0.018764071, -0.67749953, -0.11131186, 0.15137862, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.0027022879, 0.09222932, 0.1395002, -0.027119622, 0.15791619, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.021036662, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.14446416, 0.017160168, -0.86237943, -0.18835841, 0.09420637, -0.20205484, 0.15776972, 0.8370963, 0.047773615, 0.25728846, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.17071255, -0.31752685, 0.5468548, 0.14090243, 0.09612641, 0.07344083, 0.20194417, 0.49330798, 0.1653651, 0.14790231, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.27948678, -0.072754, 0.009487361
                );
                result +=
                    intermediate_two[0][0] * float3(-0.08204135, 0.11976936, 0.06725877)
                    + intermediate_two[0][1] * float3(0.089179814, -0.0074301115, 0.0005941297)
                    + intermediate_two[0][2] * float3(-0.016062409, -0.047450475, -0.015616304)
                    + intermediate_two[0][3] * float3(-0.23580913, 0.07306461, -0.022621881)
                    + intermediate_two[1][0] * float3(-0.14568526, -0.0172397, 0.31028923)
                    + intermediate_two[1][1] * float3(-0.16471535, 0.10919101, -0.059504237)
                    + intermediate_two[1][2] * float3(0.2538163, 0.25170526, 0.26876652)
                    + intermediate_two[1][3] * float3(0.05189196, 0.077333465, 0.059264608)
                    + intermediate_two[2][0] * float3(-0.100581415, -0.218291, 0.048644125)
                    + intermediate_two[2][1] * float3(0.0007575678, 0.111666024, 0.019608755);

                return result;
            }
            half3 EvaluateNetwork_Back_R_L(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.006913794, -0.057309993, -0.037529062, -0.01270482, -0.05958394, 0.38227648, -0.051242705, -0.018164935, 0.0, 0.0, -0.093211174, 0.21791163, -0.1123232, -0.0576693, 0.36082885, 0.099075146
                );

                float4 intermediate_one_4 = float4
                (
                    0.0, -0.104972035, -0.009220244, -0.19203931
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27010542, 1.0174565, -0.42468446, 0.18752863, -0.0671658, -0.11768765, 0.1986927, -0.28408337, -0.9045647, 0.13725406, -1.1601633, 1.2738702, 0.6999819, -0.19057404, 0.33673233, 0.076749146)
                    + f0.g * float4x4(-0.0079804845, 0.2198453, 0.1855704, -0.7834952, -0.28883082, -0.08485322, 0.15491532, 0.5150098, 0.07720297, -0.15605927, -0.088588014, 0.38673788, 1.0267116, 0.063609734, -0.40634483, -0.07635314)
                    + f0.b * float4x4(-0.71915686, -0.26651594, 0.21034029, 0.5618195, 0.19957517, -0.44529727, 0.17988592, 0.64300996, 0.5911784, 0.3595963, -0.25700158, 0.17019112, 0.26551187, 0.2610175, -0.8517068, -1.228385)
                    + f0.a * float4x4(-0.21906252, 0.057040587, 0.48925114, 0.20457497, 0.11506878, -0.006652928, -0.36458763, -0.010984678, -0.10612589, -0.37735936, -0.040966723, 0.00042595674, 0.01570691, -0.08752905, 0.009759253, -0.001800472)
                    + f1.r * float4x4(0.11687204, 0.03479311, 0.17336114, -0.020873304, -0.038506992, 0.0060598752, -0.24954325, 0.016163168, 0.20689763, 0.18766409, -0.018806677, 0.00366065, 0.030434888, 0.20861162, 0.008407874, -0.005757958)
                    + f1.g * float4x4(-0.25338256, 0.08866633, 1.3413297, 0.670748, -0.028454008, 0.03168566, -0.009839669, 0.01956689, 0.73951864, 0.22193529, -0.040333036, -0.01955213, 0.04194348, -0.36069316, 0.019856205, -0.010571031)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.26386335, -0.13037938, -0.10142742, 0.22559229, 0.40565693, -0.057147346, -0.13572267, 0.43976676, 0.35317352, 0.23400806, 0.2693551, 0.2994989, -0.1132656, 0.32842407, -0.6242029, -0.07148523)
                    + f2.g * float4x4(-0.124472514, 0.88887686, 0.13692428, -0.21446744, 0.062662825, -1.4259545, -0.5537506, 0.82355213, -0.6318568, -0.36729887, 0.39902493, -1.866352, 0.06801826, 0.0863992, -1.6383743, -1.1056803)
                    + f2.b * float4x4(0.26776925, -0.031252973, -0.670232, 0.36882454, 0.4389235, 0.20375302, -0.38073078, -0.26878765, 0.10808924, -0.22086994, -0.17501654, 0.44138345, 0.7575413, -0.117022246, -1.3138598, -0.26550952)
                    + f2.a * float4x4(-0.23260021, 0.28673795, -0.25485098, -0.4816257, -0.1419966, 0.05123647, 0.3425386, 0.17054343, -0.046388548, -0.012720043, -1.4766964e-06, 0.98431146, 0.066766486, 0.047760326, 1.3765011, -0.9699655)
                    + f3.r * float4x4(-0.15837793, 0.23650911, 0.36623064, 0.37752214, 0.040650487, 0.20951469, -0.0003283794, -0.021286339, -0.108878605, -0.1339395, -0.12322949, 0.33096194, 0.47420022, 0.14439666, 0.40667096, -0.108332224)
                    + f3.g * float4x4(-0.21273322, 0.6061545, -0.17451209, 0.07393137, 0.07124239, 0.26634374, 0.4689087, -0.16092, -0.020086177, -0.1444517, 0.13255385, 0.30203974, -0.06955985, -0.17158294, -0.45518088, 0.724685)
                    + f3.b * float4x4(-0.9106047, -0.11376863, -0.31395513, -0.5609593, -0.35727617, 0.06917255, 0.1208731, 0.008284658, -0.78283244, -0.11068815, -0.059807148, 0.3943084, -0.20413242, 0.07718231, -0.022057204, -0.58405834)
                    + f3.a * float4x4(-0.2518841, -0.54519737, -0.33359838, -0.5766344, -0.2652357, 0.19040681, -0.39989695, 0.21769436, -0.59286225, 0.12217536, 0.30507764, 0.72893673, -0.6562885, -0.21719553, 0.82979435, -0.075809754);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45923746, -0.2800249, -0.52459985, 0.06657291)
                    + f0.g * float4(0.06488515, -1.0092306, -0.48028088, -1.9090465)
                    + f0.b * float4(0.3008439, 0.58596146, 0.36130568, 0.20465694)
                    + f0.a * float4(-0.5425608, -0.010818533, -0.02270308, -4.106684e-05)
                    + f1.r * float4(-0.12611742, -0.54219705, -0.034411553, -0.009991645)
                    + f1.g * float4(0.3637557, 0.14870904, -0.030024126, -0.009553976)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.5617647, 0.08607759, 0.1477109)
                    + f2.g * float4(-0.25332278, 0.30690494, 0.3319802, -0.0676656)
                    + f2.b * float4(-0.05775499, -0.13793007, -0.10332125, 0.17938058)
                    + f2.a * float4(-0.1836326, 0.2850772, -0.23437247, 0.5619742)
                    + f3.r * float4(-0.29104778, -0.5528179, -0.06370545, -0.069073014)
                    + f3.g * float4(-0.06745626, 0.219211, 0.11078989, 0.091176525)
                    + f3.b * float4(-0.3948244, -0.34011298, 0.008739834, -0.25800794)
                    + f3.a * float4(-0.11661739, 0.093699664, -0.33478376, -0.7749659);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.10322181, 0.3314551, -0.02937339, -0.19542614, -0.0492451, 0.22269598, 0.31763372, 0.19634056, -0.47915027, -0.012723384, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.13579732, 0.33553934, 0.14543164, 0.12473017, -0.2740743, 0.5645302, -0.11208643, 0.0853525, -0.08579447, -0.4178136, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.18974946, -0.03161854, -1.1058545, 0.16758192, -0.16610172, 0.2830218, -0.39195627, -0.27111894, 0.29308814, -0.34230587, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.25081527, 0.110508226, -0.5705934, -0.31086928, -0.31079438, 0.5705544, 0.42927983, -0.145437, 0.04292265, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.1931859, 0.27427727, -0.10751033, 0.1653419, 0.06689645, 0.48649055, -0.08073454, -0.043425333, -0.41142362, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.2778853, 0.3062481, -0.13402313, -0.05277472, -0.21087609, -0.34411904, 0.42170355, -0.5388563, 0.23055044, 0.549669, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.2959963, -0.13148196, -0.6285974, 0.13236332, 0.72478676, -0.024597075, 0.07230134, 0.50402075, 0.11932411, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.14065433, 0.5409884, -0.067098, 0.3945856, 0.13159889, 0.3241303, -0.06478672, -0.3114634, -0.51474744, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.015345908, 0.15154776, 0.17563187, -0.22819887, 0.39674777, 0.19953145, 0.08887201, 0.35464326, -0.20970613, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.2846812, -0.41735592, -0.12093596, 0.46101344, -0.03468444, -0.01144425, -0.28440598, -0.012380648, 0.59162796, -0.29705277, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.39247477, 0.13617839, 0.114845105, -0.09468968, -0.45294663, 0.06660919, 0.29519737, -0.18887706, 0.5346352, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.44345686, -0.4583599, -0.29316077, 0.15263334, -0.097495824, 0.30937153, -0.11469775, 0.0016069621, 0.11635619, -0.26237622, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8645593, 0.25084785, 0.7353473, -0.28009656, -0.6521361, 0.2386205, -0.35903725, -0.37736183, -0.020811498, 0.54380953, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.11074669, -1.0793135, 0.20916861, -0.033985864, -0.19350289, -0.049652144, -0.23723313, -0.17986499, 0.5009062, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.07743529, 0.15193959, -0.39821053, 0.10619261, 0.14174418, -0.44392765, 0.5388285, 0.08135438, -0.060843866, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.14078157, -0.019606214, 0.24861443, 0.6370733, 0.3637735, 0.1725666, -0.15866077, 0.42424372, 0.44723135, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.16437107, -0.14168179, 0.4826316, 0.5306314, 0.07371134, -0.18183056, -0.047735922, -0.042841744, -0.024563542, 0.20875806, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.41159177, 0.33701447, -0.25020286, -0.36272633, -0.03358536, 0.057375293, 0.07260869, 0.07087179, -0.4155378, -0.24528937, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.92235154, 0.11546996, -0.08363606, 0.1544627, -0.060023937, 0.102896094, 0.33360052, -0.066727385, -0.10195201, 0.15185331, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.014229769, 0.08450101, 0.006343021
                );
                result +=
                    intermediate_two[0][0] * float3(-0.104152925, -0.04448257, -0.07564525)
                    + intermediate_two[0][1] * float3(-0.07967088, -0.09136761, -0.07719667)
                    + intermediate_two[0][2] * float3(-0.18486103, -0.13287507, -0.4109966)
                    + intermediate_two[0][3] * float3(-0.00024153653, -0.10989332, -0.07059074)
                    + intermediate_two[1][0] * float3(0.0444431, 0.14377682, 0.042694725)
                    + intermediate_two[1][1] * float3(0.12227746, 0.15180908, 0.1143469)
                    + intermediate_two[1][2] * float3(0.07884092, 0.13594419, 0.10667096)
                    + intermediate_two[1][3] * float3(-0.0018211621, -0.23824984, -0.050098903)
                    + intermediate_two[2][0] * float3(0.16370821, 0.07548741, 0.068326235)
                    + intermediate_two[2][1] * float3(-0.07858592, -0.61726224, 0.2584271);

                return result;
            }
            half3 EvaluateNetwork_Back_R_R_D(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.463759, 0.08579886, 0.15334693, 0.45780662, 0.24448642, -0.17507939, 0.074988574, 0.48637196, 0.1417455, 0.056325592, -0.47820583, -0.042827766, -0.0966531, -0.10146892, 0.09182323, 0.032793596
                );

                float4 intermediate_one_4 = float4
                (
                    -0.77349246, -0.22854611, -0.1972804, 0.0689091
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.44416115, -0.5127379, -0.7675512, -0.12710603, -1.3571649, 0.36697474, -1.7119521, -1.4273582, 0.2121039, 0.9240093, 0.46843958, 0.18493855, -0.24642283, 0.15670478, 1.9630482, -0.19445297)
                    + f0.g * float4x4(1.2014366, 1.7840384, -1.3364027, 1.8978189, 1.0323972, 1.2019812, -1.0606538, -0.9790121, 0.21111952, 0.12358183, 0.9211413, -0.26871112, -1.1484301, -0.046533406, 0.67289275, -0.17206566)
                    + f0.b * float4x4(-0.123424746, 0.036694214, -0.34560063, -0.15687224, -0.02929074, 0.28639382, -0.25054944, -0.6426267, 0.064343154, 0.12323184, 0.20860125, 0.04830579, 0.076496266, -0.10220888, 0.06506123, -0.09998714)
                    + f0.a * float4x4(-0.007274306, 0.011846016, -0.014521655, 0.034262728, -0.018929513, 0.019400956, -0.032690138, -0.028046982, 0.091521844, 0.027729193, 0.009773159, 0.0103009045, 0.0018085609, -0.22286832, 0.009988956, -0.17382637)
                    + f1.r * float4x4(0.00820386, 0.02147988, -0.013695668, 0.025506705, 0.0017625671, 0.023082005, -0.019964362, -0.02891382, -0.20825592, 0.0089124385, -0.0023518, 0.00892645, -0.003512326, -0.13751543, 0.011214937, -0.17165056)
                    + f1.g * float4x4(-0.007066003, 0.011284496, -0.01700449, 0.012342476, -0.026511919, 0.028890863, -0.052077975, -0.043005582, -0.12780009, 0.0039287205, -0.012563197, 0.017994873, 0.0007203796, 0.18402985, 0.008665366, -0.008717451)
                    + f1.b * float4x4(-0.22486252, -0.16381109, -0.14652333, -0.0667519, 0.088784486, 0.18824568, 0.04872495, -0.13202387, 0.231289, 0.05101168, 0.03321913, 0.16478619, 0.2143291, 0.04137686, -0.07672432, 0.14030656)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(-0.16722147, -0.024837421, -0.37478942, -0.32592183, -0.43746313, 0.4255406, -0.47703874, -0.33050212, 0.17829718, 0.1612739, 0.24241407, 0.20429058, -0.28729498, 0.15617773, -0.03363896, 0.15923345)
                    + f2.g * float4x4(-3.0631266, 0.36367553, -1.1351674, 0.15226135, -0.5288664, -0.33618793, 0.51087123, 0.40084726, -0.09863043, -0.50791746, 3.0736623, -0.7369534, -0.5852227, 0.22191986, -0.8346548, 0.020135263)
                    + f2.b * float4x4(0.5235629, -1.756173, 1.0240414, -0.85514414, -1.0786741, 1.3937844, 1.0961844, 0.10375361, 0.19294193, -0.3126406, 0.37306076, 1.3705978, 0.61800975, 0.030206472, -0.31625208, -0.2433957)
                    + f2.a * float4x4(2.7251196, 0.4665433, -0.650462, 0.725237, 0.062301937, -0.43758896, 1.0113422, 2.665351, 0.22601058, -1.9784412, 0.65956396, -2.1979291, -1.4359946, 0.13345781, 1.7962382, 0.20554332)
                    + f3.r * float4x4(0.1932739, 0.24241856, 0.38115296, 0.45220748, 0.4098657, -0.10439079, 0.26898754, 0.79095936, -0.15340707, -0.26267225, -0.5516485, -0.06987394, 0.255178, 0.019607693, -0.19989951, -0.017028837)
                    + f3.g * float4x4(0.546574, 0.22621615, 0.1724431, 0.3100115, 0.31597936, -0.26119503, 0.2901847, 0.53463984, -0.11289162, -0.27946323, -0.33607745, -0.052056015, 0.15795515, 0.093182504, 0.21447676, 0.0049831658)
                    + f3.b * float4x4(0.57462704, -0.04487142, 0.4369417, 0.17992266, 0.3603064, -0.0022992163, 0.25345185, 0.5820649, -0.25472254, -0.19818652, -0.440291, -0.1591227, 0.15759249, -0.1798496, -0.05693554, 0.112506315)
                    + f3.a * float4x4(0.35970384, -0.018056212, 0.07165151, 0.28521174, 0.29218605, -0.12977515, 0.4353423, 0.66417474, -0.17435794, -0.056677986, -0.53309834, -0.06819261, 0.12280918, -0.16119322, -0.12989537, -0.10969601);
                
                intermediate_one_4 +=
                    f0.r * float4(0.83600754, -0.04824978, 0.03698927, -1.5730329)
                    + f0.g * float4(1.1770904, -0.109698534, -0.09569588, 0.9132244)
                    + f0.b * float4(0.4165459, -0.092971265, -0.0845595, 0.12666509)
                    + f0.a * float4(-0.005978734, 0.154459, 0.064301014, -0.0070213517)
                    + f1.r * float4(0.007216179, -0.0751974, -0.066839516, -0.0053169997)
                    + f1.g * float4(-0.007147099, 0.08088711, 0.07516375, -0.051288396)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.14046708)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(0.46080956, 0.015095115, -0.06911835, 0.24955845)
                    + f2.g * float4(1.389129, -0.17695737, -0.21805188, 1.4738917)
                    + f2.b * float4(2.2646701, -0.0939486, 0.12339538, -0.9518189)
                    + f2.a * float4(2.485992, 0.1198003, -0.21833882, -1.0481303)
                    + f3.r * float4(-0.44385892, -0.042660743, 0.028912425, -0.00919927)
                    + f3.g * float4(-0.6788395, 0.051097125, -0.22173482, 0.113568306)
                    + f3.b * float4(-0.66788477, -0.129855, -0.17914948, -0.29591888)
                    + f3.a * float4(-0.29668456, -0.18271965, -0.20150936, -0.17089221);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.21295078, -1.4207201, 1.024171, 0.5208933, -0.41663057, -0.20783041, -0.22606012, -0.578727, -0.1417451, 0.5565029, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.65403944, 1.4204826, -1.0397712, 0.20918907, -1.0738093, 0.081158556, -0.021288155, 2.175709, 0.06350679, -0.054190163, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.8000909, -0.07602683, 0.2975039, -0.59841925, 1.540187, 0.015844997, -0.061194934, -1.091776, -0.00037283095, -0.8025318, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.47737932, 0.57931113, -0.86922735, 0.24648155, -0.4643714, 0.043462195, -0.1144493, -0.99647534, -0.15988585, 0.44765645, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.68414915, 0.35777983, -0.565085, 0.29731864, 0.17262876, -0.025919449, -0.10101902, 0.72733545, 0.019257627, 0.93278426, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.49890772, -0.1327095, 0.07273766, -0.3184806, 0.14887056, -0.029961938, 0.06102293, -1.304398, -0.113077745, -0.73744226, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.05357953, -1.0929741, 0.09713371, 0.98193824, 0.01543662, -0.09559036, -0.015035055, 0.10566778, 0.08153161, -0.30359405, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.807223, -0.40708762, -0.000840112, -0.472686, -0.62932926, -0.08304594, -0.15107575, -0.5223005, -0.1776601, -0.3470139, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.8816109, -0.26497084, 0.09400233, -0.42139992, 0.887054, -0.026562018, 0.07536413, 0.49791595, 0.14845544, 0.20157534, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.18864629, -0.101796575, -0.15066926, 0.118776314, -0.10969957, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.13037622, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.19584686, -0.7563115, -0.17670418, -0.6607173, -0.104717515, 0.16443525, -0.063890204, -0.580326, -0.18959448, 0.11443422, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-1.0346668, 0.445503, 1.4505858, 0.22916688, -0.73393255, -0.20882714, -0.21440251, 0.21071921, -0.069056846, -1.4721404, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.50862944, 1.9683955, 0.15396255, -1.3475757, 0.7247724, 0.14260566, -0.21321872, -0.7752838, -0.038760606, -0.106609255, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.24827266, -1.0702322, 0.7348321, 0.9515028, 0.10263183, -0.16567852, 0.108529, 0.7689057, -0.17917019, -0.40525362, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.10096722, -0.018663736, 0.14330949, 0.15313415, 0.1141921, 0.19257544, -0.2168508, -0.1385149, 0.14207666, -0.009116914, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.36440587, 1.0576955, -0.30118728, 0.1965302, -0.17557327, -0.060472723, 0.03198902, 0.52599484, -0.11131186, 0.90053093, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.016833443, 0.094835065, 0.13271989, -0.023318041, 0.09999016, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.015753388, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.3907931, 0.061378945, -1.294949, -2.0098336, -0.975043, -0.18170677, 0.170573, 0.86158717, 0.047773615, -0.14296703, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.16491614, 0.4357683, -0.18539046, 0.20186765, -0.052530266, 0.10850722, 0.18472767, 0.96312565, 0.14977239, 0.439794, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.29244977, 0.21350534, 0.2703153
                );
                result +=
                    intermediate_two[0][0] * float3(0.3620792, 0.47233626, 0.36433336)
                    + intermediate_two[0][1] * float3(-0.13058041, -0.30271286, -0.12607871)
                    + intermediate_two[0][2] * float3(-0.24945974, -0.14224266, -0.23807733)
                    + intermediate_two[0][3] * float3(0.059066664, 0.18286212, 0.05687374)
                    + intermediate_two[1][0] * float3(-0.30692455, -0.38414088, -0.30837378)
                    + intermediate_two[1][1] * float3(-0.1785503, 0.096145086, -0.070472136)
                    + intermediate_two[1][2] * float3(0.25322226, 0.2512019, 0.26783356)
                    + intermediate_two[1][3] * float3(-0.02762741, 0.3801652, -0.025371749)
                    + intermediate_two[2][0] * float3(-0.100900255, -0.21725385, 0.048426952)
                    + intermediate_two[2][1] * float3(-0.343246, -0.29862398, -0.3368783);

                return result;
            }
            half3 EvaluateNetwork_Back_R_R_U(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.0, 0.05156957, 0.0, 0.0, -0.022355052, 0.0, -0.00063525443, -0.3356878, 0.0, 0.0, 0.03518435, -0.15389484, -0.06490942, 0.33376914, 0.29249102, 0.16477479
                );

                float4 intermediate_one_4 = float4
                (
                    -0.00424014, 0.0, 0.15553832, 0.24439786
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.27707854, 1.2882682, -0.46348134, 0.1881425, -0.13882029, -0.5138307, 0.29834086, 1.0321225, -0.9045647, 0.13725406, 0.7095748, 0.19835295, -0.86616015, -0.8505777, 0.09517661, 0.5582352)
                    + f0.g * float4x4(-0.0122274, 0.05960064, 0.22649929, -0.79574597, -0.32479268, -0.061149582, 1.2334394, 1.1095314, 0.07720297, -0.15605927, 1.6131957, 1.0803223, 1.9771667, 0.9832403, -1.4142784, -0.96129)
                    + f0.b * float4x4(-0.72606903, -0.37500504, 0.17284235, 0.5521824, 0.16242056, -0.06371774, 0.12931025, 0.9592267, 0.5911784, 0.3595963, -0.38512325, 0.5413501, 0.21861216, -0.13041909, -0.7860214, -1.2943274)
                    + f0.a * float4x4(-0.21259804, 0.011090688, 0.527816, 0.21210915, 0.13620098, 0.4714436, -0.024193333, 0.012827432, -0.10612589, -0.37735936, 0.020188712, 0.00901286, -0.012393465, -0.01370661, -0.0011100079, 0.006692753)
                    + f1.r * float4x4(0.124373354, -0.0037011418, 0.14032899, -0.009128058, -0.008662497, -0.44881627, -0.004275424, 0.011573871, 0.20689763, 0.18766409, 0.021126816, 0.015822828, 0.008498189, -0.0009611141, -0.02143494, -0.0073455726)
                    + f1.g * float4x4(-0.2600644, -0.006200032, 1.3050503, 0.65755844, -0.06950704, 0.08261935, -0.047684178, 0.014274723, 0.73951864, 0.22193529, 0.030225163, 0.013402776, -0.0104674455, -0.023058895, -0.021352623, -0.005013845)
                    + f1.b * float4x4(0.26453164, -0.031294916, 0.119060956, -0.4381337, 0.17769973, -0.44919086, -0.35071015, 0.07438312, -0.12496567, -0.33632535, -0.17371841, 0.1018549, 0.12701271, 0.4504851, 0.13660173, -0.31161606)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.23927614, -0.13895649, 0.21288769, 0.3684282, 0.3251377, -0.18632488, 0.7573172, 0.35317352, 0.23400806, 0.14093953, 0.6712663, -0.16068292, -0.06302856, -0.5558774, -0.13719004)
                    + f2.g * float4x4(-0.117459536, -0.9498763, 0.17526214, -0.20147912, 0.11443065, -0.037164662, 0.24571179, 1.2560321, -0.6318568, -0.36729887, 0.3960581, -0.1800447, -1.6273009, -0.7753253, -0.79800946, -0.09024339)
                    + f2.b * float4x4(0.2747103, 0.09129203, -0.6516506, 0.38151968, 0.5053539, 0.08917348, -2.6050742, -0.86397517, 0.10808924, -0.22086994, -0.40381777, 0.95060927, 1.3080611, -0.80584383, -2.1406705, -0.8273242)
                    + f2.a * float4x4(-0.23951223, 0.82431674, -0.29335544, -0.4939828, -0.19991507, 0.08136868, 1.0316751, -0.5736488, -0.046388548, -0.012720043, 1.0100538, 0.5542226, 0.62722754, 0.34448677, 0.47578248, -1.2626448)
                    + f3.r * float4x4(-0.15146434, 0.34536174, 0.40375632, 0.3899215, 0.077873036, -0.1727081, 0.050279353, -0.33870122, -0.108878605, -0.1339395, 0.005138628, -0.04078097, 0.52153146, 0.5359112, 0.33855513, -0.04262295)
                    + f3.g * float4x4(-0.20581964, 0.715031, -0.13698591, 0.08633077, 0.10846505, -0.11588551, 0.51955557, -0.47833955, -0.020086177, -0.1444517, 0.2609279, -0.06970788, -0.022188416, 0.21986353, -0.5232129, 0.7903225)
                    + f3.b * float4x4(-0.9036911, -0.0049175764, -0.27642944, -0.54856044, -0.3200534, -0.31305373, 0.17148186, -0.30914396, -0.78283244, -0.11068815, 0.06855931, 0.022563007, -0.15675588, 0.46863252, -0.09018431, -0.5184209)
                    + f3.a * float4x4(-0.24497046, -0.43631065, -0.29607022, -0.5639299, -0.22800688, -0.19187808, -0.349286, -0.09982757, -0.59286225, 0.12217536, 0.43348172, 0.35710827, -0.6088639, 0.17426145, 0.76144195, -0.0101099955);
                
                intermediate_one_4 +=
                    f0.r * float4(1.941841, -0.39273125, -0.98788816, 0.6064082)
                    + f0.g * float4(0.3911592, -1.1157421, -0.17732778, -0.044828117)
                    + f0.b * float4(0.30508488, 0.48101074, 0.19639449, -0.23038727)
                    + f0.a * float4(0.022763785, 0.107482396, -0.015677357, -0.014229821)
                    + f1.r * float4(0.015016528, -0.4384489, -0.015037844, -0.009595485)
                    + f1.g * float4(0.026179716, 0.048151948, -0.030317279, -0.023758538)
                    + f1.b * float4(0.2819205, 0.012853259, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.2326688, 0.45679513, -0.078667946, -0.28871816)
                    + f2.g * float4(-2.1314914, 0.41496858, 0.84052265, 0.40011382)
                    + f2.b * float4(-0.22253495, -0.06740296, -0.18155281, -1.6238602)
                    + f2.a * float4(-0.9664897, 0.19279256, -0.035495367, 2.1457822)
                    + f3.r * float4(-0.2952766, -0.44784978, 0.101049826, 0.36723703)
                    + f3.g * float4(-0.071699195, 0.32418048, 0.27553883, 0.5275208)
                    + f3.b * float4(-0.39904302, -0.23514375, 0.17350183, 0.17831376)
                    + f3.a * float4(-0.1208563, 0.19867179, -0.17003703, -0.33850735);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.50336087, -0.41084105, -0.64846176, -0.25253025, 1.1924937, 0.15490618, -1.1050546, 1.1946816, 0.3368945, -0.031474974, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.14273316, 0.3420771, 0.1467457, 0.12595218, -0.2740743, 0.5658005, -0.113547556, 0.0853525, -0.07897107, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.6386238, -0.5741022, -0.6126578, 0.07642916, -0.6340264, -0.12645465, 0.0391213, -0.15202306, 0.91512734, -0.35181612, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.19671106, 0.2736906, -0.10751033, 0.18030581, 0.07499225, 0.48180416, -0.0787008, -0.040197887, -0.41685763, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.38410705, 0.30928874, -0.121345446, -0.030335085, -0.087804474, -0.30859658, 0.3154402, -0.63913256, 0.32378924, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.5257398, 0.46433347, -0.31203774, -0.016526433, 0.95540595, 0.027716191, -0.34702018, 0.3311575, -0.19315036, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.73412603, -0.64062655, 0.06742877, -0.2546997, 0.32758564, -0.2138366, -0.9547735, 0.3874773, -0.59472126, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2586566, 0.009267189, -0.36660197, 0.012120953, 0.6595171, 0.066859975, -0.16752677, 0.3302842, 0.30580315, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.2781116, 0.25558117, 0.6566112, 0.23385306, -0.7598501, 0.086761124, 0.9233011, -0.5857648, -0.1944517, -0.3158699, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.119573705, -0.19412786, -0.18751049, 0.11754177, 0.21533291, 0.682365, -0.2061581, 0.28493854, 0.58680755, 0.062371302, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.16766396, -0.68595546, 0.6309257, -0.08739601, 0.2046168, 2.068291, 0.14460348, 0.8914451, -0.3052447, -0.2927359, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(1.0813985, 0.9690937, -0.81959033, -0.2383016, 0.4577738, -0.09097235, -1.1402887, -0.047175027, 0.4448727, 0.5246876, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.13906865, 0.13811734, -0.15619963, 0.0015638894, -0.21498051, 0.1884407, 0.26134875, -0.19528781, 0.106172495, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.6663878, 0.5695407, -0.2608021, 0.09849838, 0.045474194, -0.08137492, -0.21053779, -0.2289938, -1.8318144, -0.6242088, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.94513094, 0.9810919, 0.8133695, 2.336688, 0.34150058, -0.016253581, -0.05107836, 1.1450745, -0.7088536, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2621343, -0.17108545, 0.50701785, 0.5829826, 0.07509643, -0.23804331, -0.09071631, 0.045562245, -0.07328703, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.178531, -0.19257411, 1.0369849, 0.17581335, -0.6007498, -0.09980474, 0.14652306, -0.27603155, -0.6157344, -0.26257986, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.02376008, -0.089577585, 0.65755063, 0.41484925, -0.72034377, 0.36209798, 0.6718337, -0.0032719355, 1.0351958, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.03814552, 0.34111184, 0.03593594
                );
                result +=
                    intermediate_two[0][0] * float3(-0.75962037, -0.57401973, -0.75398874)
                    + intermediate_two[0][1] * float3(0.85808647, 0.4048078, 0.84343606)
                    + intermediate_two[0][2] * float3(-0.090852976, -0.099453524, -0.090770975)
                    + intermediate_two[0][3] * float3(-0.07598798, 0.28923407, -0.0620488)
                    + intermediate_two[1][0] * float3(-0.011956422, 0.3007679, -0.00081586326)
                    + intermediate_two[1][1] * float3(0.20770028, 0.30550343, 0.20883924)
                    + intermediate_two[1][2] * float3(-0.008903151, 0.7542459, -0.016251793)
                    + intermediate_two[1][3] * float3(0.045155246, -0.5881092, 0.022875525)
                    + intermediate_two[2][0] * float3(0.17616759, 0.17694142, 0.17921169)
                    + intermediate_two[2][1] * float3(-0.090831116, -0.62648475, 0.24713556);

                return result;
            }
            half3 EvaluateNetwork_Right_0_D(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.4655416, 0.103843756, -0.078147545, 0.019125093, 0.3417269, 0.006805031, -0.22927931, 0.12183235, 0.13621071, 0.16810116, -0.08549861, -0.02271506, 0.042124856, -0.011576516, 0.31679663, 0.053565186
                );

                float4 intermediate_one_4 = float4
                (
                    -0.2378071, -0.22854611, -0.1972804, 0.16852279
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.15104055, 0.15537474, -0.09437153, 0.06959781, 0.07309506, 0.12780029, -0.0715186, 0.33769834, 0.20699143, -0.23790956, 0.18678546, -0.09136442, 0.1763411, 0.24660343, 0.44171593, -0.18252258)
                    + f0.g * float4x4(0.7289882, 0.047786433, 0.21349898, 0.19677645, 0.025811702, 0.20758954, 0.15725955, 0.649304, 0.2421414, 0.03147483, 0.45157796, -0.7349278, -0.11745393, -0.60460293, 1.010445, -0.196455)
                    + f0.b * float4x4(1.1580898, 1.5605589, -0.11369859, -1.1525242, -0.07515706, 0.104151115, 0.053669512, -0.2990213, 0.06563396, 0.010823727, -0.5524891, -0.52261424, 1.4557486, 0.7797547, 0.58146304, -0.12069748)
                    + f0.a * float4x4(0.10272863, -0.059050508, 0.07108498, -0.013194479, 0.09452143, 0.2092027, 0.006227374, -0.04849262, 0.098215185, -0.06371075, 0.21776395, -0.381282, -0.048455115, 0.14137332, 0.2059445, -0.197294)
                    + f1.r * float4x4(-0.009760548, -0.009139696, 0.22147274, 0.024874061, 0.0063751456, -0.058777712, 0.07043767, 0.06728253, -0.20422317, 0.22067362, -0.10105249, -0.04045964, 0.054781143, -0.021759354, -0.05006326, -0.15228963)
                    + f1.g * float4x4(0.060485963, -0.09235583, 0.026710583, -0.018295648, -0.005439046, 0.018547552, -0.15698925, -0.085579224, -0.11999367, 0.06916341, 0.15979145, -0.011217369, -0.05858747, -0.05198564, 0.12606314, -0.03028501)
                    + f1.b * float4x4(-0.5742635, -0.2688756, -0.1357461, 0.103093706, -0.22232422, 0.19767109, 0.04872495, -0.32268077, 0.2616698, 0.05101168, 0.018816723, 0.35529166, -0.026573105, -0.04851943, -0.31038266, 0.14661206)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.567901, -1.3266841, 0.16696066, 1.0402614, 0.8978455, -0.19361117, 0.17371145, 1.2687819, -0.04954103, -0.0055305064, -1.5305444, -0.5131648, 1.1264238, -1.2867309, -0.34059447, 0.048194647)
                    + f2.b * float4x4(0.015404253, 0.0022724576, 0.19517192, 0.025440952, -1.4594135, 0.10991753, -0.07079992, -0.8270543, 0.18344596, -0.201437, -0.02836502, -0.27039263, -0.099460006, -0.6462552, 0.09454769, -0.2337016)
                    + f2.a * float4x4(0.5930066, -0.0031589442, 0.22913083, 0.17757529, 1.3727962, 0.059155792, 0.081471115, 0.020840311, 0.23103712, -0.06934887, -0.29083273, -0.23022741, -0.85884887, -0.4081655, -0.083820835, 0.18703644)
                    + f3.r * float4x4(-0.15431982, 0.15539384, 0.16044667, 0.18340841, 0.19596776, 0.08692542, -0.03529045, 0.23576897, -0.12856087, -0.15083763, -0.17335445, 0.14073572, 0.1530523, 0.019607693, -0.20858425, 0.010045081)
                    + f3.g * float4x4(0.5483673, 0.24425595, -0.059054106, -0.12866016, 0.41321164, -0.079311155, -0.014095902, 0.17016007, -0.11842755, -0.1676237, 0.05659789, -0.031951945, 0.29672378, 0.18307805, 0.4394677, 0.025751516)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(0.3614805, -1.4891908e-06, -0.15984733, -0.15344976, 0.3894196, 0.052107166, 0.13107017, 0.29965642, -0.17989272, 0.055095434, -0.1404047, -0.048080727, 0.26159233, -0.0712963, 0.09509854, -0.088924415);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.21929839, -0.04824978, 0.03698927, 0.100754045)
                    + f0.g * float4(0.060459286, -0.109698534, -0.09569588, 0.029947473)
                    + f0.b * float4(-0.11906728, -0.092971265, -0.0845595, -0.013884869)
                    + f0.a * float4(0.01229316, 0.154459, 0.064301014, 0.5447539)
                    + f1.r * float4(-0.15766096, -0.0751974, -0.066839516, 0.02508707)
                    + f1.g * float4(0.046853542, 0.08088711, 0.07516375, 0.14078014)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.118964255)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.031636983, -0.17695737, -0.21805188, 0.1566457)
                    + f2.b * float4(0.24594566, -0.0939486, 0.12339538, 1.1835259)
                    + f2.a * float4(0.18080056, 0.1198003, -0.21833882, 0.12294337)
                    + f3.r * float4(0.0917792, -0.042660743, 0.028912425, 0.0689162)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.2131877)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.23897246, -0.18271965, -0.20150936, -0.07128329);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.11317219, 0.093337744, 0.16748391, -0.2186436, -0.18318824, 0.10542333, -0.23358493, -0.17990413, -0.15990146, 0.18669574, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.73101604, 0.4780905, -0.08402681, -0.4454655, -0.0573995, 0.22723351, -0.05897103, 0.08933604, 0.023233453, 0.8273584, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.32878113, -0.43631372, 0.013595726, 0.026680395, 0.15141647, 0.31745258, -0.066262946, -0.21424553, 0.0002348591, -0.6218885, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.07313202, -0.076928996, 0.123060465, 0.08647403, -0.117472276, 0.043462195, -0.08600185, 0.21654546, -0.15988585, -0.063616864, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.018065339, -0.38783833, 0.030480588, -1.1000904, 0.14875792, -0.11433891, -0.09716616, -0.16276957, 0.0007094274, -0.203384, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.19051951, 0.4017137, -0.010720036, -1.8534307, 0.1851203, -0.12039623, 0.09229661, -0.17191188, -0.09741438, 0.47259218, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.01663996, 0.09905847, -0.051158268, 0.0877238, 0.04482141, -0.09559036, -0.015035055, 0.03344481, 0.096384525, -0.16647215, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.061428208, -0.077944405, 0.0944807, 0.14437005, 0.12452183, -0.08304594, -0.12007246, -0.2213227, -0.1625917, 0.14703019, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.5118162, 0.22429, -0.045693263, 0.61288196, -0.0054886853, 0.11692617, 0.07465515, 0.13625409, 0.12820911, -0.30527797, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.18372667, -0.112768605, -0.14692646, 0.12179107, -0.08612345, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.12768865, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.10183573, 0.2113442, -0.12789434, -0.14982666, -0.09030866, -0.06899574, -0.20463356, -0.07412906, -0.093431994, -0.29026416, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.06169031, 0.18889233, 0.015874697, 0.28803974, -0.18363774, 0.002414556, -0.1989545, -0.03486403, -0.042474158, 0.32051128, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-0.022835493, -1.4460922, 0.006772661, -0.20099244, -0.22358043, -0.22819646, 0.103441805, 0.18746157, -0.18140441, -0.123905264, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.21562916, 0.1502895, -0.020484697, 0.005280091, 0.1141921, -0.010702676, -0.2304373, -0.15572898, 0.126549, 0.45237517, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4307948, -0.7246386, 0.058052815, 0.117782496, -0.102018565, -0.76638305, -0.0034714579, -0.14202236, -0.14925326, 0.079047576, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.039053798, 0.096550815, 0.16015755, -0.03916782, 0.15791619, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.035073463, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.19910598, 0.04948717, -0.1471372, 0.11830123, 0.121750996, -0.18170677, 0.170573, 0.091924064, 0.047773615, -0.072256915, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.10390482, 0.32201716, -0.054790094, 0.4074178, 0.14355528, 0.14428797, 0.17821604, -0.021345206, 0.13051555, 0.37100396, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.011504354, -0.023767844, -0.000104805426
                );
                result +=
                    intermediate_two[0][0] * float3(-0.002676441, 0.10900076, 0.000628016)
                    + intermediate_two[0][1] * float3(0.0017152316, -0.06691364, 0.00010111285)
                    + intermediate_two[0][2] * float3(-0.061468065, 0.0017586726, -0.0023282222)
                    + intermediate_two[0][3] * float3(-0.008828601, -0.060822453, -0.0006659225)
                    + intermediate_two[1][0] * float3(-0.19316663, -0.05081685, 0.29774678)
                    + intermediate_two[1][1] * float3(0.0045590745, 0.06952012, 0.0010193419)
                    + intermediate_two[1][2] * float3(0.23534541, 0.22974314, 0.24872303)
                    + intermediate_two[1][3] * float3(0.14063318, -0.07185066, -0.06723629)
                    + intermediate_two[2][0] * float3(-0.086515315, -0.19689973, 0.03824165)
                    + intermediate_two[2][1] * float3(-0.0054894593, 0.16621847, 0.0004268801);

                return result;
            }
            half3 EvaluateNetwork_Right_0_U(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.040685095, 0.16660511, 0.0, 0.04597615, -0.03474872, 0.0, -0.14879362, 0.15462324, 0.0, -0.29145753, 0.15654026, -0.029429113, -0.054204226, 0.0, -0.102888875, -0.36505356
                );

                float4 intermediate_one_4 = float4
                (
                    -0.11783465, 0.26246163, 0.0, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.23638862, 0.7765376, -0.46348134, 0.23410343, -0.16243468, -0.5138307, 0.031081777, 0.4660877, -0.9045647, -0.15419988, -0.09883477, 0.51197445, -0.15333179, -0.26110032, -0.01315241, 0.039685883)
                    + f0.g * float4x4(-0.4356539, -0.02100886, 0.22649929, -0.047236983, -0.32866156, -0.061149582, 0.84270144, -0.17028533, 0.07720297, 0.1664044, 0.035459075, 0.27771145, 0.90764564, 0.11768013, 0.06416015, -0.089484885)
                    + f0.b * float4x4(-0.25129196, 0.017153138, 0.17284235, 1.3445071, 0.1647141, -0.06371774, -0.22370446, -0.032084286, 0.5911784, 0.14298321, -0.08047192, 0.8931141, 0.086793356, 0.2033512, -1.4407816, -1.2987791)
                    + f0.a * float4x4(0.043689005, 0.61408204, 0.527816, -0.018038314, 0.16522604, 0.4714436, 0.0005659974, -0.0009524998, -0.10612589, -0.11254131, 0.15984549, 0.26383814, -0.021988977, -0.033828303, 0.06230315, 0.08418666)
                    + f1.r * float4x4(-0.004028092, 0.031768374, 0.14032899, 0.0043449337, -0.018643275, -0.44881627, 0.0020457627, -0.008684643, 0.20689763, -0.0042508887, -0.008969365, 0.022367153, 0.0005476036, 0.18170391, -0.0014519539, 0.00051142357)
                    + f1.g * float4x4(0.03948314, 0.0789706, 1.3050503, 0.0649132, -0.05176372, 0.08261935, 0.04472392, -0.074326165, 0.73951864, -0.06319116, -0.05098218, 0.19239092, -0.026723247, -0.42207855, -0.021508168, 0.0070937136)
                    + f1.b * float4x4(0.22384368, -0.19789553, 0.119060956, -0.48409945, 0.21244779, -0.44919086, -0.20192054, -0.080237284, -0.12496567, -0.04486745, -0.33026665, 0.13128708, 0.18121384, 0.4504851, 0.2394909, 0.05342892)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-1.2607735, 0.82913697, 0.17526214, -1.0986311, 0.14996158, -0.037164662, -0.46564123, -1.1705863, -0.6318568, -0.6722537, 1.0025505, -0.56718975, -0.12815902, 0.13622458, 0.7462327, -0.6777856)
                    + f2.b * float4x4(0.5289714, -0.21573482, -0.6516506, -0.07429559, 0.49414238, 0.08917348, -0.778393, -0.37772435, 0.10808924, -0.117199995, -1.0332505, -0.048200916, 1.4353154, -0.06654133, 0.28673768, 0.15161973)
                    + f2.a * float4x4(-0.90378433, 0.6421419, -0.29335544, -0.9249886, -0.183118, 0.08136868, -0.2973288, 0.9363012, -0.046388548, -1.5929209, -0.014739472, -0.14276321, -0.14172897, -0.0064724814, 0.70317394, -0.63268447)
                    + f3.r * float4x4(-0.15146434, 0.2937901, 0.40375632, 0.3899215, 0.100227304, -0.1727081, 0.05091197, -0.0030159445, -0.108878605, -0.1339395, -0.030045664, 0.11311862, 0.58647233, 0.20206562, 0.046178464, -0.20739673)
                    + f3.g * float4x4(-0.16513509, 0.8300963, -0.13698591, 0.13230273, 0.096070915, -0.11588551, 0.3713786, 0.011964268, -0.020086177, -0.43589512, 0.38228413, 0.054758776, -0.011486891, -0.11391395, -0.91847754, 0.26052272)
                    + f3.b * float4x4(-0.9036911, -0.056490853, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.17211306, 0.02654986, -0.78283244, -0.11068815, 0.033377655, 0.1764604, -0.09185188, 0.1348516, -0.38256383, -0.683171)
                    + f3.a * float4x4(-0.20428796, -0.32124913, -0.29607022, -0.517994, -0.24040034, -0.19187808, -0.4974446, 0.3904769, -0.59286225, -0.16928527, 0.55482167, 0.48159662, -0.59814245, -0.15952644, 0.3660551, -0.5399449);
                
                intermediate_one_4 +=
                    f0.r * float4(0.34141892, -0.13026436, -0.20957315, -0.05888661)
                    + f0.g * float4(-0.04043219, -0.57996446, -0.1571988, -0.51103616)
                    + f0.b * float4(-0.0883367, 0.0071361535, 0.3518889, 0.013984563)
                    + f0.a * float4(-1.2522211, -0.013906665, 0.12208697, -0.7120615)
                    + f1.r * float4(-0.039048396, -0.0023744488, 0.44546178, 0.4670956)
                    + f1.g * float4(0.0302764, -0.014373401, -0.103472136, -0.11180612)
                    + f1.b * float4(0.39973903, -0.24961518, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.09177901, 1.538182, 0.14820568, -0.08536301)
                    + f2.b * float4(-0.05509046, -1.1049256, 0.07934006, -0.3206004)
                    + f2.a * float4(-0.046756137, 0.13067152, -0.08260186, 0.10167499)
                    + f3.r * float4(-0.29104778, -0.44784978, -0.054469984, 0.12286028)
                    + f3.g * float4(-0.1852909, 0.5866911, 0.12001899, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.23445238, 0.46112734, -0.32557088, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.21018934, 0.023184258, 0.0, 0.4370348, -0.20638755, 0.1325223, 0.28085852, 0.20854634, 0.27754843, 0.0, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.013565269, 0.012308103, 0.1467457, 0.20335414, -0.47130588, 0.120638765, 0.33420825, -0.651544, -0.3507224, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.32906285, -0.104231745, -1.0916723, 0.06205265, -0.58650994, 0.3676253, 0.32570645, 0.21701257, 0.23518907, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.160983, 0.50491667, -0.10751033, 0.25219953, -0.42529473, 0.4405622, -0.24764052, -0.18218948, -0.6491378, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.30654442, 0.34082597, -0.11308466, -0.089765996, -0.16018945, -0.3356722, 0.5199625, -0.6962766, 0.25930718, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.083478026, 0.37683183, -0.07134927, 0.37403855, -0.06521306, 0.2929172, -0.12456715, -0.2309733, -0.6649564, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.42731, 0.5433619, 0.17014529, -0.26975742, -0.56633, 0.04390099, 0.12774841, -0.15003332, -0.078165434, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.11815963, -0.74552083, -0.36660197, -0.33194378, 0.4207351, -0.54059964, -0.11151842, 0.25455543, 0.67171633, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.25836644, -0.12751032, -0.09104016, -0.13203941, -0.4950822, 0.05262353, 0.3225039, -0.35952154, 0.2619505, -0.28430334, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.010199479, -0.04417206, 0.114845105, -0.345935, 0.2779899, -0.16488926, -0.08040548, -0.0168625, 0.34546727, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.6464579, 0.079367466, -0.30278754, -0.03514259, -0.6776978, 0.4818213, -0.22335242, -0.19243027, 0.0104124835, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8388928, 0.23735993, 0.7612285, -0.3047832, -0.66947925, 0.26203048, -0.34154037, -0.4089596, 0.0021616796, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.5142365, 0.63551736, 0.21318537, 0.16439424, 0.54549646, 0.09945296, 0.7095469, 0.40553862, 0.055921804, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.17173281, -0.06918118, -0.36753264, -0.43344375, 0.2653542, -0.25572732, -0.40987965, 0.5388304, 0.027159743, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.09837745, -0.012555276, 0.24861443, 0.0052615204, 0.19282283, 0.13149402, 0.18221046, 0.07866393, 0.22381613, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.2315022, -0.14019896, 0.50701785, 0.01848532, -0.29104376, -0.15703109, -0.6838428, 0.23405612, -0.1886982, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.007915172, 0.08272812, 0.0006315157
                );
                result +=
                    intermediate_two[0][0] * float3(-0.0041045295, -0.085767016, -0.0018870017)
                    + intermediate_two[0][1] * float3(-0.003585657, -0.10197854, -0.0030277148)
                    + intermediate_two[0][2] * float3(-0.20966627, -0.15075986, -0.42810306)
                    + intermediate_two[0][3] * float3(-0.02564836, -0.07806169, -0.005215481)
                    + intermediate_two[1][0] * float3(0.029621404, 0.52998555, -0.43195102)
                    + intermediate_two[1][1] * float3(0.0033958177, 0.14539026, 0.002617578)
                    + intermediate_two[1][2] * float3(0.005422788, 0.08354836, 0.0023797958)
                    + intermediate_two[1][3] * float3(-0.0013963772, -0.0918586, 0.0010123267)
                    + intermediate_two[2][0] * float3(-0.008949892, 0.09966536, -0.0023826426)
                    + intermediate_two[2][1] * float3(-0.09090813, -0.62796783, 0.24741682);

                return result;
            }
            half3 EvaluateNetwork_Right_1_D(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.043540604, 0.17018428, 0.0, 0.123468995, -0.06221043, 0.0, -0.09668142, 0.09329589, 0.0, -0.0996529, 0.0010290092, 0.110682026, 0.0, 0.0, -0.094939664, -0.26180047
                );

                float4 intermediate_one_4 = float4
                (
                    -0.024100667, -0.30228668, 0.0, 0.0005980267
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.23353592, 0.7800827, -0.46348134, 0.31161276, -0.1898967, -0.5138307, 0.08318387, 0.40475675, -0.9045647, 0.03760324, -0.2543404, 0.6520739, -0.09913394, -0.26110032, -0.0052013057, 0.14293948)
                    + f0.g * float4x4(0.42856404, -0.052030653, 0.22649929, -0.43172526, -0.22582486, -0.061149582, 0.2317048, -0.3786884, 0.07720297, -0.038471576, 0.83184105, 0.48763588, 0.86941344, 0.11768013, -0.12821542, -0.11892022)
                    + f0.b * float4x4(0.12296424, 0.67467713, 0.17284235, 1.4468018, 0.17284437, -0.06371774, 0.24249199, 0.8907945, 0.5911784, 1.2926159, -0.17721906, 0.90641814, 0.15365984, 0.2033512, -0.39157793, -1.472971)
                    + f0.a * float4x4(0.20710765, 0.18531825, 0.527816, -0.32826328, 0.19008671, 0.4714436, -0.32519642, 0.15159826, -0.10612589, -0.027062109, -0.030921718, -0.0050941557, 0.7416917, -0.033828303, -0.6617074, -0.15057454)
                    + f1.r * float4x4(0.01046741, -0.028965266, 0.14032899, 0.055758826, -0.090938896, -0.44881627, -0.06670303, -0.037186492, 0.20689763, -0.05812196, 0.14190242, 0.023125555, -0.48672923, 0.18170391, -0.28104764, 0.03881284)
                    + f1.g * float4x4(0.17752616, 0.09234568, 1.3050503, -0.23495047, -0.026575873, 0.08261935, 0.0058915117, 0.083299525, 0.73951864, 0.09804844, -0.027414763, 0.00045168417, 0.32686988, -0.42207855, 0.21426651, -0.07707427)
                    + f1.b * float4x4(0.22099303, -0.20147607, 0.119060956, -0.5615979, 0.23990981, -0.44919086, -0.25402898, -0.018912511, -0.12496567, -0.23666674, -0.17475832, -0.008826944, 0.12701271, 0.4504851, 0.23154064, -0.04982127)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.25210634, -0.36604103, 0.17526214, -1.0698392, 0.07756642, -0.037164662, -0.5610001, 0.2923574, -0.6318568, -0.19704156, 0.73142487, 0.4847639, -0.039648447, 0.13622458, 0.09147178, 0.025600754)
                    + f2.b * float4x4(1.4391965, -0.3050517, -0.6516506, 0.16952235, 0.46832642, 0.08917348, -0.41375557, -0.7957056, 0.10808924, 0.060418263, -1.0716852, -0.05372856, 0.48557547, -0.06654133, -0.4688767, -0.520881)
                    + f2.a * float4x4(-0.77189976, 1.1165003, -0.29335544, 0.044866405, -0.16086255, 0.08136868, 0.39975238, -0.57574356, -0.046388548, -1.4018915, -0.360469, 0.93384874, -0.24451128, -0.0064724814, 0.32115117, -0.0014857848)
                    + f3.r * float4x4(-0.15146434, 0.2937901, 0.40375632, 0.3899215, 0.100227304, -0.1727081, 0.05091197, -0.0030159445, -0.108878605, -0.1339395, -0.030045664, 0.11311862, 0.58647233, 0.20206562, 0.046178464, -0.20739673)
                    + f3.g * float4x4(-0.16227765, 0.8336414, -0.13698591, 0.20979692, 0.06860896, -0.11588551, 0.4234652, -0.049359556, -0.020086177, -0.24410047, 0.22677417, 0.19487785, 0.042721815, -0.11391395, -0.9105765, 0.36378857)
                    + f3.b * float4x4(-0.9036911, -0.056490853, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.17211306, 0.02654986, -0.78283244, -0.11068815, 0.033377655, 0.1764604, -0.09185188, 0.1348516, -0.38256383, -0.683171)
                    + f3.a * float4x4(-0.20142958, -0.3176838, -0.29607022, -0.44047323, -0.26786238, -0.19187808, -0.44533795, 0.3291462, -0.59286225, 0.022523519, 0.39932188, 0.6217084, -0.5439443, -0.15952644, 0.37401503, -0.43669975);
                
                intermediate_one_4 +=
                    f0.r * float4(0.43513763, -0.69504386, -0.20957315, -0.05828871)
                    + f0.g * float4(0.080018274, -1.7655416, -0.1571988, -0.81456804)
                    + f0.b * float4(0.32641634, 0.22704573, 0.3518889, -1.2533399)
                    + f0.a * float4(-0.51816094, 0.2173142, 0.12208697, -0.10122595)
                    + f1.r * float4(-0.0829104, -0.22082008, 0.44546178, -0.048946332)
                    + f1.g * float4(0.3860984, 0.16193601, -0.103472136, -0.068181194)
                    + f1.b * float4(0.30602032, 0.3151413, 0.39961028, 0.43195653)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.27206522, 0.85063225, 0.14820568, -0.2686213)
                    + f2.b * float4(-0.0807391, 0.16442148, 0.07934006, 0.09673218)
                    + f2.a * float4(-0.15852018, 0.04826917, -0.08260186, -0.20365335)
                    + f3.r * float4(-0.29104778, -0.44784978, -0.054469984, 0.12286028)
                    + f3.g * float4(-0.09155668, 0.021890797, 0.12001899, 0.28370655)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.14071764, -0.103617586, -0.32557088, -0.5822984);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.037389897, -0.172812, -0.015446752, -0.21763355, -0.07728358, 0.39127827, -0.6060877, 0.12192291, -0.7800308, 0.0, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.13640437, 0.28445166, 0.1316996, 0.25353473, -1.1258749, 0.34888193, 0.4570076, 0.3316936, 0.31031543, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.25018594, -0.2825318, -1.0916723, 0.19908492, -0.50479674, 0.5352873, 0.36671424, 0.40523487, 0.0024327806, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.18921556, 0.02259586, -0.12256856, -0.2821436, 0.23310772, -0.2506453, -0.2873725, -0.4032223, -0.2752846, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.3145407, 0.32519716, -0.11308466, -0.07076583, -0.16108924, -0.3280276, 0.37712982, -0.7097336, 0.2723832, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.13938601, 0.53434813, -0.07134927, 0.47271746, 0.08634397, 0.27643663, -0.092324965, -0.29084215, -0.51104504, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.092648365, 0.15920556, 0.15563476, 0.21025747, -1.044975, -0.025677787, -0.25672716, -0.22158982, 0.36106735, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.24424605, -0.11397182, -0.38106966, 0.003768843, 0.22956131, -0.18441708, 0.041704822, 0.39600113, -0.5362091, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.054131743, -0.037728246, -0.10566164, 0.33776453, -0.3110101, 0.25365004, -0.0014732821, 0.39871913, -0.0012690098, -0.28430334, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.034122337, -0.038271286, 0.099632375, 0.31125152, 0.7307607, -0.30206722, 0.6143817, -0.64955056, 0.6896809, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.21203634, -0.21119553, -0.30278754, 0.26169735, -0.60479164, 0.40098637, -0.059508216, 0.10199141, 0.11932534, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8388928, 0.23735993, 0.7612285, -0.3047832, -0.66947925, 0.26203048, -0.34154037, -0.4089596, 0.0021616796, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4705491, 0.2463696, 0.21318537, 0.3296976, 0.5573492, 0.56005967, 0.35244197, 0.39078528, 0.099802054, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.018323937, -0.18247095, -0.3743108, -0.46301645, 0.124879524, -0.11146133, 0.41339102, 0.19251505, 0.17675206, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.12401644, -0.028454905, 0.24861443, 0.65769297, 0.3469092, 0.15548408, -0.16405037, 0.44194263, 0.43252724, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.21772596, -0.18581076, 0.50701785, -0.5794287, 0.07805177, 0.7800398, -0.3076931, -0.14646915, 0.22921343, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.3692737, 0.1709496, -0.061623514, 0.5867677, -0.38941285, -0.2148691, -0.14394209, 0.13272817, 0.23792304, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.00014659333, 0.120350316, 1.5764348e-05
                );
                result +=
                    intermediate_two[0][0] * float3(-0.44753963, 0.015205089, 0.10143391)
                    + intermediate_two[0][1] * float3(0.47469017, -0.4139981, -0.19362384)
                    + intermediate_two[0][2] * float3(-0.20965336, -0.15028615, -0.428099)
                    + intermediate_two[0][3] * float3(-0.0042596185, 0.15515055, -0.0007340796)
                    + intermediate_two[1][0] * float3(-0.00087074895, 0.08422523, -0.00040320828)
                    + intermediate_two[1][1] * float3(0.0025246716, 0.14441526, 0.0006993343)
                    + intermediate_two[1][2] * float3(0.002785398, 0.06145417, 0.0019492654)
                    + intermediate_two[1][3] * float3(0.00062187755, -0.10665641, 9.079782e-05)
                    + intermediate_two[2][0] * float3(-0.0032673075, 0.3953722, -0.0013743904)
                    + intermediate_two[2][1] * float3(-0.09090813, -0.62796783, 0.24741682);

                return result;
            }
            half3 EvaluateNetwork_Right_1_U(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.12216465, 0.06904827, 0.0, -0.012480186, -0.03969035, 0.0, 0.08295084, 0.22818817, 0.0, 0.1660257, 0.21717478, 0.1332448, -0.19002807, 0.0, -0.0969008, -0.3582831
                );

                float4 intermediate_one_4 = float4
                (
                    -0.027647493, 0.06776195, 0.0, 0.0
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.39924935, 0.67892814, -0.46348134, 0.17566244, -0.1673764, -0.5138307, 0.26281238, 0.5396483, -0.9045647, 0.30326524, -0.03820218, 0.67463636, -0.28916642, -0.26110032, -0.0071622427, 0.046451807)
                    + f0.g * float4x4(-0.07905566, -1.0796983, 0.22649929, -0.7787155, -0.3341986, -0.061149582, 0.5071347, -0.6473076, 0.07720297, -1.0117682, 0.59803045, -0.8647059, 0.5061032, 0.11768013, -0.25793532, -0.001978064)
                    + f0.b * float4x4(-0.55151874, -0.09859829, 0.17284235, 0.56247574, 0.16951743, -0.06371774, 0.45094222, 0.74579704, 0.5911784, -0.11281595, 0.39860454, 0.29234067, 0.21954423, 0.2033512, -0.38973996, -1.839759)
                    + f0.a * float4x4(-0.07071397, 0.18035768, 0.527816, 0.22431459, 0.17121723, 0.4714436, 0.02555513, -0.0666825, -0.10612589, -0.07406208, 0.6910485, 0.082807615, -0.018269015, -0.033828303, -0.65922594, -0.005254903)
                    + f1.r * float4x4(-0.019135576, 0.15558982, 0.14032899, -0.020721223, -0.0020797611, -0.44881627, -0.005968928, -0.022535075, 0.20689763, -0.08178639, 0.17813584, 0.19037102, -0.023576098, 0.18170391, -0.32471702, 0.00914553)
                    + f1.g * float4x4(-0.05171719, 0.15967646, 1.3050503, 0.670345, -0.04692849, 0.08261935, -0.006890441, -0.05070174, 0.73951864, -0.021591123, 0.3358621, 0.1395408, -0.057539962, -0.42207855, 0.21296702, 0.0026608596)
                    + f1.b * float4x4(0.3867102, -0.10034764, 0.119060956, -0.4256542, 0.21738951, -0.44919086, -0.4336562, -0.15379652, -0.12496567, -0.5023531, -0.39089826, -0.031384945, 0.31704584, 0.4504851, 0.23350197, 0.04666571)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(-0.6612289, -0.71869224, 0.17526214, -0.21400696, 0.09939294, -0.037164662, -1.4280239, -0.62847036, -0.6318568, -0.7767937, 0.40441066, 0.45220116, 2.4196587, 0.13622458, 0.08492538, 0.09163704)
                    + f2.b * float4x4(0.94512516, -0.18636422, -0.6516506, 0.36891556, 0.48819658, 0.08917348, -1.0656974, -0.8012104, 0.10808924, -2.137011, -0.5187166, -0.14572746, 0.4130094, -0.06654133, -0.46845338, -0.023796873)
                    + f2.a * float4x4(-1.6876557, -1.2261293, -0.29335544, -0.4814613, -0.17793211, 0.08136868, -0.44996083, -0.72553307, -0.046388548, -0.19241208, 0.7794968, 0.50006545, -0.8703503, -0.0064724814, 0.32104024, -0.2464065)
                    + f3.r * float4x4(-0.15146434, 0.2937901, 0.40375632, 0.3899215, 0.100227304, -0.1727081, 0.05091197, -0.0030159445, -0.108878605, -0.1339395, -0.030045664, 0.11311862, 0.58647233, 0.20206562, 0.046178464, -0.20739673)
                    + f3.g * float4x4(-0.3279859, 0.73248684, -0.13698591, 0.07385079, 0.09112934, -0.11588551, 0.6031187, 0.0855344, -0.020086177, 0.021573009, 0.44291922, 0.21743447, -0.14730644, -0.11391395, -0.91253924, 0.26729083)
                    + f3.b * float4x4(-0.9036911, -0.056490853, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.17211306, 0.02654986, -0.78283244, -0.11068815, 0.033377655, 0.1764604, -0.09185188, 0.1348516, -0.38256383, -0.683171)
                    + f3.a * float4x4(-0.3671496, -0.41881308, -0.29607022, -0.5764088, -0.24534206, -0.19187808, -0.26570907, 0.46403527, -0.59286225, 0.28818607, 0.6154665, 0.6442673, -0.73395014, -0.15952644, 0.37205464, -0.5331401);
                
                intermediate_one_4 +=
                    f0.r * float4(0.43159038, -0.32495767, -0.20957315, -0.05888661)
                    + f0.g * float4(0.03399696, -1.3999835, -0.1571988, -0.51103616)
                    + f0.b * float4(0.3303321, 0.22993761, 0.3518889, 0.013984563)
                    + f0.a * float4(-0.5141942, 0.11859291, 0.12208697, -0.7120615)
                    + f1.r * float4(-0.0963101, 0.13571365, 0.44546178, 0.4670956)
                    + f1.g * float4(0.38919505, -0.018761646, -0.103472136, -0.11180612)
                    + f1.b * float4(0.30956757, -0.054907117, 0.39961028, 0.43255332)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.2751407, -0.38466793, 0.14820568, -0.08536301)
                    + f2.b * float4(-0.08407692, 1.269493, 0.07934006, -0.3206004)
                    + f2.a * float4(-0.15494877, 0.3365245, -0.08260186, 0.10167499)
                    + f3.r * float4(-0.29104778, -0.44784978, -0.054469984, 0.12286028)
                    + f3.g * float4(-0.09510344, 0.39195406, 0.12001899, 0.28310975)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.1442647, 0.26645654, -0.32557088, -0.5828889);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.16693723, 0.13137326, -0.034179833, -0.04878032, -0.18410996, 0.65394557, 0.28833985, -0.19799127, 0.49944764, 0.0, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.07730991, -0.27748185, 0.1467457, 0.6085613, -0.36896262, -0.111916006, 1.2808199, -0.72064084, -0.15878212, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.17600375, 0.48474464, -1.1280166, 0.24492109, -0.5885499, 0.16643403, -0.69795465, 0.31998166, 0.48319447, -0.33532858, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.18481635, 0.266706, -0.10751033, 0.1873226, 0.05330273, 0.44919568, -0.12147656, -0.0099612465, -0.43737426, -0.09135126, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.31022295, 0.33823547, -0.11308466, -0.046747055, -0.15321673, -0.33015528, 0.37437123, -0.7081637, 0.2662069, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.5910982, 0.1717187, -0.07134927, -0.24095836, -0.01735248, -0.48693597, -0.6818896, -0.6985454, -0.3114016, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(1.1480671, 0.5395823, 0.13500391, 0.07090981, -0.3955865, -0.310763, -0.4762909, 0.40916103, -0.542923, -0.137307, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(-0.41017604, -0.51506925, -0.36660197, 0.00064177194, 0.5158481, 0.23646186, 0.6019426, -0.30898756, 0.015911924, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.052499566, -0.3657207, -0.12678964, 0.2063171, -0.47495192, 0.0866043, 0.3297132, 0.31163734, 0.39787737, -0.28430334, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.4323597, -0.17752454, 0.080832005, -0.3169416, 0.2639664, -0.21972285, 0.59817076, -0.059855808, 0.13279122, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(-1.0969992, 0.5528898, -0.3388022, 0.09569615, -0.5572694, 0.10661484, -0.5754939, -0.51102525, 0.31890592, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8388928, 0.23735993, 0.7612285, -0.3047832, -0.66947925, 0.26203048, -0.34154037, -0.4089596, 0.0021616796, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.47151375, 0.20482324, 0.21318537, 0.33819416, 0.55995846, 0.5686912, 0.2816364, 0.38149405, 0.099471, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(0.19786538, -0.56735086, -0.36753264, 0.471865, 0.28356847, -0.43203467, -0.45053127, 0.70225865, -0.1400515, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.12261979, -0.03594736, 0.24861443, 0.66109544, 0.34346098, 0.15240054, -0.18558887, 0.44821024, 0.43323258, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(0.08507638, -0.21138778, 0.47244725, -0.27108195, 0.089178026, -0.13453291, -0.20664847, -0.41873497, -0.6215469, 0.22146459, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.34719363, 0.22817631, -0.061623514, -0.09033204, -0.6117134, -0.022383334, 0.354696, 0.2589602, -0.19268484, 0.15983509, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.0014709632, 0.17790927, 0.00017725535
                );
                result +=
                    intermediate_two[0][0] * float3(0.0026884873, 0.12552853, 0.0015102959)
                    + intermediate_two[0][1] * float3(-0.0023801175, -0.096472204, -0.0019915686)
                    + intermediate_two[0][2] * float3(-0.19112536, -0.15797257, -0.40655524)
                    + intermediate_two[0][3] * float3(0.0005201346, -0.11198758, -0.00040621305)
                    + intermediate_two[1][0] * float3(0.048620153, 0.5140943, -0.4500243)
                    + intermediate_two[1][1] * float3(0.0024133446, 0.16811463, 0.002124692)
                    + intermediate_two[1][2] * float3(-0.0027455667, 0.5426177, -0.0013837109)
                    + intermediate_two[1][3] * float3(-5.617239e-06, -0.1833273, -0.00070840766)
                    + intermediate_two[2][0] * float3(-0.0005954547, 0.24279425, 0.0020111375)
                    + intermediate_two[2][1] * float3(-0.09090813, -0.62796783, 0.24741682);

                return result;
            }
            half3 EvaluateNetwork_Right_2_D(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.31694576, -0.068614185, -0.087196544, 0.26669866, 0.36019439, 0.016230762, -0.22927931, -0.13370508, 0.14333911, 0.16810116, -0.15532674, -0.0061488985, -0.10263562, 0.17565532, 0.17051853, 0.05043102
                );

                float4 intermediate_one_4 = float4
                (
                    -0.2378071, -0.22854611, -0.1972804, 0.21124625
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(0.0024488207, -0.01708758, -0.10342054, 0.31716597, 0.09156723, 0.13722569, -0.0715186, 0.08214981, 0.21411984, -0.23790956, 0.11694976, -0.07479181, 0.031571504, 0.43385008, 0.2954341, -0.18565674)
                    + f0.g * float4x4(1.7443757, 0.2573202, 0.22158499, 0.22598626, -0.11260914, 0.1974943, 0.15725955, -0.019211363, 0.24227029, 0.03147483, 0.2514876, -1.0305401, 0.14338525, 0.039895006, 1.3048232, -0.19246012)
                    + f0.b * float4x4(0.19954695, 0.16692778, -0.10367025, 0.3673151, 0.8726343, 0.09509206, 0.053669512, -0.56773067, 0.05783516, 0.010823727, -1.3628782, -0.49775875, -0.46950534, 0.34440568, -0.08877722, -0.117550254)
                    + f0.a * float4x4(-0.0023474987, 0.07556108, 0.079595044, 0.053746562, 0.06415047, 0.20101199, 0.006227374, 0.022185955, 0.08947345, -0.06371075, 0.0376587, -0.06687194, -0.588978, 0.03240704, -0.18326476, -0.19433971)
                    + f1.r * float4x4(0.015381624, -0.11860437, 0.20900404, -0.0039517237, -0.014201228, -0.06576538, 0.07043767, 0.012725596, -0.21499892, 0.22067362, 0.0140489405, -0.103124745, 0.08174305, -0.008760069, 0.14350995, -0.1557919)
                    + f1.g * float4x4(-0.054981697, -0.1111593, 0.035095055, 0.0618339, 0.042724527, 0.008686751, -0.15698925, -0.009438833, -0.12509333, 0.06916341, 0.032359805, -0.03548349, -0.34810156, 0.022757022, -0.113380276, -0.026525803)
                    + f1.b * float4x4(-0.42567283, -0.096416846, -0.12669729, -0.14446066, -0.24079907, 0.18824568, 0.04872495, -0.06714112, 0.25454143, 0.05101168, 0.0886519, 0.33876625, 0.11818924, -0.23574823, -0.16411139, 0.14974622)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(0.30017185, -0.13472296, 0.13513859, -0.036214583, 0.34126112, -0.20299953, 0.17371145, 0.9698226, -0.09662107, -0.0055305064, -0.100718565, -0.2573821, -0.6494781, 0.21513525, -0.06308251, 0.038756076)
                    + f2.b * float4x4(-1.2732404, -0.04007698, 0.18201964, 0.6425596, -1.9886464, 0.11961317, -0.07079992, -0.51308197, 0.19679384, -0.201437, -0.17828636, -0.20985243, 0.055659838, -0.9494998, -0.18894449, -0.23683499)
                    + f2.a * float4x4(0.8485162, -0.09201503, 0.23697947, 1.2474331, 1.4206606, 0.050183475, 0.081471115, 0.9696166, 0.22335628, -0.06934887, -0.3783467, -0.5041148, 0.21036173, 1.094611, -0.14739634, 0.18995585)
                    + f3.r * float4x4(-0.15431982, 0.15539384, 0.16044667, 0.18340841, 0.19596776, 0.08692542, -0.03529045, 0.23576897, -0.12856087, -0.15083763, -0.17335445, 0.14073572, 0.1530523, 0.019607693, -0.20858425, 0.010045081)
                    + f3.g * float4x4(0.39978516, 0.071797065, -0.06810306, 0.11890056, 0.43168372, -0.06988573, -0.014095902, -0.08539469, -0.11129873, -0.1676237, -0.013239661, -0.015387065, 0.15195927, 0.37032303, 0.2931885, 0.022617327)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(0.21286547, -0.1724631, -0.16889615, 0.094110444, 0.40788347, 0.061532825, 0.13107017, 0.04412202, -0.17276432, 0.055095434, -0.21024117, -0.031515297, 0.11684055, 0.11592567, -0.051186327, -0.0920586);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.21929839, -0.04824978, 0.03698927, 0.14347439)
                    + f0.g * float4(0.060459286, -0.109698534, -0.09569588, 0.020936273)
                    + f0.b * float4(-0.11906728, -0.092971265, -0.0845595, 1.7583536)
                    + f0.a * float4(0.01229316, 0.154459, 0.064301014, -0.30360326)
                    + f1.r * float4(-0.15766096, -0.0751974, -0.066839516, 0.0498093)
                    + f1.g * float4(0.046853542, 0.08088711, 0.07516375, -0.19344224)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.07624585)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.031636983, -0.17695737, -0.21805188, 0.12988651)
                    + f2.b * float4(0.24594566, -0.0939486, 0.12339538, 0.2593242)
                    + f2.a * float4(0.18080056, 0.1198003, -0.21833882, -0.3363314)
                    + f3.r * float4(0.0917792, -0.042660743, 0.028912425, 0.0689162)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.25590298)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.23897246, -0.18271965, -0.20150936, -0.028565412);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.4017043, 0.4029375, 0.14859514, 0.06937532, -0.20201857, -0.23652352, -0.56789356, -0.15775234, 0.06851484, 0.37462637, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.15538053, 0.40312678, -0.03419769, 0.24295408, -0.0904216, 0.081158556, 0.50087446, 0.111098476, 0.59573424, 0.3840796, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.18582207, -0.19042915, -0.1622628, -0.17203347, 0.15141647, 0.015844997, -0.029975826, -0.19624285, 0.015340852, -0.07615648, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.071509056, -0.07580093, 0.11091636, 0.084401, -0.117472276, 0.043462195, -0.08600185, 0.21654546, -0.15988585, -0.04288384, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.13841671, 0.020812884, 0.19956976, 0.034213293, 0.1318827, -0.025919449, 0.7487723, -0.14511162, -0.13734819, 0.31457567, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(0.17232636, -0.87618244, 0.0016974214, 0.2984843, 0.16876194, -0.04926361, 0.3821214, -0.15707734, 0.004340638, 0.30545652, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.061188463, 0.10373681, -0.07639878, 0.05062613, 0.04482141, -0.09559036, -0.015035055, 0.03344481, 0.096384525, -0.19137424, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.061428208, -0.077944405, 0.0944807, 0.14437005, 0.12452183, -0.08304594, -0.12007246, -0.2213227, -0.1625917, 0.14703019, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(-0.1647667, 0.24309601, -0.11532622, -0.02129639, -0.023187766, -0.026562018, 0.11123409, 0.15855785, 0.22142881, 0.0601981, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.18204398, -0.11628748, -0.14431937, 0.12428338, -0.08612345, 0.17129257, -0.045771696, 0.13866562, 0.051156424, -0.102491945, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.14246169, -0.55330944, -0.55459464, -0.38052037, -0.09030866, -0.20882714, -1.6128668, -0.06673374, 0.5083264, -0.4182788, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.52641445, 0.010218036, 0.57608587, 0.14530472, -0.18986088, 0.11443825, 0.5437953, -0.03486403, -0.10723841, 0.38896656, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.066053845, -0.01862749, -0.47474384, -0.17363827, -0.23841317, -0.17506547, -0.12279628, 0.20857318, -0.07784116, -0.27345496, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.09216553, -0.53403443, 0.090121605, -0.07938438, 0.0960254, 0.16864447, 0.003597092, -0.1385149, -0.5752753, 0.0417411, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.08904236, 0.19821426, 0.39267159, 0.50549644, -0.117965505, -0.060472723, 0.36819026, -0.12122715, -0.09136088, 0.2549122, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.036196146, 0.09308135, 0.16276765, -0.035602383, 0.15791619, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.031296387, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.19910598, 0.04948717, -0.1471372, 0.11830123, 0.121750996, -0.18170677, 0.170573, 0.091924064, 0.047773615, -0.072256915, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.017366724, -0.4719274, -0.42273137, -0.37130263, 0.12783608, 0.08166605, -0.58360344, -0.00282623, -0.2466891, -0.27268264, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    -0.0005676898, 0.02949394, -0.0005814482
                );
                result +=
                    intermediate_two[0][0] * float3(0.0016208182, 0.13882704, 0.00044038493)
                    + intermediate_two[0][1] * float3(1.9311006e-05, -0.16950381, -5.4962864e-05)
                    + intermediate_two[0][2] * float3(0.0008110604, 0.095371954, 0.00036441456)
                    + intermediate_two[0][3] * float3(-0.0012422021, 0.13334867, -0.00013510244)
                    + intermediate_two[1][0] * float3(-0.14029865, -0.12207383, 0.2302251)
                    + intermediate_two[1][1] * float3(-0.17850196, 0.09497785, -0.07041529)
                    + intermediate_two[1][2] * float3(0.0003735264, 0.31282693, 0.002272917)
                    + intermediate_two[1][3] * float3(0.14794217, -0.08559169, -0.070844926)
                    + intermediate_two[2][0] * float3(0.0012271435, -0.112768434, 0.0007325807)
                    + intermediate_two[2][1] * float3(0.0007352997, 0.2706964, 0.0009969851);

                return result;
            }
            half3 EvaluateNetwork_Right_2_U(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.078263216, -0.19924162, -0.4682984, 0.13391113, -0.14861093, -0.11415722, 0.070822805, 0.18739003, 0.3329174, 0.16810116, -0.20780121, 0.026146159, -0.13744283, -0.17353515, 0.3499108, 0.05987078
                );

                float4 intermediate_one_4 = float4
                (
                    -0.2378071, -0.22854611, -0.1972804, 0.30803812
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.23622157, -0.14771214, -0.48452395, 0.18437734, -0.4172158, 0.0068403487, 0.22858308, 0.40324143, 0.4036946, -0.23790956, 0.06447553, -0.0424987, -0.0032424293, 0.08464439, 0.47483256, -0.17621708)
                    + f0.g * float4x4(0.6327387, 0.7805951, 0.6539499, 0.32965642, 0.4009023, 0.6216718, 0.29802567, -0.12040605, 0.53604966, 0.03147483, 0.32937306, -0.6033516, -0.18268383, -0.14167204, -0.088049166, -0.2026672)
                    + f0.b * float4x4(-0.06300776, 0.5455958, 0.32993954, -0.19966702, 1.5705135, 0.8238951, 0.5528165, 0.23844361, -0.21678562, 0.010823727, -0.72305024, -0.79870164, 0.15455519, -0.1490589, 1.0686903, -0.12702492)
                    + f0.a * float4x4(0.021629753, 0.037022974, 0.05671739, -0.016466934, -0.01602742, -0.07735892, -0.021553028, -0.0029486252, -0.0607614, -0.06371075, 0.029630605, 0.03382784, 0.3138258, -0.940479, -0.0640315, -0.20371008)
                    + f1.r * float4x4(0.033580646, 0.022506006, 0.027513005, 0.009313242, -0.02019143, -0.059927586, -0.0031166642, -0.01722477, -0.020010008, 0.22067362, 0.0152181545, 0.016571308, 0.04522079, -0.025539491, 0.002400738, -0.14612326)
                    + f1.g * float4x4(0.03529359, -0.004038322, 0.03194008, -0.005457144, -0.019342756, -0.14621119, -0.024266902, -0.03522696, -0.06634089, 0.06916341, 0.038567964, 0.05481316, 0.11967751, -0.0013545055, -0.0019987994, -0.03576246)
                    + f1.b * float4x4(-0.18698484, 0.034208093, 0.25442427, -0.011678283, 0.26800698, 0.31863505, -0.2513762, -0.38823912, 0.06495313, 0.05101168, 0.14113075, 0.3064347, 0.15299827, 0.11343919, -0.34350243, 0.14030656)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.28444323, 0.32769758, 0.7422357, -0.22578032, 0.63338035, 1.2198247, 0.06636122, -1.163291, -0.20483074, -0.0055305064, 0.3805427, 0.55136514, 1.088042, -0.07022477, -0.35808212, 0.048194647)
                    + f2.b * float4x4(0.83440626, 0.6348051, 0.9762592, 0.8092182, 0.60676676, 0.6937552, -0.27220306, -0.28004852, -0.5694057, -0.201437, -0.4676702, 0.5384158, -0.043506008, -0.1239242, 0.13224567, -0.22740847)
                    + f2.a * float4x4(1.1822965, -0.5025518, -1.194908, 0.7926451, -1.1100225, 1.9485492, 1.6093254, 0.671892, 1.8277512, -0.06934887, -0.81293756, 0.3271988, -0.573187, -0.13202399, 0.6206876, 0.1807352)
                    + f3.r * float4x4(-0.15431982, 0.15539384, 0.16044667, 0.18340841, 0.19596776, 0.08692542, -0.03529045, 0.23576897, -0.12856087, -0.15083763, -0.17335445, 0.14073572, 0.1530523, 0.019607693, -0.20858425, 0.010045081)
                    + f3.g * float4x4(0.16108806, -0.058827884, -0.44921464, -0.013890371, -0.0771408, -0.20027962, 0.28601465, 0.23571263, 0.078285396, -0.1676237, -0.06571278, 0.01691104, 0.11715378, 0.021119092, 0.47258478, 0.032057106)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(-0.025796706, -0.30310428, -0.54999447, -0.038681053, -0.100932464, -0.06885432, 0.43117443, 0.36522102, 0.016818747, 0.055095434, -0.26271498, 0.00078238064, 0.08203035, -0.23325644, 0.12820591, -0.0826188);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.21929839, -0.04824978, 0.03698927, 0.24026698)
                    + f0.g * float4(0.060459286, -0.109698534, -0.09569588, 0.23920934)
                    + f0.b * float4(-0.11906728, -0.092971265, -0.0845595, -0.020900995)
                    + f0.a * float4(0.01229316, 0.154459, 0.064301014, 0.010104371)
                    + f1.r * float4(-0.15766096, -0.0751974, -0.066839516, 0.008023719)
                    + f1.g * float4(0.046853542, 0.08088711, 0.07516375, 0.0023015752)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, -0.02055411)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.031636983, -0.17695737, -0.21805188, -0.9004583)
                    + f2.b * float4(0.24594566, -0.0939486, 0.12339538, 0.4190631)
                    + f2.a * float4(0.18080056, 0.1198003, -0.21833882, 1.3253173)
                    + f3.r * float4(0.0917792, -0.042660743, 0.028912425, 0.0689162)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.3527034)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.23897246, -0.18271965, -0.20150936, 0.06823342);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.21765944, 0.17616706, 0.4695394, 0.15744913, -0.19842024, -0.20783041, -0.19493788, -0.15775234, -0.28424838, 0.39567363, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(0.336881, 0.59710276, 0.5853163, 0.60101247, -0.07222574, 0.081158556, -0.021288155, 0.111098476, 0.011571948, 0.5829874, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.101440005, -0.3909937, 0.055678245, -0.081332766, 0.13658494, 0.015844997, -0.029975826, -0.19624285, 0.31170765, -0.12550637, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.79104877, -0.7701444, 1.5236967, 0.87023747, -0.12769018, 0.043462195, -0.08600185, 0.21654546, 0.6239849, -1.5680699, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.49465775, 0.0316799, 0.15075521, 0.19491915, 0.13371006, -0.025919449, -0.0696703, -0.14511162, 0.06638534, 0.09388373, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.60211635, 1.09918, -0.62538683, -0.1573414, 0.171021, -0.029961938, 0.09229661, -0.15707734, 0.055424012, 0.7627761, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(1.1240022, -2.2477987, 1.6715225, 0.8868239, 0.03043887, -0.09559036, -0.015035055, 0.03344481, 0.6487376, -1.4937605, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(-0.25207254, -0.7650951, -0.12653416, -0.18098086, 0.10999683, -0.08304594, -0.12007246, -0.2213227, 1.3415716, 0.44553876, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.27618587, 0.020811023, 0.2636733, 0.4183916, -0.018252496, -0.026562018, 0.10451114, 0.15855785, 0.5753731, -0.1198338, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.8309694, -0.4541406, -0.41343907, -0.4091367, -0.09467878, 0.17129257, -0.045771696, 0.13866562, -0.82660073, -0.49705708, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.224244, 0.6739942, 0.03149588, -0.055028778, -0.09030866, -0.20882714, -0.2009026, -0.06673374, 0.33088857, -0.44115585, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(-0.26580536, 0.20147845, -0.19377297, -0.18202545, -0.18363774, 0.14260566, -0.1989545, -0.03486403, 0.31207362, -0.40192786, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.43399158, -0.1819434, 0.30653682, 0.39585665, -0.23772089, -0.16567852, 0.13946825, 0.20857318, -0.21510342, 0.15370852, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(-0.055873018, -0.07562567, 0.1901714, 0.07711834, 0.10746934, 0.19257544, -0.2168508, -0.1385149, 0.019213237, 0.047957487, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(-0.2146987, 0.33605266, -0.044753604, -0.27068943, -0.1171732, -0.060472723, 0.03198902, -0.12122715, -1.0223732, -0.36040398, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.039053798, 0.10162291, 0.1550682, -0.04424804, 0.15791619, -0.17813031, 0.016043479, 0.003447075, -0.13943538, -0.040218156, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.19910598, 0.04948717, -0.1471372, 0.11830123, 0.121750996, -0.18170677, 0.170573, 0.091924064, 0.047773615, -0.072256915, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.046170607, 0.1462903, 0.113626175, 0.09159388, 0.12931983, 0.10850722, 0.21601556, -0.00282623, 0.35542247, -0.9676513, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    0.009420863, 0.109394036, 0.012974489
                );
                result +=
                    intermediate_two[0][0] * float3(0.002877166, 0.28150848, 0.0062652086)
                    + intermediate_two[0][1] * float3(-0.0046863523, -0.5483519, -0.009256409)
                    + intermediate_two[0][2] * float3(-0.019970967, 0.377555, -0.027013483)
                    + intermediate_two[0][3] * float3(0.024562264, 0.12234638, 0.033649165)
                    + intermediate_two[1][0] * float3(-0.19314961, -0.050532993, 0.29775083)
                    + intermediate_two[1][1] * float3(-0.1785503, 0.096145086, -0.070472136)
                    + intermediate_two[1][2] * float3(0.25430894, 0.25232318, 0.26880404)
                    + intermediate_two[1][3] * float3(0.14794217, -0.08559169, -0.070844926)
                    + intermediate_two[2][0] * float3(-0.0066137253, -0.9782371, -0.011986665)
                    + intermediate_two[2][1] * float3(-0.0014261105, 1.1726615, 0.0030695214);

                return result;
            }
            half3 EvaluateNetwork_Right_3_D(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    0.17125595, 0.09699273, 0.0, 0.20253053, -0.06145955, 0.0, 0.29529318, 0.34694844, 0.0, 0.16556431, -0.2246346, 0.07840197, 0.0, 0.0, -0.09935401, -0.28092265
                );

                float4 intermediate_one_4 = float4
                (
                    -0.008403344, 0.031129988, 0.0, 0.5025684
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.10581514, 0.7069232, -0.46348134, 0.39068624, -0.18914594, -0.5138307, 0.47517952, 0.6584475, -0.9045647, 0.30282864, -0.47999665, 0.61983913, -0.09913394, -0.26110032, -0.009615878, 0.12382468)
                    + f0.g * float4x4(0.6390288, -1.3363591, 0.22649929, -0.086656615, -0.19444855, -0.061149582, 0.7810614, 0.110170916, 0.07720297, 0.018561935, -1.8851826, 1.8867793, 0.86941344, 0.11768013, -0.12241332, 0.59393525)
                    + f0.b * float4x4(-0.45009476, 0.3995922, 0.17284235, 2.4874282, 0.21117683, -0.06371774, 0.55216074, 1.1756266, 0.5911784, 0.7661919, -0.03756922, 0.14258178, 0.15365984, 0.2033512, -0.38662365, -2.2888205)
                    + f0.a * float4x4(0.16310586, 0.52434164, 0.527816, -0.4341678, 0.1977465, 0.4714436, 0.056079213, 0.17210267, -0.10612589, -0.0026854496, 0.05504708, -0.18075952, 0.7416917, -0.033828303, -0.6569368, -0.19625525)
                    + f1.r * float4x4(0.03247819, -0.04017741, 0.14032899, 0.14636937, -0.05133689, -0.44881627, 0.038963407, -0.0461504, 0.20689763, -0.0006209551, -0.22161706, 0.20535173, -0.48672923, 0.18170391, -0.26241052, 0.13775733)
                    + f1.g * float4x4(0.32425192, 0.29244253, 1.3050503, -0.41864985, -0.0230144, 0.08261935, 0.018357074, 0.1162386, 0.73951864, 0.004790246, 0.0063684797, -0.093255796, 0.32686988, -0.42207855, 0.2178628, -0.117539525)
                    + f1.b * float4x4(0.09327013, -0.12828898, 0.119060956, -0.64065695, 0.23915905, -0.44919086, -0.6460237, -0.27256176, -0.12496567, -0.50188327, 0.05091569, 0.023447398, 0.12701271, 0.4504851, 0.2359558, -0.030704759)
                    + f1.a * float4x4(0.122044556, 0.0819759, 0.051311567, -0.4043137, -0.048172325, 0.21027829, -0.04544129, 0.1564508, -0.02228675, 0.77200747, -0.18501018, 0.20904228, -0.16866112, 0.26460853, 0.052209903, -0.6047008)
                    + f2.r * float4x4(-0.27077702, -0.18770017, -0.13895649, 0.21288769, 0.34607366, 0.3251377, -0.18696482, 0.42159778, 0.35317352, 0.23400806, 0.176139, 0.51738673, -0.22558782, 0.27075675, -0.26339206, 0.02758688)
                    + f2.g * float4x4(0.39732254, -0.35987568, 0.17526214, -0.38177785, 0.07411619, -0.037164662, -0.45961708, -0.12364929, -0.6318568, -0.25107616, 0.8189666, -0.12971722, -0.039648447, 0.13622458, 0.09232959, -0.019193418)
                    + f2.b * float4x4(1.4114804, 1.0833362, -0.6516506, -0.30135596, 0.45749196, 0.08917348, -1.1237335, -0.5878299, 0.10808924, -2.199564, -0.8218556, -0.10655143, 0.48557547, -0.06654133, -0.4704119, 0.18379101)
                    + f2.a * float4x4(1.2143, 0.26251286, -0.29335544, -0.032286495, -0.16967557, 0.08136868, 1.8377496, 0.8062669, -0.046388548, -0.30617663, -0.44200593, -0.037865948, -0.24451128, -0.0064724814, 0.32474533, 0.19164725)
                    + f3.r * float4x4(-0.15146434, 0.2937901, 0.40375632, 0.3899215, 0.100227304, -0.1727081, 0.05091197, -0.0030159445, -0.108878605, -0.1339395, -0.030045664, 0.11311862, 0.58647233, 0.20206562, 0.046178464, -0.20739673)
                    + f3.g * float4x4(-0.034559626, 0.7604819, -0.13698591, 0.2888751, 0.06935958, -0.11588551, 0.8154619, 0.20428409, -0.020086177, 0.021116192, 0.0010941316, 0.1626008, 0.042721815, -0.11391395, -0.9149908, 0.3446399)
                    + f3.b * float4x4(-0.9036911, -0.056490853, -0.27642944, -0.54856044, -0.29769978, -0.31305373, 0.17211306, 0.02654986, -0.78283244, -0.11068815, 0.033377655, 0.1764604, -0.09185188, 0.1348516, -0.38256383, -0.683171)
                    + f3.a * float4x4(-0.07370985, -0.39086524, -0.29607022, -0.36138317, -0.2671115, -0.19187808, -0.05335303, 0.58284104, -0.59286225, 0.2877559, 0.17365435, 0.5894695, -0.5439443, -0.15952644, 0.36959988, -0.45580664);
                
                intermediate_one_4 +=
                    f0.r * float4(0.45083416, -0.3616108, -0.20957315, 0.44367647)
                    + f0.g * float4(0.069413826, -1.8969109, -0.1571988, 0.0074068825)
                    + f0.b * float4(0.30949187, 1.4597664, 0.3518889, -0.16916609)
                    + f0.a * float4(-0.53412545, -0.05930201, 0.12208697, -0.26541364)
                    + f1.r * float4(-0.11728913, -0.08292692, 0.44546178, 0.04534032)
                    + f1.g * float4(0.37172356, 0.058647964, -0.103472136, -0.13387594)
                    + f1.b * float4(0.2903238, -0.018277803, 0.39961028, -0.07001343)
                    + f1.a * float4(0.194661, 0.27312347, -0.88654417, -0.17387846)
                    + f2.r * float4(-0.23689024, 0.45679513, 0.07686045, -0.044328995)
                    + f2.g * float4(-0.2616197, -0.37454298, 0.14820568, -0.9097971)
                    + f2.b * float4(-0.065960035, 1.4363642, 0.07934006, -0.60737383)
                    + f2.a * float4(-0.17510337, -0.19452548, -0.08260186, 1.556381)
                    + f3.r * float4(-0.29104778, -0.44784978, -0.054469984, 0.12286028)
                    + f3.g * float4(-0.07585961, 0.35530093, 0.12001899, 0.78568435)
                    + f3.b * float4(-0.3948244, -0.23514375, 0.017975407, -0.066080585)
                    + f3.a * float4(-0.12502068, 0.22980602, -0.32557088, -0.08031506);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    -0.5963255, -0.67004883, 0.0, 0.044984344, -0.61346024, -0.15831354, 0.4643744, -0.63386196, -0.27143022, -0.015614003, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.1435863, 0.6781935, 0.1467457, -0.0038388951, 0.4185954, 0.14310873, 0.13388552, 0.041627776, 1.0537826, -0.41773292, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(-0.31076488, -0.028617864, -1.0916723, 6.061925e-05, -0.009333722, 0.54256314, 0.4275889, 0.46304023, 0.036062695, -0.35083646, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(-0.26700675, 0.091461204, -0.5665951, -0.32973003, -0.30694672, 0.5876471, 0.44174683, -0.16796798, 0.042088613, 0.23443922, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(0.05051858, 0.60880154, -0.10751033, 0.005369141, 0.8014156, -0.3196674, -0.2743972, 1.1841648, 0.1502566, -0.10663733, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.31600296, 0.33478677, -0.11308466, -0.10029629, -0.16110155, -0.3377733, 0.37521416, -0.6747158, 0.26770502, 0.5623157, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.65277994, -0.19348831, -0.6285974, 0.00881557, 0.27153823, -0.21760069, 0.16369683, 0.102857105, 0.39887923, -0.16213025, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(1.2895763, 0.15524572, -0.07134927, -0.009958987, 0.49238408, 0.022183431, 0.95053256, 0.20907626, 1.5095401, -0.27078733, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.5226847, 0.8948526, 0.17014529, -0.01303233, 0.51086205, 0.2697304, -0.36992308, -0.46434414, 0.42067102, -0.15242971, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.10541452, -0.12531249, 0.2274244, -0.39598304, -0.28960043, -0.6632417, 0.3598395, 0.46332097, 0.0054862974, -0.009387187, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.2328884, -0.31653222, -0.36660197, 0.009883064, -0.5093567, 0.6035158, 0.1329999, -0.09226053, 0.21416008, -0.10553875, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(-0.4030382, -0.22064103, -0.09104016, -0.008291535, -0.08178008, 0.24995477, -0.0235883, 0.12547004, -0.4873322, -0.2976418, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.14583698, 0.19845863, 0.114845105, -0.019132383, 0.46515977, 0.5973693, 0.16216971, -0.14488424, -0.23401043, 0.0925984, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.21203634, -0.21119553, -0.30278754, 0.26169735, -0.60479164, 0.40098637, -0.059508216, 0.10199141, 0.11932534, -0.26206273, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.8388928, 0.23735993, 0.7612285, -0.3047832, -0.66947925, 0.26203048, -0.34154037, -0.4089596, 0.0021616796, 0.55620676, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.4427603, 0.2061312, 0.21318537, 0.33506015, 0.5657092, 0.5472206, 0.4047983, 0.40014836, 0.13510576, 0.11220951, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.9804662, -1.6212137, -0.36753264, -0.0107514085, -0.14492211, -0.41470352, -0.8088588, 0.34822753, -0.62636894, -0.59497136, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(-0.13381296, -0.016949158, 0.24861443, 0.64472634, 0.35642177, 0.16517034, -0.16356654, 0.43160194, 0.4402625, -0.97813255, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-1.0000746, -0.047621746, 0.50701785, -0.011127021, -0.4138828, -0.31842023, -0.505531, -0.47249907, -0.66322184, 0.20577586, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(0.33342895, 0.03467083, -0.21911056, -0.49829432, 0.6197158, 0.12671596, 0.32239, -0.11703509, -0.015035183, -0.2316117, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(-0.13515882, -0.10951146, -0.061623514, 0.011219916, -0.88462245, 0.29070738, 0.85722953, 0.1889486, 0.58717966, 0.14489187, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    6.680874e-05, 0.10102237, -7.692454e-05
                );
                result +=
                    intermediate_two[0][0] * float3(-0.00027528923, 0.4997567, -0.00071085966)
                    + intermediate_two[0][1] * float3(0.0010717286, -0.20653239, -0.0015395102)
                    + intermediate_two[0][2] * float3(-0.20966627, -0.15075986, -0.42810306)
                    + intermediate_two[0][3] * float3(-0.026994467, 0.00029836028, -0.013771263)
                    + intermediate_two[1][0] * float3(-0.00025225463, 0.06612844, -0.0003003968)
                    + intermediate_two[1][1] * float3(0.0002971255, 0.13260311, 0.00017231642)
                    + intermediate_two[1][2] * float3(-0.00022591789, 0.13690922, 0.00042234434)
                    + intermediate_two[1][3] * float3(0.00055423286, -0.08212555, 0.0001148057)
                    + intermediate_two[2][0] * float3(0.000114706214, 0.19753496, 0.00092036487)
                    + intermediate_two[2][1] * float3(-0.09091584, -0.62761956, 0.2474189);

                return result;
            }
            half3 EvaluateNetwork_Right_3_U(fixed4 f0, fixed4 f1, fixed4 f2, fixed4 f3)
            {
                // layer 1: 16 -> 20
                // bias
                float4x4 intermediate_one_16 = float4x4
                (
                    -0.25835112, 0.18318851, -0.46344793, 0.1348738, -0.15772545, 0.011810587, -0.2912452, -0.15065534, -0.015165226, 0.16810116, -0.20963809, 0.19858342, -0.092525996, -0.2839762, 0.051592976, -0.026667055
                );

                float4 intermediate_one_4 = float4
                (
                    -0.2378071, -0.22854611, -0.1972804, 0.090750724
                );

                // weights                
                intermediate_one_16 +=
                    f0.r * float4x4(-0.5728589, 0.23472914, -0.47966844, 0.18534032, -0.42634454, 0.13280554, -0.13347147, 0.065214254, 0.055610243, -0.23790956, 0.062652506, 0.12994298, 0.041678187, -0.025803557, 0.17650932, -0.2627426)
                    + f0.g * float4x4(1.1712638, 0.5199914, 0.5349261, -0.921235, -0.10893723, 0.19304772, -0.43904048, 0.5532124, 0.6951218, 0.03147483, 0.84370595, -1.2225884, -0.3073864, 0.44913447, -0.21538, -0.37898675)
                    + f0.b * float4x4(-0.37286878, 1.9305975, 0.83418137, 2.256948, 1.3226341, 0.09738565, -0.33926725, 1.2126315, -1.256542, 0.010823727, 0.14865136, -0.28547058, 0.6541402, -0.6901874, 0.3407357, -0.9172045)
                    + f0.a * float4x4(0.16943029, 0.11635539, 0.008588503, -0.05560204, 0.011352335, 0.20457923, -0.034903903, 0.037985064, 0.11229976, -0.06371075, -0.03723379, -0.17083372, 0.16737008, -0.001675756, -0.03585133, 0.008321711)
                    + f1.r * float4x4(0.12362784, 0.024606396, 0.0075202477, -0.038755212, 0.0027056905, -0.063083045, -0.022873871, -0.013689174, 0.061009225, 0.22067362, -0.0049140314, -0.11724552, 0.08548085, 0.007955095, -0.01904007, 0.0021926565)
                    + f1.g * float4x4(0.11980789, 0.0750625, 0.008622035, -0.04948503, 0.0111016, 0.013473352, -0.019257018, -0.019252557, 0.10113769, 0.06916341, -0.044030838, -0.112369426, 0.1196384, 0.021172626, -0.019552873, 0.013711015)
                    + f1.b * float4x4(0.14963648, -0.34822702, 0.2495438, -0.012649732, 0.277119, 0.19266583, 0.110677816, -0.05020128, 0.41305548, 0.05101168, 0.14296104, 0.13399789, 0.10807885, 0.22388214, -0.045184836, 0.2268486)
                    + f1.a * float4x4(-0.02084148, 0.24698517, 0.09365028, -0.21100059, 0.07480225, -0.1004788, -0.1707944, -0.17246214, 0.23337957, 0.23112965, 0.23726994, -0.110651106, 0.12731451, -0.03526777, -0.088431776, 0.039456993)
                    + f2.r * float4x4(0.18039528, 0.06218344, -0.15409172, -0.05710587, -0.22354409, 0.23424444, -0.17277202, 0.2246927, 0.15345085, 0.049491167, -0.13588303, -0.006309569, -0.18518263, 0.15617773, -0.024955511, 0.13215616)
                    + f2.g * float4x4(-0.10820291, 0.5037528, 1.1045294, 0.8274181, 0.4261781, -0.20698914, 1.1334187, 0.72767997, -0.09954552, -0.0055305064, 0.5718355, 0.36487645, 0.38806129, 0.6865325, 1.0205388, 0.46274218)
                    + f2.b * float4x4(1.0531195, -0.19144352, 1.1939728, 0.6031732, 0.4771768, 0.11564513, -0.49981698, 0.05791561, 0.6294251, -0.201437, -0.80742395, -1.0405895, 0.37568432, 0.7491719, -1.0395212, 0.64295167)
                    + f2.a * float4x4(-0.18776089, 1.9956589, -0.7982755, -0.12700838, -2.0365243, 0.055197783, -0.19230463, -0.41983584, 1.3929329, -0.06934887, -0.49783224, 0.30665162, -1.2308571, 0.34623092, -0.27581608, -0.23337923)
                    + f3.r * float4x4(-0.15431982, 0.15539384, 0.16044667, 0.18340841, 0.19596776, 0.08692542, -0.03529045, 0.23576897, -0.12856087, -0.15083763, -0.17335445, 0.14073572, 0.1530523, 0.019607693, -0.20858425, 0.010045081)
                    + f3.g * float4x4(-0.1755267, 0.32360741, -0.44434705, -0.012910226, -0.086251944, -0.07430587, -0.07604841, -0.10233393, -0.26982072, -0.1676237, -0.06755103, 0.18934527, 0.16207118, -0.08932609, 0.1742612, -0.054481745)
                    + f3.b * float4x4(0.22705242, -0.13188192, 0.21622181, -0.088890046, 0.14640737, 0.18900877, -0.05082023, 0.026910633, -0.22987631, -0.08633709, -0.06199324, 0.051490754, 0.05545649, -0.1798496, -0.06561527, 0.13958019)
                    + f3.a * float4x4(-0.3623982, 0.07934108, -0.5451552, -0.037701495, -0.11004586, 0.057112686, 0.06911793, 0.027180478, -0.33127645, 0.055095434, -0.2645505, 0.1732195, 0.12694553, -0.3437043, -0.17011143, -0.1691604);
                
                intermediate_one_4 +=
                    f0.r * float4(-0.21929839, -0.04824978, 0.03698927, 0.022987107)
                    + f0.g * float4(0.060459286, -0.109698534, -0.09569588, -0.15103231)
                    + f0.b * float4(-0.11906728, -0.092971265, -0.0845595, 0.44109794)
                    + f0.a * float4(0.01229316, 0.154459, 0.064301014, 0.11967024)
                    + f1.r * float4(-0.15766096, -0.0751974, -0.066839516, 0.049002845)
                    + f1.g * float4(0.046853542, 0.08088711, 0.07516375, 0.08496384)
                    + f1.b * float4(0.150624, 0.032370985, -0.01192373, 0.19672874)
                    + f1.a * float4(-0.15129688, -0.0305309, 0.051655352, -0.23354253)
                    + f2.r * float4(-0.07485199, 0.015095115, -0.06911835, 0.17141187)
                    + f2.g * float4(-0.031636983, -0.17695737, -0.21805188, 1.4081475)
                    + f2.b * float4(0.24594566, -0.0939486, 0.12339538, -0.24262367)
                    + f2.a * float4(0.18080056, 0.1198003, -0.21833882, 0.23626196)
                    + f3.r * float4(0.0917792, -0.042660743, 0.028912425, 0.0689162)
                    + f3.g * float4(-0.14314508, 0.051097125, -0.22173482, 0.13541922)
                    + f3.b * float4(-0.13219139, -0.129855, -0.17914948, -0.21778813)
                    + f3.a * float4(0.23897246, -0.18271965, -0.20150936, -0.14905235);
                
                intermediate_one_16[0] = max(intermediate_one_16[0], 0.0);
                intermediate_one_16[1] = max(intermediate_one_16[1], 0.0);
                intermediate_one_16[2] = max(intermediate_one_16[2], 0.0);
                intermediate_one_16[3] = max(intermediate_one_16[3], 0.0);
                intermediate_one_4 = max(intermediate_one_4, 0.0);

                // layer 2: 20 -> 10
                // bias
                float3x4 intermediate_two = float3x4
                (
                    0.22792093, 0.013596486, 0.5518036, 0.27447215, -0.20584248, -0.21936749, -0.07457075, -0.14935598, 0.2486955, 0.40234083, 0.0, 0.0
                );
                // weights
                intermediate_two +=
                        intermediate_one_16[0][0] * float3x4(-0.003421563, -0.37739736, 0.27695984, 0.3776067, -0.06875038, 0.07122709, -0.2560001, -0.6281808, 0.22063263, -0.60156476, 0.0, 0.0)
                        + intermediate_one_16[0][1] * float3x4(0.99888456, -0.5399184, 0.6898077, 0.5601448, 0.15141647, 0.015844997, -0.18999879, -0.8504527, 1.6792482, -1.4924129, 0.0, 0.0)
                        + intermediate_one_16[0][2] * float3x4(0.35293648, -2.4636393, 0.40316483, 0.279572, -0.117472276, 0.043462195, 0.07614114, 0.68510395, 1.5123459, -2.1644616, 0.0, 0.0)
                        + intermediate_one_16[0][3] * float3x4(-0.38331306, -0.48058638, -0.75146353, -0.62346065, 0.14875792, -0.025919449, -0.1751949, -0.15230876, -1.3373597, 0.06411819, 0.0, 0.0)
                        + intermediate_one_16[1][0] * float3x4(-0.27500287, 1.9892379, -0.285683, -0.12112536, 0.1851203, -0.029961938, -0.25084326, -0.00956893, -0.3363482, 2.1512752, 0.0, 0.0)
                        + intermediate_one_16[1][1] * float3x4(-0.04913249, 0.10373681, -0.055492584, 0.071704164, 0.04482141, -0.09559036, -0.015035055, 0.03344481, 0.096384525, -0.19137424, 0.0, 0.0)
                        + intermediate_one_16[1][2] * float3x4(0.35697147, 0.16962747, 0.5269725, 0.31902418, 0.10121232, -0.08513074, 0.736022, 0.9726388, 0.12238611, 0.47143567, 0.0, 0.0)
                        + intermediate_one_16[1][3] * float3x4(0.33186567, -0.053858735, 0.343147, 0.49738452, -0.0054886853, -0.030492581, 0.7911961, 0.23663276, 0.43222064, -0.17992042, 0.0, 0.0)
                        + intermediate_one_16[2][0] * float3x4(-0.271073, 0.9818154, -0.16790925, 0.27819028, -0.107772484, 0.16107924, -0.59724414, 0.21950328, 0.521458, 0.9922448, 0.0, 0.0)
                        + intermediate_one_16[2][1] * float3x4(0.042338803, -0.13973854, 0.026882796, 0.13519844, 0.10100481, 0.16443525, -0.035353567, -0.011109424, -0.18959448, -0.062042043, 0.0, 0.0)
                        + intermediate_one_16[2][2] * float3x4(0.22344217, 0.34938636, -0.09523625, 0.13263914, -0.09030866, -0.20981702, -1.0444634, -0.07568791, -0.10924094, 0.16645537, 0.0, 0.0)
                        + intermediate_one_16[2][3] * float3x4(0.037723318, -0.44290942, 0.01222832, 0.24834162, -0.1888713, 0.14260566, -0.20287336, -0.09643595, -0.120356426, -0.37810022, 0.0, 0.0)
                        + intermediate_one_16[3][0] * float3x4(0.24049245, -0.2479227, 0.26892853, 0.22756982, -0.24772479, -0.17158173, 0.10433809, 0.62372196, -0.48209053, -0.13847333, 0.0, 0.0)
                        + intermediate_one_16[3][1] * float3x4(0.51220053, -0.01601366, 0.8048284, 0.7157585, 0.09151228, 0.18078022, 0.10343832, 0.23918253, -0.46163392, -0.42780104, 0.0, 0.0)
                        + intermediate_one_16[3][2] * float3x4(0.13783805, 0.76533854, 0.2845739, 0.17610188, -0.11626294, -0.060472723, -0.036079306, -0.16808496, 0.07129192, -0.26549903, 0.0, 0.0)
                        + intermediate_one_16[3][3] * float3x4(-0.47343376, 0.69215703, -0.53867507, -0.49082515, 0.13555917, -0.1886353, -0.82561946, -0.6708777, 0.003882927, 0.16900422, 0.0, 0.0)
                        + intermediate_one_4[0] * float3x4(0.19910598, 0.04948717, -0.1471372, 0.11830123, 0.121750996, -0.18170677, 0.170573, 0.091924064, 0.047773615, -0.072256915, 0.0, 0.0)
                        + intermediate_one_4[1] * float3x4(-0.14865117, -0.13184914, -0.038328193, -0.15347204, 0.123182446, 0.16728446, 0.08111753, 0.01654096, 0.08604519, -0.054643642, 0.0, 0.0)
                        + intermediate_one_4[2] * float3x4(-0.07179529, -0.118651696, 0.12519594, 0.14203046, -0.21022412, -0.059985932, 0.17872685, 0.047400273, 0.047484346, -0.04517092, 0.0, 0.0)
                        + intermediate_one_4[3] * float3x4(0.089845, -0.12655322, 0.16787058, 0.19252339, 0.118939705, 0.104763836, -0.14104277, -0.8706451, -0.19306096, -0.3508384, 0.0, 0.0);

                intermediate_two[0] = max(intermediate_two[0], 0.0);
                intermediate_two[1] = max(intermediate_two[1], 0.0);
                intermediate_two[2] = max(intermediate_two[2], 0.0);

                // layer 3: 10 -> 3
                // bias
                float3 result = float3
                (
                    -0.00064387685, -0.22775756, -0.0039961706
                );
                result +=
                    intermediate_two[0][0] * float3(-0.0017764224, 0.1846375, -0.0023974704)
                    + intermediate_two[0][1] * float3(-0.0011300864, -0.849951, -0.0048349234)
                    + intermediate_two[0][2] * float3(0.0025803088, 0.49351826, 0.008502933)
                    + intermediate_two[0][3] * float3(-0.0004838416, 0.29546285, -0.0010526396)
                    + intermediate_two[1][0] * float3(-0.17675367, -0.048896987, 0.27702355)
                    + intermediate_two[1][1] * float3(-0.17852028, 0.096217155, -0.070387326)
                    + intermediate_two[1][2] * float3(-0.0009463581, 0.4943966, 0.0008567703)
                    + intermediate_two[1][3] * float3(-0.0019398367, -0.98035985, -0.0074268305)
                    + intermediate_two[2][0] * float3(-0.00043233705, -0.6175229, -0.0037873585)
                    + intermediate_two[2][1] * float3(0.0010518697, 0.8659445, 0.005542241);

                return result;
            }